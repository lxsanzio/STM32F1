
STM32_eth_server_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f64  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  08004070  08004070  00014070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004330  08004330  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  08004330  08004330  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004330  08004330  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004330  08004330  00014330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004334  08004334  00014334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08004338  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  2000009c  080043d4  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  080043d4  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a6d0  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001de0  00000000  00000000  0002a795  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009f8  00000000  00000000  0002c578  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000928  00000000  00000000  0002cf70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014a5e  00000000  00000000  0002d898  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007ee5  00000000  00000000  000422f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007037e  00000000  00000000  0004a1db  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ba559  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c34  00000000  00000000  000ba5d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000009c 	.word	0x2000009c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004058 	.word	0x08004058

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a0 	.word	0x200000a0
 8000148:	08004058 	.word	0x08004058

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <cs_sel>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void cs_sel() {
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //CS LOW
 8000160:	2200      	movs	r2, #0
 8000162:	2110      	movs	r1, #16
 8000164:	4802      	ldr	r0, [pc, #8]	; (8000170 <cs_sel+0x14>)
 8000166:	f000 ff3d 	bl	8000fe4 <HAL_GPIO_WritePin>
}
 800016a:	bf00      	nop
 800016c:	bd80      	pop	{r7, pc}
 800016e:	bf00      	nop
 8000170:	40010800 	.word	0x40010800

08000174 <cs_desel>:

void cs_desel() {
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 8000178:	2201      	movs	r2, #1
 800017a:	2110      	movs	r1, #16
 800017c:	4802      	ldr	r0, [pc, #8]	; (8000188 <cs_desel+0x14>)
 800017e:	f000 ff31 	bl	8000fe4 <HAL_GPIO_WritePin>
}
 8000182:	bf00      	nop
 8000184:	bd80      	pop	{r7, pc}
 8000186:	bf00      	nop
 8000188:	40010800 	.word	0x40010800

0800018c <spi_rb>:

uint8_t spi_rb(void) {
 800018c:	b580      	push	{r7, lr}
 800018e:	b082      	sub	sp, #8
 8000190:	af00      	add	r7, sp, #0
	uint8_t rbuf;
	HAL_SPI_Receive(&hspi1, &rbuf, 1, 0xFFFFFFFF);
 8000192:	1df9      	adds	r1, r7, #7
 8000194:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000198:	2201      	movs	r2, #1
 800019a:	4804      	ldr	r0, [pc, #16]	; (80001ac <spi_rb+0x20>)
 800019c:	f001 fceb 	bl	8001b76 <HAL_SPI_Receive>
	return rbuf;
 80001a0:	79fb      	ldrb	r3, [r7, #7]
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	3708      	adds	r7, #8
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	20000164 	.word	0x20000164

080001b0 <spi_wb>:

void spi_wb(uint8_t b) {
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b082      	sub	sp, #8
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	4603      	mov	r3, r0
 80001b8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &b, 1, 0xFFFFFFFF);
 80001ba:	1df9      	adds	r1, r7, #7
 80001bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80001c0:	2201      	movs	r2, #1
 80001c2:	4803      	ldr	r0, [pc, #12]	; (80001d0 <spi_wb+0x20>)
 80001c4:	f001 fba3 	bl	800190e <HAL_SPI_Transmit>
}
 80001c8:	bf00      	nop
 80001ca:	3708      	adds	r7, #8
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bd80      	pop	{r7, pc}
 80001d0:	20000164 	.word	0x20000164

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b5b0      	push	{r4, r5, r7, lr}
 80001d6:	b094      	sub	sp, #80	; 0x50
 80001d8:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

	uint8_t retVal, sockStatus;
	int16_t rcvLen;
	uint8_t rcvBuf[20], bufSize[] = {2, 2, 2, 2, 2, 2, 2, 2};
 80001da:	4abd      	ldr	r2, [pc, #756]	; (80004d0 <main+0x2fc>)
 80001dc:	f107 0320 	add.w	r3, r7, #32
 80001e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001e4:	e883 0003 	stmia.w	r3, {r0, r1}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e8:	f000 fc3a 	bl	8000a60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ec:	f000 f9b6 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f0:	f000 fa58 	bl	80006a4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80001f4:	f000 f9f6 	bl	80005e4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80001f8:	f000 fa2a 	bl	8000650 <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */

  PRINT_HEADER();
 80001fc:	2364      	movs	r3, #100	; 0x64
 80001fe:	222f      	movs	r2, #47	; 0x2f
 8000200:	49b4      	ldr	r1, [pc, #720]	; (80004d4 <main+0x300>)
 8000202:	48b5      	ldr	r0, [pc, #724]	; (80004d8 <main+0x304>)
 8000204:	f002 f889 	bl	800231a <HAL_UART_Transmit>
 8000208:	2364      	movs	r3, #100	; 0x64
 800020a:	222f      	movs	r2, #47	; 0x2f
 800020c:	49b3      	ldr	r1, [pc, #716]	; (80004dc <main+0x308>)
 800020e:	48b2      	ldr	r0, [pc, #712]	; (80004d8 <main+0x304>)
 8000210:	f002 f883 	bl	800231a <HAL_UART_Transmit>
 8000214:	2364      	movs	r3, #100	; 0x64
 8000216:	222f      	movs	r2, #47	; 0x2f
 8000218:	49ae      	ldr	r1, [pc, #696]	; (80004d4 <main+0x300>)
 800021a:	48af      	ldr	r0, [pc, #700]	; (80004d8 <main+0x304>)
 800021c:	f002 f87d 	bl	800231a <HAL_UART_Transmit>

  reg_wizchip_cs_cbfunc(cs_sel, cs_desel);
 8000220:	49af      	ldr	r1, [pc, #700]	; (80004e0 <main+0x30c>)
 8000222:	48b0      	ldr	r0, [pc, #704]	; (80004e4 <main+0x310>)
 8000224:	f003 f92c 	bl	8003480 <reg_wizchip_cs_cbfunc>
  reg_wizchip_spi_cbfunc(spi_rb, spi_wb);
 8000228:	49af      	ldr	r1, [pc, #700]	; (80004e8 <main+0x314>)
 800022a:	48b0      	ldr	r0, [pc, #704]	; (80004ec <main+0x318>)
 800022c:	f003 f94c 	bl	80034c8 <reg_wizchip_spi_cbfunc>
  wizchip_init(bufSize, bufSize);
 8000230:	f107 0220 	add.w	r2, r7, #32
 8000234:	f107 0320 	add.w	r3, r7, #32
 8000238:	4611      	mov	r1, r2
 800023a:	4618      	mov	r0, r3
 800023c:	f003 f9ba 	bl	80035b4 <wizchip_init>
  wiz_NetInfo netInfo = { .mac		= {0x00, 0x08, 0xdc, 0xab, 0xee}, //Mac Addres f -> e
 8000240:	f107 0308 	add.w	r3, r7, #8
 8000244:	2200      	movs	r2, #0
 8000246:	601a      	str	r2, [r3, #0]
 8000248:	605a      	str	r2, [r3, #4]
 800024a:	609a      	str	r2, [r3, #8]
 800024c:	60da      	str	r2, [r3, #12]
 800024e:	611a      	str	r2, [r3, #16]
 8000250:	f8c3 2013 	str.w	r2, [r3, #19]
 8000254:	2308      	movs	r3, #8
 8000256:	727b      	strb	r3, [r7, #9]
 8000258:	23dc      	movs	r3, #220	; 0xdc
 800025a:	72bb      	strb	r3, [r7, #10]
 800025c:	23ab      	movs	r3, #171	; 0xab
 800025e:	72fb      	strb	r3, [r7, #11]
 8000260:	23ee      	movs	r3, #238	; 0xee
 8000262:	733b      	strb	r3, [r7, #12]
 8000264:	23c0      	movs	r3, #192	; 0xc0
 8000266:	73bb      	strb	r3, [r7, #14]
 8000268:	23a8      	movs	r3, #168	; 0xa8
 800026a:	73fb      	strb	r3, [r7, #15]
 800026c:	2302      	movs	r3, #2
 800026e:	743b      	strb	r3, [r7, #16]
 8000270:	23c0      	movs	r3, #192	; 0xc0
 8000272:	747b      	strb	r3, [r7, #17]
 8000274:	23ff      	movs	r3, #255	; 0xff
 8000276:	74bb      	strb	r3, [r7, #18]
 8000278:	23ff      	movs	r3, #255	; 0xff
 800027a:	74fb      	strb	r3, [r7, #19]
 800027c:	23ff      	movs	r3, #255	; 0xff
 800027e:	753b      	strb	r3, [r7, #20]
 8000280:	23c0      	movs	r3, #192	; 0xc0
 8000282:	75bb      	strb	r3, [r7, #22]
 8000284:	23a8      	movs	r3, #168	; 0xa8
 8000286:	75fb      	strb	r3, [r7, #23]
 8000288:	2302      	movs	r3, #2
 800028a:	763b      	strb	r3, [r7, #24]
 800028c:	2301      	movs	r3, #1
 800028e:	767b      	strb	r3, [r7, #25]
						  .ip 		= {192, 168, 2, 192},
						  .sn		= {255, 255, 255, 0},
						  .gw		= {192, 168, 2, 1} };
  wizchip_setnetinfo(&netInfo);
 8000290:	f107 0308 	add.w	r3, r7, #8
 8000294:	4618      	mov	r0, r3
 8000296:	f003 fa19 	bl	80036cc <wizchip_setnetinfo>
  wizchip_getnetinfo(&netInfo);
 800029a:	f107 0308 	add.w	r3, r7, #8
 800029e:	4618      	mov	r0, r3
 80002a0:	f003 fa54 	bl	800374c <wizchip_getnetinfo>
  PRINT_NETINFO(netInfo);
 80002a4:	2364      	movs	r3, #100	; 0x64
 80002a6:	2218      	movs	r2, #24
 80002a8:	4991      	ldr	r1, [pc, #580]	; (80004f0 <main+0x31c>)
 80002aa:	488b      	ldr	r0, [pc, #556]	; (80004d8 <main+0x304>)
 80002ac:	f002 f835 	bl	800231a <HAL_UART_Transmit>
 80002b0:	7a3b      	ldrb	r3, [r7, #8]
 80002b2:	461c      	mov	r4, r3
 80002b4:	7a7b      	ldrb	r3, [r7, #9]
 80002b6:	461d      	mov	r5, r3
 80002b8:	7abb      	ldrb	r3, [r7, #10]
 80002ba:	7afa      	ldrb	r2, [r7, #11]
 80002bc:	7b39      	ldrb	r1, [r7, #12]
 80002be:	7b78      	ldrb	r0, [r7, #13]
 80002c0:	9003      	str	r0, [sp, #12]
 80002c2:	9102      	str	r1, [sp, #8]
 80002c4:	9201      	str	r2, [sp, #4]
 80002c6:	9300      	str	r3, [sp, #0]
 80002c8:	462b      	mov	r3, r5
 80002ca:	4622      	mov	r2, r4
 80002cc:	4989      	ldr	r1, [pc, #548]	; (80004f4 <main+0x320>)
 80002ce:	488a      	ldr	r0, [pc, #552]	; (80004f8 <main+0x324>)
 80002d0:	f003 fb70 	bl	80039b4 <siprintf>
 80002d4:	4888      	ldr	r0, [pc, #544]	; (80004f8 <main+0x324>)
 80002d6:	f7ff ff39 	bl	800014c <strlen>
 80002da:	4603      	mov	r3, r0
 80002dc:	b29a      	uxth	r2, r3
 80002de:	2364      	movs	r3, #100	; 0x64
 80002e0:	4985      	ldr	r1, [pc, #532]	; (80004f8 <main+0x324>)
 80002e2:	487d      	ldr	r0, [pc, #500]	; (80004d8 <main+0x304>)
 80002e4:	f002 f819 	bl	800231a <HAL_UART_Transmit>
 80002e8:	7bbb      	ldrb	r3, [r7, #14]
 80002ea:	4619      	mov	r1, r3
 80002ec:	7bfb      	ldrb	r3, [r7, #15]
 80002ee:	4618      	mov	r0, r3
 80002f0:	7c3b      	ldrb	r3, [r7, #16]
 80002f2:	7c7a      	ldrb	r2, [r7, #17]
 80002f4:	9201      	str	r2, [sp, #4]
 80002f6:	9300      	str	r3, [sp, #0]
 80002f8:	4603      	mov	r3, r0
 80002fa:	460a      	mov	r2, r1
 80002fc:	497f      	ldr	r1, [pc, #508]	; (80004fc <main+0x328>)
 80002fe:	487e      	ldr	r0, [pc, #504]	; (80004f8 <main+0x324>)
 8000300:	f003 fb58 	bl	80039b4 <siprintf>
 8000304:	487c      	ldr	r0, [pc, #496]	; (80004f8 <main+0x324>)
 8000306:	f7ff ff21 	bl	800014c <strlen>
 800030a:	4603      	mov	r3, r0
 800030c:	b29a      	uxth	r2, r3
 800030e:	2364      	movs	r3, #100	; 0x64
 8000310:	4979      	ldr	r1, [pc, #484]	; (80004f8 <main+0x324>)
 8000312:	4871      	ldr	r0, [pc, #452]	; (80004d8 <main+0x304>)
 8000314:	f002 f801 	bl	800231a <HAL_UART_Transmit>
 8000318:	7cbb      	ldrb	r3, [r7, #18]
 800031a:	4619      	mov	r1, r3
 800031c:	7cfb      	ldrb	r3, [r7, #19]
 800031e:	4618      	mov	r0, r3
 8000320:	7d3b      	ldrb	r3, [r7, #20]
 8000322:	7d7a      	ldrb	r2, [r7, #21]
 8000324:	9201      	str	r2, [sp, #4]
 8000326:	9300      	str	r3, [sp, #0]
 8000328:	4603      	mov	r3, r0
 800032a:	460a      	mov	r2, r1
 800032c:	4974      	ldr	r1, [pc, #464]	; (8000500 <main+0x32c>)
 800032e:	4872      	ldr	r0, [pc, #456]	; (80004f8 <main+0x324>)
 8000330:	f003 fb40 	bl	80039b4 <siprintf>
 8000334:	4870      	ldr	r0, [pc, #448]	; (80004f8 <main+0x324>)
 8000336:	f7ff ff09 	bl	800014c <strlen>
 800033a:	4603      	mov	r3, r0
 800033c:	b29a      	uxth	r2, r3
 800033e:	2364      	movs	r3, #100	; 0x64
 8000340:	496d      	ldr	r1, [pc, #436]	; (80004f8 <main+0x324>)
 8000342:	4865      	ldr	r0, [pc, #404]	; (80004d8 <main+0x304>)
 8000344:	f001 ffe9 	bl	800231a <HAL_UART_Transmit>
 8000348:	7dbb      	ldrb	r3, [r7, #22]
 800034a:	4619      	mov	r1, r3
 800034c:	7dfb      	ldrb	r3, [r7, #23]
 800034e:	4618      	mov	r0, r3
 8000350:	7e3b      	ldrb	r3, [r7, #24]
 8000352:	7e7a      	ldrb	r2, [r7, #25]
 8000354:	9201      	str	r2, [sp, #4]
 8000356:	9300      	str	r3, [sp, #0]
 8000358:	4603      	mov	r3, r0
 800035a:	460a      	mov	r2, r1
 800035c:	4969      	ldr	r1, [pc, #420]	; (8000504 <main+0x330>)
 800035e:	4866      	ldr	r0, [pc, #408]	; (80004f8 <main+0x324>)
 8000360:	f003 fb28 	bl	80039b4 <siprintf>
 8000364:	4864      	ldr	r0, [pc, #400]	; (80004f8 <main+0x324>)
 8000366:	f7ff fef1 	bl	800014c <strlen>
 800036a:	4603      	mov	r3, r0
 800036c:	b29a      	uxth	r2, r3
 800036e:	2364      	movs	r3, #100	; 0x64
 8000370:	4961      	ldr	r1, [pc, #388]	; (80004f8 <main+0x324>)
 8000372:	4859      	ldr	r0, [pc, #356]	; (80004d8 <main+0x304>)
 8000374:	f001 ffd1 	bl	800231a <HAL_UART_Transmit>


  reconnect:
  /* Open socket 0 as TCP_SOCKET with port TCP_PORT = 5001 */
     if((retVal = socket(0, Sn_MR_TCP, TCP_PORT, SF_TCP_NODELAY)) == 0) {
 8000378:	2320      	movs	r3, #32
 800037a:	f241 3289 	movw	r2, #5001	; 0x1389
 800037e:	2101      	movs	r1, #1
 8000380:	2000      	movs	r0, #0
 8000382:	f002 fbd3 	bl	8002b2c <socket>
 8000386:	4603      	mov	r3, r0
 8000388:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800038c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000390:	2b00      	cmp	r3, #0
 8000392:	f040 80c5 	bne.w	8000520 <main+0x34c>
   	  /* Put socket in LISTEN mode. This means we are creating a TCP server */
   	  if((retVal = listen(0)) == SOCK_OK) {
 8000396:	2000      	movs	r0, #0
 8000398:	f002 fd4c 	bl	8002e34 <listen>
 800039c:	4603      	mov	r3, r0
 800039e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80003a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80003a6:	2b01      	cmp	r3, #1
 80003a8:	f040 808a 	bne.w	80004c0 <main+0x2ec>
   		  /* While socket is in LISTEN mode we wait for a remote connection */
   		  while((sockStatus = getSn_SR(0)) == SOCK_LISTEN)
 80003ac:	e003      	b.n	80003b6 <main+0x1e2>
   			  HAL_Delay(800);
 80003ae:	f44f 7048 	mov.w	r0, #800	; 0x320
 80003b2:	f000 fbb7 	bl	8000b24 <HAL_Delay>
   		  while((sockStatus = getSn_SR(0)) == SOCK_LISTEN)
 80003b6:	f44f 7042 	mov.w	r0, #776	; 0x308
 80003ba:	f002 f96b 	bl	8002694 <WIZCHIP_READ>
 80003be:	4603      	mov	r3, r0
 80003c0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80003c4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80003c8:	2b14      	cmp	r3, #20
 80003ca:	d0f0      	beq.n	80003ae <main+0x1da>
   		  /* OK. Got a remote peer. Let's send a message to it */
   		  while(1) {
   			  /* If connection is ESTABLISHED with remote peer */
   			  if((sockStatus = getSn_SR(0)) == SOCK_ESTABLISHED) {
 80003cc:	f44f 7042 	mov.w	r0, #776	; 0x308
 80003d0:	f002 f960 	bl	8002694 <WIZCHIP_READ>
 80003d4:	4603      	mov	r3, r0
 80003d6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80003da:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80003de:	2b17      	cmp	r3, #23
 80003e0:	d15b      	bne.n	800049a <main+0x2c6>
//   				  HAL_Delay(1000);
   				  uint8_t remoteIP[4];
   				  uint16_t remotePort;
   				  /* Retrieving remote peer IP and port number */
   				  getsockopt(0, SO_DESTIP, remoteIP);
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	461a      	mov	r2, r3
 80003e6:	2104      	movs	r1, #4
 80003e8:	2000      	movs	r0, #0
 80003ea:	f002 feed 	bl	80031c8 <getsockopt>
   				  getsockopt(0,SO_DESTPORT, (uint8_t*)&remotePort);
 80003ee:	1cbb      	adds	r3, r7, #2
 80003f0:	461a      	mov	r2, r3
 80003f2:	2105      	movs	r1, #5
 80003f4:	2000      	movs	r0, #0
 80003f6:	f002 fee7 	bl	80031c8 <getsockopt>
   				  sprintf(msg, CONN_ESTABLISHED_MSG, remoteIP[0], remoteIP[1], remoteIP[2], remoteIP[3], remotePort);
 80003fa:	793b      	ldrb	r3, [r7, #4]
 80003fc:	4618      	mov	r0, r3
 80003fe:	797b      	ldrb	r3, [r7, #5]
 8000400:	461c      	mov	r4, r3
 8000402:	79bb      	ldrb	r3, [r7, #6]
 8000404:	79fa      	ldrb	r2, [r7, #7]
 8000406:	8879      	ldrh	r1, [r7, #2]
 8000408:	9102      	str	r1, [sp, #8]
 800040a:	9201      	str	r2, [sp, #4]
 800040c:	9300      	str	r3, [sp, #0]
 800040e:	4623      	mov	r3, r4
 8000410:	4602      	mov	r2, r0
 8000412:	493d      	ldr	r1, [pc, #244]	; (8000508 <main+0x334>)
 8000414:	4838      	ldr	r0, [pc, #224]	; (80004f8 <main+0x324>)
 8000416:	f003 facd 	bl	80039b4 <siprintf>
   				  PRINT_STR(msg);
 800041a:	4837      	ldr	r0, [pc, #220]	; (80004f8 <main+0x324>)
 800041c:	f7ff fe96 	bl	800014c <strlen>
 8000420:	4603      	mov	r3, r0
 8000422:	b29a      	uxth	r2, r3
 8000424:	2364      	movs	r3, #100	; 0x64
 8000426:	4934      	ldr	r1, [pc, #208]	; (80004f8 <main+0x324>)
 8000428:	482b      	ldr	r0, [pc, #172]	; (80004d8 <main+0x304>)
 800042a:	f001 ff76 	bl	800231a <HAL_UART_Transmit>
   				  /* Let's send a welcome message and closing socket */
  				  if((retVal = send(0, GREETING_MSG, strlen(GREETING_MSG))) == (int16_t)strlen(GREETING_MSG))
 800042e:	2230      	movs	r2, #48	; 0x30
 8000430:	4936      	ldr	r1, [pc, #216]	; (800050c <main+0x338>)
 8000432:	2000      	movs	r0, #0
 8000434:	f002 fdce 	bl	8002fd4 <send>
 8000438:	4603      	mov	r3, r0
 800043a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800043e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000442:	2b30      	cmp	r3, #48	; 0x30
 8000444:	d106      	bne.n	8000454 <main+0x280>
//   				  if(retVal = recv(0,&rcvBuf, strlen(rcvBuf)) = (int8_t)strlen(rcvBuf)){

  					  // if (Sn_SR == SOCK_CLOSE_WAIT) //PROBAR CODIGO
  				  PRINT_STR(SENT_MESSAGE_MSG);
 8000446:	2364      	movs	r3, #100	; 0x64
 8000448:	2229      	movs	r2, #41	; 0x29
 800044a:	4931      	ldr	r1, [pc, #196]	; (8000510 <main+0x33c>)
 800044c:	4822      	ldr	r0, [pc, #136]	; (80004d8 <main+0x304>)
 800044e:	f001 ff64 	bl	800231a <HAL_UART_Transmit>
 8000452:	e015      	b.n	8000480 <main+0x2ac>
   				  else { /* Ops: something went wrong during data transfer */
   					  sprintf(msg, WRONG_RETVAL_MSG, retVal);
 8000454:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000458:	461a      	mov	r2, r3
 800045a:	492e      	ldr	r1, [pc, #184]	; (8000514 <main+0x340>)
 800045c:	4826      	ldr	r0, [pc, #152]	; (80004f8 <main+0x324>)
 800045e:	f003 faa9 	bl	80039b4 <siprintf>
   					  PRINT_STR(msg);
 8000462:	4825      	ldr	r0, [pc, #148]	; (80004f8 <main+0x324>)
 8000464:	f7ff fe72 	bl	800014c <strlen>
 8000468:	4603      	mov	r3, r0
 800046a:	b29a      	uxth	r2, r3
 800046c:	2364      	movs	r3, #100	; 0x64
 800046e:	4922      	ldr	r1, [pc, #136]	; (80004f8 <main+0x324>)
 8000470:	4819      	ldr	r0, [pc, #100]	; (80004d8 <main+0x304>)
 8000472:	f001 ff52 	bl	800231a <HAL_UART_Transmit>
   				  }
  				  while((sockStatus = getSn_SR(0)) !=  SOCK_CLOSE_WAIT){
 8000476:	e003      	b.n	8000480 <main+0x2ac>

  					  HAL_Delay(800);
 8000478:	f44f 7048 	mov.w	r0, #800	; 0x320
 800047c:	f000 fb52 	bl	8000b24 <HAL_Delay>
  				  while((sockStatus = getSn_SR(0)) !=  SOCK_CLOSE_WAIT){
 8000480:	f44f 7042 	mov.w	r0, #776	; 0x308
 8000484:	f002 f906 	bl	8002694 <WIZCHIP_READ>
 8000488:	4603      	mov	r3, r0
 800048a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800048e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000492:	2b1c      	cmp	r3, #28
 8000494:	d1f0      	bne.n	8000478 <main+0x2a4>

  				  }

   				  break;
 8000496:	bf00      	nop
 8000498:	e053      	b.n	8000542 <main+0x36e>
   			  }
   			  else { /* Something went wrong with remote peer, maybe the connection was closed unexpectedly */
   				  sprintf(msg, WRONG_STATUS_MSG, sockStatus);
 800049a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800049e:	461a      	mov	r2, r3
 80004a0:	491d      	ldr	r1, [pc, #116]	; (8000518 <main+0x344>)
 80004a2:	4815      	ldr	r0, [pc, #84]	; (80004f8 <main+0x324>)
 80004a4:	f003 fa86 	bl	80039b4 <siprintf>
   				  PRINT_STR(msg);
 80004a8:	4813      	ldr	r0, [pc, #76]	; (80004f8 <main+0x324>)
 80004aa:	f7ff fe4f 	bl	800014c <strlen>
 80004ae:	4603      	mov	r3, r0
 80004b0:	b29a      	uxth	r2, r3
 80004b2:	2364      	movs	r3, #100	; 0x64
 80004b4:	4910      	ldr	r1, [pc, #64]	; (80004f8 <main+0x324>)
 80004b6:	4808      	ldr	r0, [pc, #32]	; (80004d8 <main+0x304>)
 80004b8:	f001 ff2f 	bl	800231a <HAL_UART_Transmit>
   				  break;
 80004bc:	bf00      	nop
 80004be:	e040      	b.n	8000542 <main+0x36e>
   			  }
   		  }

   	  } else /* Ops: socket not in LISTEN mode. Something went wrong */
   		  PRINT_STR(LISTEN_ERR_MSG);
 80004c0:	2364      	movs	r3, #100	; 0x64
 80004c2:	220f      	movs	r2, #15
 80004c4:	4915      	ldr	r1, [pc, #84]	; (800051c <main+0x348>)
 80004c6:	4804      	ldr	r0, [pc, #16]	; (80004d8 <main+0x304>)
 80004c8:	f001 ff27 	bl	800231a <HAL_UART_Transmit>
 80004cc:	e039      	b.n	8000542 <main+0x36e>
 80004ce:	bf00      	nop
 80004d0:	08004268 	.word	0x08004268
 80004d4:	08004070 	.word	0x08004070
 80004d8:	20000124 	.word	0x20000124
 80004dc:	080040a0 	.word	0x080040a0
 80004e0:	08000175 	.word	0x08000175
 80004e4:	0800015d 	.word	0x0800015d
 80004e8:	080001b1 	.word	0x080001b1
 80004ec:	0800018d 	.word	0x0800018d
 80004f0:	080040d0 	.word	0x080040d0
 80004f4:	080040ec 	.word	0x080040ec
 80004f8:	200000e8 	.word	0x200000e8
 80004fc:	08004110 	.word	0x08004110
 8000500:	08004130 	.word	0x08004130
 8000504:	08004150 	.word	0x08004150
 8000508:	08004170 	.word	0x08004170
 800050c:	080041a8 	.word	0x080041a8
 8000510:	080041dc 	.word	0x080041dc
 8000514:	08004208 	.word	0x08004208
 8000518:	08004234 	.word	0x08004234
 800051c:	08004258 	.word	0x08004258
     } else { /* Can't open the socket. This means something is wrong with W5100 configuration: maybe SPI issue? */
   	  sprintf(msg, WRONG_RETVAL_MSG, retVal);
 8000520:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000524:	461a      	mov	r2, r3
 8000526:	490a      	ldr	r1, [pc, #40]	; (8000550 <main+0x37c>)
 8000528:	480a      	ldr	r0, [pc, #40]	; (8000554 <main+0x380>)
 800052a:	f003 fa43 	bl	80039b4 <siprintf>
   	  PRINT_STR(msg);
 800052e:	4809      	ldr	r0, [pc, #36]	; (8000554 <main+0x380>)
 8000530:	f7ff fe0c 	bl	800014c <strlen>
 8000534:	4603      	mov	r3, r0
 8000536:	b29a      	uxth	r2, r3
 8000538:	2364      	movs	r3, #100	; 0x64
 800053a:	4906      	ldr	r1, [pc, #24]	; (8000554 <main+0x380>)
 800053c:	4806      	ldr	r0, [pc, #24]	; (8000558 <main+0x384>)
 800053e:	f001 feec 	bl	800231a <HAL_UART_Transmit>
     }

     /* We close the socket and start a connection again */
     disconnect(0);
 8000542:	2000      	movs	r0, #0
 8000544:	f002 fcd0 	bl	8002ee8 <disconnect>
     close(0);
 8000548:	2000      	movs	r0, #0
 800054a:	f002 fc05 	bl	8002d58 <close>
     goto reconnect;
 800054e:	e713      	b.n	8000378 <main+0x1a4>
 8000550:	08004208 	.word	0x08004208
 8000554:	200000e8 	.word	0x200000e8
 8000558:	20000124 	.word	0x20000124

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b090      	sub	sp, #64	; 0x40
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0318 	add.w	r3, r7, #24
 8000566:	2228      	movs	r2, #40	; 0x28
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f003 f963 	bl	8003836 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800057e:	2301      	movs	r3, #1
 8000580:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000582:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000586:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058c:	2301      	movs	r3, #1
 800058e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000590:	2302      	movs	r3, #2
 8000592:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000594:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000598:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800059a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800059e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a0:	f107 0318 	add.w	r3, r7, #24
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 fd35 	bl	8001014 <HAL_RCC_OscConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005b0:	f000 f8d8 	bl	8000764 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b4:	230f      	movs	r3, #15
 80005b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b8:	2302      	movs	r3, #2
 80005ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80005bc:	2380      	movs	r3, #128	; 0x80
 80005be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	2102      	movs	r1, #2
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 ffa1 	bl	8001514 <HAL_RCC_ClockConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005d8:	f000 f8c4 	bl	8000764 <Error_Handler>
  }
}
 80005dc:	bf00      	nop
 80005de:	3740      	adds	r7, #64	; 0x40
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005e8:	4b17      	ldr	r3, [pc, #92]	; (8000648 <MX_SPI1_Init+0x64>)
 80005ea:	4a18      	ldr	r2, [pc, #96]	; (800064c <MX_SPI1_Init+0x68>)
 80005ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005ee:	4b16      	ldr	r3, [pc, #88]	; (8000648 <MX_SPI1_Init+0x64>)
 80005f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005f6:	4b14      	ldr	r3, [pc, #80]	; (8000648 <MX_SPI1_Init+0x64>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <MX_SPI1_Init+0x64>)
 80005fe:	2200      	movs	r2, #0
 8000600:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000602:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_SPI1_Init+0x64>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <MX_SPI1_Init+0x64>)
 800060a:	2200      	movs	r2, #0
 800060c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_SPI1_Init+0x64>)
 8000610:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000614:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_SPI1_Init+0x64>)
 8000618:	2208      	movs	r2, #8
 800061a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800061c:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <MX_SPI1_Init+0x64>)
 800061e:	2200      	movs	r2, #0
 8000620:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_SPI1_Init+0x64>)
 8000624:	2200      	movs	r2, #0
 8000626:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <MX_SPI1_Init+0x64>)
 800062a:	2200      	movs	r2, #0
 800062c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_SPI1_Init+0x64>)
 8000630:	220a      	movs	r2, #10
 8000632:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000634:	4804      	ldr	r0, [pc, #16]	; (8000648 <MX_SPI1_Init+0x64>)
 8000636:	f001 f909 	bl	800184c <HAL_SPI_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000640:	f000 f890 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000164 	.word	0x20000164
 800064c:	40013000 	.word	0x40013000

08000650 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000654:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_USART1_UART_Init+0x4c>)
 8000656:	4a12      	ldr	r2, [pc, #72]	; (80006a0 <MX_USART1_UART_Init+0x50>)
 8000658:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <MX_USART1_UART_Init+0x4c>)
 800065c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000660:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_USART1_UART_Init+0x4c>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <MX_USART1_UART_Init+0x4c>)
 800066a:	2200      	movs	r2, #0
 800066c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <MX_USART1_UART_Init+0x4c>)
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_USART1_UART_Init+0x4c>)
 8000676:	220c      	movs	r2, #12
 8000678:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <MX_USART1_UART_Init+0x4c>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_USART1_UART_Init+0x4c>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000686:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_USART1_UART_Init+0x4c>)
 8000688:	f001 fdfa 	bl	8002280 <HAL_UART_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000692:	f000 f867 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000124 	.word	0x20000124
 80006a0:	40013800 	.word	0x40013800

080006a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b088      	sub	sp, #32
 80006a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	f107 0310 	add.w	r3, r7, #16
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b8:	4b27      	ldr	r3, [pc, #156]	; (8000758 <MX_GPIO_Init+0xb4>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	4a26      	ldr	r2, [pc, #152]	; (8000758 <MX_GPIO_Init+0xb4>)
 80006be:	f043 0320 	orr.w	r3, r3, #32
 80006c2:	6193      	str	r3, [r2, #24]
 80006c4:	4b24      	ldr	r3, [pc, #144]	; (8000758 <MX_GPIO_Init+0xb4>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	f003 0320 	and.w	r3, r3, #32
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d0:	4b21      	ldr	r3, [pc, #132]	; (8000758 <MX_GPIO_Init+0xb4>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a20      	ldr	r2, [pc, #128]	; (8000758 <MX_GPIO_Init+0xb4>)
 80006d6:	f043 0304 	orr.w	r3, r3, #4
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b1e      	ldr	r3, [pc, #120]	; (8000758 <MX_GPIO_Init+0xb4>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f003 0304 	and.w	r3, r3, #4
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();		//Inicializo clk en puerto GPIOC
 80006e8:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <MX_GPIO_Init+0xb4>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	4a1a      	ldr	r2, [pc, #104]	; (8000758 <MX_GPIO_Init+0xb4>)
 80006ee:	f043 0310 	orr.w	r3, r3, #16
 80006f2:	6193      	str	r3, [r2, #24]
 80006f4:	4b18      	ldr	r3, [pc, #96]	; (8000758 <MX_GPIO_Init+0xb4>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	f003 0310 	and.w	r3, r3, #16
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000700:	2200      	movs	r2, #0
 8000702:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000706:	4815      	ldr	r0, [pc, #84]	; (800075c <MX_GPIO_Init+0xb8>)
 8000708:	f000 fc6c 	bl	8000fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800070c:	2200      	movs	r2, #0
 800070e:	2110      	movs	r1, #16
 8000710:	4813      	ldr	r0, [pc, #76]	; (8000760 <MX_GPIO_Init+0xbc>)
 8000712:	f000 fc67 	bl	8000fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000716:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800071a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071c:	2301      	movs	r3, #1
 800071e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000724:	2302      	movs	r3, #2
 8000726:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000728:	f107 0310 	add.w	r3, r7, #16
 800072c:	4619      	mov	r1, r3
 800072e:	480b      	ldr	r0, [pc, #44]	; (800075c <MX_GPIO_Init+0xb8>)
 8000730:	f000 fafe 	bl	8000d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000734:	2310      	movs	r3, #16
 8000736:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000738:	2301      	movs	r3, #1
 800073a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;	//GPIO_NOPULL
 800073c:	2301      	movs	r3, #1
 800073e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000740:	2302      	movs	r3, #2
 8000742:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000744:	f107 0310 	add.w	r3, r7, #16
 8000748:	4619      	mov	r1, r3
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_GPIO_Init+0xbc>)
 800074c:	f000 faf0 	bl	8000d30 <HAL_GPIO_Init>

}
 8000750:	bf00      	nop
 8000752:	3720      	adds	r7, #32
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40021000 	.word	0x40021000
 800075c:	40011000 	.word	0x40011000
 8000760:	40010800 	.word	0x40010800

08000764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr

08000770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <HAL_MspInit+0x5c>)
 8000778:	699b      	ldr	r3, [r3, #24]
 800077a:	4a14      	ldr	r2, [pc, #80]	; (80007cc <HAL_MspInit+0x5c>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6193      	str	r3, [r2, #24]
 8000782:	4b12      	ldr	r3, [pc, #72]	; (80007cc <HAL_MspInit+0x5c>)
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <HAL_MspInit+0x5c>)
 8000790:	69db      	ldr	r3, [r3, #28]
 8000792:	4a0e      	ldr	r2, [pc, #56]	; (80007cc <HAL_MspInit+0x5c>)
 8000794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000798:	61d3      	str	r3, [r2, #28]
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <HAL_MspInit+0x5c>)
 800079c:	69db      	ldr	r3, [r3, #28]
 800079e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007a6:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <HAL_MspInit+0x60>)
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <HAL_MspInit+0x60>)
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c2:	bf00      	nop
 80007c4:	3714      	adds	r7, #20
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr
 80007cc:	40021000 	.word	0x40021000
 80007d0:	40010000 	.word	0x40010000

080007d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b088      	sub	sp, #32
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007dc:	f107 0310 	add.w	r3, r7, #16
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a1b      	ldr	r2, [pc, #108]	; (800085c <HAL_SPI_MspInit+0x88>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d12f      	bne.n	8000854 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007f4:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <HAL_SPI_MspInit+0x8c>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	4a19      	ldr	r2, [pc, #100]	; (8000860 <HAL_SPI_MspInit+0x8c>)
 80007fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007fe:	6193      	str	r3, [r2, #24]
 8000800:	4b17      	ldr	r3, [pc, #92]	; (8000860 <HAL_SPI_MspInit+0x8c>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <HAL_SPI_MspInit+0x8c>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	4a13      	ldr	r2, [pc, #76]	; (8000860 <HAL_SPI_MspInit+0x8c>)
 8000812:	f043 0304 	orr.w	r3, r3, #4
 8000816:	6193      	str	r3, [r2, #24]
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <HAL_SPI_MspInit+0x8c>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	f003 0304 	and.w	r3, r3, #4
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000824:	23a0      	movs	r3, #160	; 0xa0
 8000826:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000828:	2302      	movs	r3, #2
 800082a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800082c:	2303      	movs	r3, #3
 800082e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000830:	f107 0310 	add.w	r3, r7, #16
 8000834:	4619      	mov	r1, r3
 8000836:	480b      	ldr	r0, [pc, #44]	; (8000864 <HAL_SPI_MspInit+0x90>)
 8000838:	f000 fa7a 	bl	8000d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800083c:	2340      	movs	r3, #64	; 0x40
 800083e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000848:	f107 0310 	add.w	r3, r7, #16
 800084c:	4619      	mov	r1, r3
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <HAL_SPI_MspInit+0x90>)
 8000850:	f000 fa6e 	bl	8000d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000854:	bf00      	nop
 8000856:	3720      	adds	r7, #32
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40013000 	.word	0x40013000
 8000860:	40021000 	.word	0x40021000
 8000864:	40010800 	.word	0x40010800

08000868 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b088      	sub	sp, #32
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	f107 0310 	add.w	r3, r7, #16
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a1c      	ldr	r2, [pc, #112]	; (80008f4 <HAL_UART_MspInit+0x8c>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d131      	bne.n	80008ec <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000888:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <HAL_UART_MspInit+0x90>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	4a1a      	ldr	r2, [pc, #104]	; (80008f8 <HAL_UART_MspInit+0x90>)
 800088e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000892:	6193      	str	r3, [r2, #24]
 8000894:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <HAL_UART_MspInit+0x90>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a0:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <HAL_UART_MspInit+0x90>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	4a14      	ldr	r2, [pc, #80]	; (80008f8 <HAL_UART_MspInit+0x90>)
 80008a6:	f043 0304 	orr.w	r3, r3, #4
 80008aa:	6193      	str	r3, [r2, #24]
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <HAL_UART_MspInit+0x90>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	f003 0304 	and.w	r3, r3, #4
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008be:	2302      	movs	r3, #2
 80008c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c2:	2303      	movs	r3, #3
 80008c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c6:	f107 0310 	add.w	r3, r7, #16
 80008ca:	4619      	mov	r1, r3
 80008cc:	480b      	ldr	r0, [pc, #44]	; (80008fc <HAL_UART_MspInit+0x94>)
 80008ce:	f000 fa2f 	bl	8000d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e0:	f107 0310 	add.w	r3, r7, #16
 80008e4:	4619      	mov	r1, r3
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <HAL_UART_MspInit+0x94>)
 80008e8:	f000 fa22 	bl	8000d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008ec:	bf00      	nop
 80008ee:	3720      	adds	r7, #32
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40013800 	.word	0x40013800
 80008f8:	40021000 	.word	0x40021000
 80008fc:	40010800 	.word	0x40010800

08000900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr

0800090c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <HardFault_Handler+0x4>

08000912 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <MemManage_Handler+0x4>

08000918 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091c:	e7fe      	b.n	800091c <BusFault_Handler+0x4>

0800091e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000922:	e7fe      	b.n	8000922 <UsageFault_Handler+0x4>

08000924 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr

08000930 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr

0800093c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr

08000948 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800094c:	f000 f8ce 	bl	8000aec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}

08000954 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800095c:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <_sbrk+0x50>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d102      	bne.n	800096a <_sbrk+0x16>
		heap_end = &end;
 8000964:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <_sbrk+0x50>)
 8000966:	4a10      	ldr	r2, [pc, #64]	; (80009a8 <_sbrk+0x54>)
 8000968:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <_sbrk+0x50>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <_sbrk+0x50>)
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4413      	add	r3, r2
 8000978:	466a      	mov	r2, sp
 800097a:	4293      	cmp	r3, r2
 800097c:	d907      	bls.n	800098e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800097e:	f002 ff25 	bl	80037cc <__errno>
 8000982:	4602      	mov	r2, r0
 8000984:	230c      	movs	r3, #12
 8000986:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000988:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800098c:	e006      	b.n	800099c <_sbrk+0x48>
	}

	heap_end += incr;
 800098e:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <_sbrk+0x50>)
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4413      	add	r3, r2
 8000996:	4a03      	ldr	r2, [pc, #12]	; (80009a4 <_sbrk+0x50>)
 8000998:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800099a:	68fb      	ldr	r3, [r7, #12]
}
 800099c:	4618      	mov	r0, r3
 800099e:	3710      	adds	r7, #16
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	200000b8 	.word	0x200000b8
 80009a8:	200001c8 	.word	0x200001c8

080009ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80009b0:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <SystemInit+0x5c>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a14      	ldr	r2, [pc, #80]	; (8000a08 <SystemInit+0x5c>)
 80009b6:	f043 0301 	orr.w	r3, r3, #1
 80009ba:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <SystemInit+0x5c>)
 80009be:	685a      	ldr	r2, [r3, #4]
 80009c0:	4911      	ldr	r1, [pc, #68]	; (8000a08 <SystemInit+0x5c>)
 80009c2:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <SystemInit+0x60>)
 80009c4:	4013      	ands	r3, r2
 80009c6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80009c8:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <SystemInit+0x5c>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a0e      	ldr	r2, [pc, #56]	; (8000a08 <SystemInit+0x5c>)
 80009ce:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80009d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009d6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009d8:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <SystemInit+0x5c>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <SystemInit+0x5c>)
 80009de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009e2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <SystemInit+0x5c>)
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	4a07      	ldr	r2, [pc, #28]	; (8000a08 <SystemInit+0x5c>)
 80009ea:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80009ee:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <SystemInit+0x5c>)
 80009f2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80009f6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80009f8:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <SystemInit+0x64>)
 80009fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009fe:	609a      	str	r2, [r3, #8]
#endif 
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	f8ff0000 	.word	0xf8ff0000
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000a14:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000a16:	e003      	b.n	8000a20 <LoopCopyDataInit>

08000a18 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a18:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000a1a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000a1c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000a1e:	3104      	adds	r1, #4

08000a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000a20:	480a      	ldr	r0, [pc, #40]	; (8000a4c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000a22:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000a24:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000a26:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000a28:	d3f6      	bcc.n	8000a18 <CopyDataInit>
  ldr r2, =_sbss
 8000a2a:	4a0a      	ldr	r2, [pc, #40]	; (8000a54 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000a2c:	e002      	b.n	8000a34 <LoopFillZerobss>

08000a2e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000a30:	f842 3b04 	str.w	r3, [r2], #4

08000a34 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000a34:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000a36:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a38:	d3f9      	bcc.n	8000a2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a3a:	f7ff ffb7 	bl	80009ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a3e:	f002 fecb 	bl	80037d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a42:	f7ff fbc7 	bl	80001d4 <main>
  bx lr
 8000a46:	4770      	bx	lr
  ldr r3, =_sidata
 8000a48:	08004338 	.word	0x08004338
  ldr r0, =_sdata
 8000a4c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a50:	2000009c 	.word	0x2000009c
  ldr r2, =_sbss
 8000a54:	2000009c 	.word	0x2000009c
  ldr r3, = _ebss
 8000a58:	200001c4 	.word	0x200001c4

08000a5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a5c:	e7fe      	b.n	8000a5c <ADC1_2_IRQHandler>
	...

08000a60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a64:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <HAL_Init+0x28>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a07      	ldr	r2, [pc, #28]	; (8000a88 <HAL_Init+0x28>)
 8000a6a:	f043 0310 	orr.w	r3, r3, #16
 8000a6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a70:	2003      	movs	r0, #3
 8000a72:	f000 f929 	bl	8000cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a76:	2000      	movs	r0, #0
 8000a78:	f000 f808 	bl	8000a8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a7c:	f7ff fe78 	bl	8000770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40022000 	.word	0x40022000

08000a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a94:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <HAL_InitTick+0x54>)
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <HAL_InitTick+0x58>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f000 f933 	bl	8000d16 <HAL_SYSTICK_Config>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e00e      	b.n	8000ad8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2b0f      	cmp	r3, #15
 8000abe:	d80a      	bhi.n	8000ad6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	6879      	ldr	r1, [r7, #4]
 8000ac4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac8:	f000 f909 	bl	8000cde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000acc:	4a06      	ldr	r2, [pc, #24]	; (8000ae8 <HAL_InitTick+0x5c>)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	e000      	b.n	8000ad8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000000 	.word	0x20000000
 8000ae4:	20000008 	.word	0x20000008
 8000ae8:	20000004 	.word	0x20000004

08000aec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <HAL_IncTick+0x1c>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	461a      	mov	r2, r3
 8000af6:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <HAL_IncTick+0x20>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4413      	add	r3, r2
 8000afc:	4a03      	ldr	r2, [pc, #12]	; (8000b0c <HAL_IncTick+0x20>)
 8000afe:	6013      	str	r3, [r2, #0]
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr
 8000b08:	20000008 	.word	0x20000008
 8000b0c:	200001bc 	.word	0x200001bc

08000b10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return uwTick;
 8000b14:	4b02      	ldr	r3, [pc, #8]	; (8000b20 <HAL_GetTick+0x10>)
 8000b16:	681b      	ldr	r3, [r3, #0]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr
 8000b20:	200001bc 	.word	0x200001bc

08000b24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b2c:	f7ff fff0 	bl	8000b10 <HAL_GetTick>
 8000b30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b3c:	d005      	beq.n	8000b4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <HAL_Delay+0x40>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	461a      	mov	r2, r3
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	4413      	add	r3, r2
 8000b48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b4a:	bf00      	nop
 8000b4c:	f7ff ffe0 	bl	8000b10 <HAL_GetTick>
 8000b50:	4602      	mov	r2, r0
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d8f7      	bhi.n	8000b4c <HAL_Delay+0x28>
  {
  }
}
 8000b5c:	bf00      	nop
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000008 	.word	0x20000008

08000b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b84:	4013      	ands	r3, r2
 8000b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9a:	4a04      	ldr	r2, [pc, #16]	; (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	60d3      	str	r3, [r2, #12]
}
 8000ba0:	bf00      	nop
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bc80      	pop	{r7}
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb4:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	0a1b      	lsrs	r3, r3, #8
 8000bba:	f003 0307 	and.w	r3, r3, #7
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bc80      	pop	{r7}
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	6039      	str	r1, [r7, #0]
 8000bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	db0a      	blt.n	8000bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	490c      	ldr	r1, [pc, #48]	; (8000c18 <__NVIC_SetPriority+0x4c>)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	0112      	lsls	r2, r2, #4
 8000bec:	b2d2      	uxtb	r2, r2
 8000bee:	440b      	add	r3, r1
 8000bf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf4:	e00a      	b.n	8000c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4908      	ldr	r1, [pc, #32]	; (8000c1c <__NVIC_SetPriority+0x50>)
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	f003 030f 	and.w	r3, r3, #15
 8000c02:	3b04      	subs	r3, #4
 8000c04:	0112      	lsls	r2, r2, #4
 8000c06:	b2d2      	uxtb	r2, r2
 8000c08:	440b      	add	r3, r1
 8000c0a:	761a      	strb	r2, [r3, #24]
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000e100 	.word	0xe000e100
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b089      	sub	sp, #36	; 0x24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	f1c3 0307 	rsb	r3, r3, #7
 8000c3a:	2b04      	cmp	r3, #4
 8000c3c:	bf28      	it	cs
 8000c3e:	2304      	movcs	r3, #4
 8000c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3304      	adds	r3, #4
 8000c46:	2b06      	cmp	r3, #6
 8000c48:	d902      	bls.n	8000c50 <NVIC_EncodePriority+0x30>
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3b03      	subs	r3, #3
 8000c4e:	e000      	b.n	8000c52 <NVIC_EncodePriority+0x32>
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	43da      	mvns	r2, r3
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	401a      	ands	r2, r3
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c72:	43d9      	mvns	r1, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c78:	4313      	orrs	r3, r2
         );
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3724      	adds	r7, #36	; 0x24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr

08000c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c94:	d301      	bcc.n	8000c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c96:	2301      	movs	r3, #1
 8000c98:	e00f      	b.n	8000cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <SysTick_Config+0x40>)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ca2:	210f      	movs	r1, #15
 8000ca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ca8:	f7ff ff90 	bl	8000bcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cac:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <SysTick_Config+0x40>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cb2:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <SysTick_Config+0x40>)
 8000cb4:	2207      	movs	r2, #7
 8000cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	e000e010 	.word	0xe000e010

08000cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff ff49 	bl	8000b68 <__NVIC_SetPriorityGrouping>
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b086      	sub	sp, #24
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	60b9      	str	r1, [r7, #8]
 8000ce8:	607a      	str	r2, [r7, #4]
 8000cea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf0:	f7ff ff5e 	bl	8000bb0 <__NVIC_GetPriorityGrouping>
 8000cf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	68b9      	ldr	r1, [r7, #8]
 8000cfa:	6978      	ldr	r0, [r7, #20]
 8000cfc:	f7ff ff90 	bl	8000c20 <NVIC_EncodePriority>
 8000d00:	4602      	mov	r2, r0
 8000d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d06:	4611      	mov	r1, r2
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff ff5f 	bl	8000bcc <__NVIC_SetPriority>
}
 8000d0e:	bf00      	nop
 8000d10:	3718      	adds	r7, #24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f7ff ffb0 	bl	8000c84 <SysTick_Config>
 8000d24:	4603      	mov	r3, r0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b08b      	sub	sp, #44	; 0x2c
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d42:	e127      	b.n	8000f94 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d44:	2201      	movs	r2, #1
 8000d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	69fa      	ldr	r2, [r7, #28]
 8000d54:	4013      	ands	r3, r2
 8000d56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	f040 8116 	bne.w	8000f8e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	2b12      	cmp	r3, #18
 8000d68:	d034      	beq.n	8000dd4 <HAL_GPIO_Init+0xa4>
 8000d6a:	2b12      	cmp	r3, #18
 8000d6c:	d80d      	bhi.n	8000d8a <HAL_GPIO_Init+0x5a>
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d02b      	beq.n	8000dca <HAL_GPIO_Init+0x9a>
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d804      	bhi.n	8000d80 <HAL_GPIO_Init+0x50>
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d031      	beq.n	8000dde <HAL_GPIO_Init+0xae>
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d01c      	beq.n	8000db8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d7e:	e048      	b.n	8000e12 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d80:	2b03      	cmp	r3, #3
 8000d82:	d043      	beq.n	8000e0c <HAL_GPIO_Init+0xdc>
 8000d84:	2b11      	cmp	r3, #17
 8000d86:	d01b      	beq.n	8000dc0 <HAL_GPIO_Init+0x90>
          break;
 8000d88:	e043      	b.n	8000e12 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d8a:	4a89      	ldr	r2, [pc, #548]	; (8000fb0 <HAL_GPIO_Init+0x280>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d026      	beq.n	8000dde <HAL_GPIO_Init+0xae>
 8000d90:	4a87      	ldr	r2, [pc, #540]	; (8000fb0 <HAL_GPIO_Init+0x280>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d806      	bhi.n	8000da4 <HAL_GPIO_Init+0x74>
 8000d96:	4a87      	ldr	r2, [pc, #540]	; (8000fb4 <HAL_GPIO_Init+0x284>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d020      	beq.n	8000dde <HAL_GPIO_Init+0xae>
 8000d9c:	4a86      	ldr	r2, [pc, #536]	; (8000fb8 <HAL_GPIO_Init+0x288>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d01d      	beq.n	8000dde <HAL_GPIO_Init+0xae>
          break;
 8000da2:	e036      	b.n	8000e12 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000da4:	4a85      	ldr	r2, [pc, #532]	; (8000fbc <HAL_GPIO_Init+0x28c>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d019      	beq.n	8000dde <HAL_GPIO_Init+0xae>
 8000daa:	4a85      	ldr	r2, [pc, #532]	; (8000fc0 <HAL_GPIO_Init+0x290>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d016      	beq.n	8000dde <HAL_GPIO_Init+0xae>
 8000db0:	4a84      	ldr	r2, [pc, #528]	; (8000fc4 <HAL_GPIO_Init+0x294>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d013      	beq.n	8000dde <HAL_GPIO_Init+0xae>
          break;
 8000db6:	e02c      	b.n	8000e12 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	623b      	str	r3, [r7, #32]
          break;
 8000dbe:	e028      	b.n	8000e12 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	623b      	str	r3, [r7, #32]
          break;
 8000dc8:	e023      	b.n	8000e12 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	3308      	adds	r3, #8
 8000dd0:	623b      	str	r3, [r7, #32]
          break;
 8000dd2:	e01e      	b.n	8000e12 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	330c      	adds	r3, #12
 8000dda:	623b      	str	r3, [r7, #32]
          break;
 8000ddc:	e019      	b.n	8000e12 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d102      	bne.n	8000dec <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000de6:	2304      	movs	r3, #4
 8000de8:	623b      	str	r3, [r7, #32]
          break;
 8000dea:	e012      	b.n	8000e12 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d105      	bne.n	8000e00 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000df4:	2308      	movs	r3, #8
 8000df6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	69fa      	ldr	r2, [r7, #28]
 8000dfc:	611a      	str	r2, [r3, #16]
          break;
 8000dfe:	e008      	b.n	8000e12 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e00:	2308      	movs	r3, #8
 8000e02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	69fa      	ldr	r2, [r7, #28]
 8000e08:	615a      	str	r2, [r3, #20]
          break;
 8000e0a:	e002      	b.n	8000e12 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	623b      	str	r3, [r7, #32]
          break;
 8000e10:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	2bff      	cmp	r3, #255	; 0xff
 8000e16:	d801      	bhi.n	8000e1c <HAL_GPIO_Init+0xec>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	e001      	b.n	8000e20 <HAL_GPIO_Init+0xf0>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3304      	adds	r3, #4
 8000e20:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	2bff      	cmp	r3, #255	; 0xff
 8000e26:	d802      	bhi.n	8000e2e <HAL_GPIO_Init+0xfe>
 8000e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	e002      	b.n	8000e34 <HAL_GPIO_Init+0x104>
 8000e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e30:	3b08      	subs	r3, #8
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	210f      	movs	r1, #15
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e42:	43db      	mvns	r3, r3
 8000e44:	401a      	ands	r2, r3
 8000e46:	6a39      	ldr	r1, [r7, #32]
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	431a      	orrs	r2, r3
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	f000 8096 	beq.w	8000f8e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e62:	4b59      	ldr	r3, [pc, #356]	; (8000fc8 <HAL_GPIO_Init+0x298>)
 8000e64:	699b      	ldr	r3, [r3, #24]
 8000e66:	4a58      	ldr	r2, [pc, #352]	; (8000fc8 <HAL_GPIO_Init+0x298>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6193      	str	r3, [r2, #24]
 8000e6e:	4b56      	ldr	r3, [pc, #344]	; (8000fc8 <HAL_GPIO_Init+0x298>)
 8000e70:	699b      	ldr	r3, [r3, #24]
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e7a:	4a54      	ldr	r2, [pc, #336]	; (8000fcc <HAL_GPIO_Init+0x29c>)
 8000e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7e:	089b      	lsrs	r3, r3, #2
 8000e80:	3302      	adds	r3, #2
 8000e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e86:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8a:	f003 0303 	and.w	r3, r3, #3
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	220f      	movs	r2, #15
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	68fa      	ldr	r2, [r7, #12]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a4b      	ldr	r2, [pc, #300]	; (8000fd0 <HAL_GPIO_Init+0x2a0>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d013      	beq.n	8000ece <HAL_GPIO_Init+0x19e>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a4a      	ldr	r2, [pc, #296]	; (8000fd4 <HAL_GPIO_Init+0x2a4>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d00d      	beq.n	8000eca <HAL_GPIO_Init+0x19a>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a49      	ldr	r2, [pc, #292]	; (8000fd8 <HAL_GPIO_Init+0x2a8>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d007      	beq.n	8000ec6 <HAL_GPIO_Init+0x196>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a48      	ldr	r2, [pc, #288]	; (8000fdc <HAL_GPIO_Init+0x2ac>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d101      	bne.n	8000ec2 <HAL_GPIO_Init+0x192>
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	e006      	b.n	8000ed0 <HAL_GPIO_Init+0x1a0>
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	e004      	b.n	8000ed0 <HAL_GPIO_Init+0x1a0>
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	e002      	b.n	8000ed0 <HAL_GPIO_Init+0x1a0>
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e000      	b.n	8000ed0 <HAL_GPIO_Init+0x1a0>
 8000ece:	2300      	movs	r3, #0
 8000ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ed2:	f002 0203 	and.w	r2, r2, #3
 8000ed6:	0092      	lsls	r2, r2, #2
 8000ed8:	4093      	lsls	r3, r2
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ee0:	493a      	ldr	r1, [pc, #232]	; (8000fcc <HAL_GPIO_Init+0x29c>)
 8000ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee4:	089b      	lsrs	r3, r3, #2
 8000ee6:	3302      	adds	r3, #2
 8000ee8:	68fa      	ldr	r2, [r7, #12]
 8000eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d006      	beq.n	8000f08 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000efa:	4b39      	ldr	r3, [pc, #228]	; (8000fe0 <HAL_GPIO_Init+0x2b0>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	4938      	ldr	r1, [pc, #224]	; (8000fe0 <HAL_GPIO_Init+0x2b0>)
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	600b      	str	r3, [r1, #0]
 8000f06:	e006      	b.n	8000f16 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f08:	4b35      	ldr	r3, [pc, #212]	; (8000fe0 <HAL_GPIO_Init+0x2b0>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	4933      	ldr	r1, [pc, #204]	; (8000fe0 <HAL_GPIO_Init+0x2b0>)
 8000f12:	4013      	ands	r3, r2
 8000f14:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d006      	beq.n	8000f30 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f22:	4b2f      	ldr	r3, [pc, #188]	; (8000fe0 <HAL_GPIO_Init+0x2b0>)
 8000f24:	685a      	ldr	r2, [r3, #4]
 8000f26:	492e      	ldr	r1, [pc, #184]	; (8000fe0 <HAL_GPIO_Init+0x2b0>)
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	604b      	str	r3, [r1, #4]
 8000f2e:	e006      	b.n	8000f3e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f30:	4b2b      	ldr	r3, [pc, #172]	; (8000fe0 <HAL_GPIO_Init+0x2b0>)
 8000f32:	685a      	ldr	r2, [r3, #4]
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	43db      	mvns	r3, r3
 8000f38:	4929      	ldr	r1, [pc, #164]	; (8000fe0 <HAL_GPIO_Init+0x2b0>)
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d006      	beq.n	8000f58 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f4a:	4b25      	ldr	r3, [pc, #148]	; (8000fe0 <HAL_GPIO_Init+0x2b0>)
 8000f4c:	689a      	ldr	r2, [r3, #8]
 8000f4e:	4924      	ldr	r1, [pc, #144]	; (8000fe0 <HAL_GPIO_Init+0x2b0>)
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	608b      	str	r3, [r1, #8]
 8000f56:	e006      	b.n	8000f66 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f58:	4b21      	ldr	r3, [pc, #132]	; (8000fe0 <HAL_GPIO_Init+0x2b0>)
 8000f5a:	689a      	ldr	r2, [r3, #8]
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	491f      	ldr	r1, [pc, #124]	; (8000fe0 <HAL_GPIO_Init+0x2b0>)
 8000f62:	4013      	ands	r3, r2
 8000f64:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d006      	beq.n	8000f80 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f72:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <HAL_GPIO_Init+0x2b0>)
 8000f74:	68da      	ldr	r2, [r3, #12]
 8000f76:	491a      	ldr	r1, [pc, #104]	; (8000fe0 <HAL_GPIO_Init+0x2b0>)
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	60cb      	str	r3, [r1, #12]
 8000f7e:	e006      	b.n	8000f8e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f80:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <HAL_GPIO_Init+0x2b0>)
 8000f82:	68da      	ldr	r2, [r3, #12]
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	43db      	mvns	r3, r3
 8000f88:	4915      	ldr	r1, [pc, #84]	; (8000fe0 <HAL_GPIO_Init+0x2b0>)
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f90:	3301      	adds	r3, #1
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	f47f aed0 	bne.w	8000d44 <HAL_GPIO_Init+0x14>
  }
}
 8000fa4:	bf00      	nop
 8000fa6:	372c      	adds	r7, #44	; 0x2c
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	10210000 	.word	0x10210000
 8000fb4:	10110000 	.word	0x10110000
 8000fb8:	10120000 	.word	0x10120000
 8000fbc:	10310000 	.word	0x10310000
 8000fc0:	10320000 	.word	0x10320000
 8000fc4:	10220000 	.word	0x10220000
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	40010000 	.word	0x40010000
 8000fd0:	40010800 	.word	0x40010800
 8000fd4:	40010c00 	.word	0x40010c00
 8000fd8:	40011000 	.word	0x40011000
 8000fdc:	40011400 	.word	0x40011400
 8000fe0:	40010400 	.word	0x40010400

08000fe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	807b      	strh	r3, [r7, #2]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ff4:	787b      	ldrb	r3, [r7, #1]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ffa:	887a      	ldrh	r2, [r7, #2]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001000:	e003      	b.n	800100a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001002:	887b      	ldrh	r3, [r7, #2]
 8001004:	041a      	lsls	r2, r3, #16
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	611a      	str	r2, [r3, #16]
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr

08001014 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e26c      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	2b00      	cmp	r3, #0
 8001030:	f000 8087 	beq.w	8001142 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001034:	4b92      	ldr	r3, [pc, #584]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 030c 	and.w	r3, r3, #12
 800103c:	2b04      	cmp	r3, #4
 800103e:	d00c      	beq.n	800105a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001040:	4b8f      	ldr	r3, [pc, #572]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 030c 	and.w	r3, r3, #12
 8001048:	2b08      	cmp	r3, #8
 800104a:	d112      	bne.n	8001072 <HAL_RCC_OscConfig+0x5e>
 800104c:	4b8c      	ldr	r3, [pc, #560]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001058:	d10b      	bne.n	8001072 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800105a:	4b89      	ldr	r3, [pc, #548]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d06c      	beq.n	8001140 <HAL_RCC_OscConfig+0x12c>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d168      	bne.n	8001140 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e246      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800107a:	d106      	bne.n	800108a <HAL_RCC_OscConfig+0x76>
 800107c:	4b80      	ldr	r3, [pc, #512]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a7f      	ldr	r2, [pc, #508]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001082:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	e02e      	b.n	80010e8 <HAL_RCC_OscConfig+0xd4>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d10c      	bne.n	80010ac <HAL_RCC_OscConfig+0x98>
 8001092:	4b7b      	ldr	r3, [pc, #492]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a7a      	ldr	r2, [pc, #488]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001098:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800109c:	6013      	str	r3, [r2, #0]
 800109e:	4b78      	ldr	r3, [pc, #480]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a77      	ldr	r2, [pc, #476]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010a8:	6013      	str	r3, [r2, #0]
 80010aa:	e01d      	b.n	80010e8 <HAL_RCC_OscConfig+0xd4>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010b4:	d10c      	bne.n	80010d0 <HAL_RCC_OscConfig+0xbc>
 80010b6:	4b72      	ldr	r3, [pc, #456]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a71      	ldr	r2, [pc, #452]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c0:	6013      	str	r3, [r2, #0]
 80010c2:	4b6f      	ldr	r3, [pc, #444]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a6e      	ldr	r2, [pc, #440]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	e00b      	b.n	80010e8 <HAL_RCC_OscConfig+0xd4>
 80010d0:	4b6b      	ldr	r3, [pc, #428]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a6a      	ldr	r2, [pc, #424]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010da:	6013      	str	r3, [r2, #0]
 80010dc:	4b68      	ldr	r3, [pc, #416]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a67      	ldr	r2, [pc, #412]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d013      	beq.n	8001118 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f0:	f7ff fd0e 	bl	8000b10 <HAL_GetTick>
 80010f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010f8:	f7ff fd0a 	bl	8000b10 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b64      	cmp	r3, #100	; 0x64
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e1fa      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110a:	4b5d      	ldr	r3, [pc, #372]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d0f0      	beq.n	80010f8 <HAL_RCC_OscConfig+0xe4>
 8001116:	e014      	b.n	8001142 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001118:	f7ff fcfa 	bl	8000b10 <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800111e:	e008      	b.n	8001132 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001120:	f7ff fcf6 	bl	8000b10 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b64      	cmp	r3, #100	; 0x64
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e1e6      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001132:	4b53      	ldr	r3, [pc, #332]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f0      	bne.n	8001120 <HAL_RCC_OscConfig+0x10c>
 800113e:	e000      	b.n	8001142 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d063      	beq.n	8001216 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800114e:	4b4c      	ldr	r3, [pc, #304]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f003 030c 	and.w	r3, r3, #12
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00b      	beq.n	8001172 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800115a:	4b49      	ldr	r3, [pc, #292]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f003 030c 	and.w	r3, r3, #12
 8001162:	2b08      	cmp	r3, #8
 8001164:	d11c      	bne.n	80011a0 <HAL_RCC_OscConfig+0x18c>
 8001166:	4b46      	ldr	r3, [pc, #280]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d116      	bne.n	80011a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001172:	4b43      	ldr	r3, [pc, #268]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d005      	beq.n	800118a <HAL_RCC_OscConfig+0x176>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d001      	beq.n	800118a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e1ba      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800118a:	4b3d      	ldr	r3, [pc, #244]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	4939      	ldr	r1, [pc, #228]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800119a:	4313      	orrs	r3, r2
 800119c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800119e:	e03a      	b.n	8001216 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	691b      	ldr	r3, [r3, #16]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d020      	beq.n	80011ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011a8:	4b36      	ldr	r3, [pc, #216]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ae:	f7ff fcaf 	bl	8000b10 <HAL_GetTick>
 80011b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b4:	e008      	b.n	80011c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011b6:	f7ff fcab 	bl	8000b10 <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d901      	bls.n	80011c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e19b      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c8:	4b2d      	ldr	r3, [pc, #180]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0f0      	beq.n	80011b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d4:	4b2a      	ldr	r3, [pc, #168]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	695b      	ldr	r3, [r3, #20]
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	4927      	ldr	r1, [pc, #156]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80011e4:	4313      	orrs	r3, r2
 80011e6:	600b      	str	r3, [r1, #0]
 80011e8:	e015      	b.n	8001216 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ea:	4b26      	ldr	r3, [pc, #152]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f0:	f7ff fc8e 	bl	8000b10 <HAL_GetTick>
 80011f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011f6:	e008      	b.n	800120a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011f8:	f7ff fc8a 	bl	8000b10 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b02      	cmp	r3, #2
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e17a      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800120a:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1f0      	bne.n	80011f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0308 	and.w	r3, r3, #8
 800121e:	2b00      	cmp	r3, #0
 8001220:	d03a      	beq.n	8001298 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d019      	beq.n	800125e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800122a:	4b17      	ldr	r3, [pc, #92]	; (8001288 <HAL_RCC_OscConfig+0x274>)
 800122c:	2201      	movs	r2, #1
 800122e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001230:	f7ff fc6e 	bl	8000b10 <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001238:	f7ff fc6a 	bl	8000b10 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e15a      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800124a:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800124c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d0f0      	beq.n	8001238 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001256:	2001      	movs	r0, #1
 8001258:	f000 fada 	bl	8001810 <RCC_Delay>
 800125c:	e01c      	b.n	8001298 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800125e:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <HAL_RCC_OscConfig+0x274>)
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001264:	f7ff fc54 	bl	8000b10 <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800126a:	e00f      	b.n	800128c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800126c:	f7ff fc50 	bl	8000b10 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d908      	bls.n	800128c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e140      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
 800127e:	bf00      	nop
 8001280:	40021000 	.word	0x40021000
 8001284:	42420000 	.word	0x42420000
 8001288:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800128c:	4b9e      	ldr	r3, [pc, #632]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 800128e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1e9      	bne.n	800126c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0304 	and.w	r3, r3, #4
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f000 80a6 	beq.w	80013f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012a6:	2300      	movs	r3, #0
 80012a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012aa:	4b97      	ldr	r3, [pc, #604]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10d      	bne.n	80012d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012b6:	4b94      	ldr	r3, [pc, #592]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	4a93      	ldr	r2, [pc, #588]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 80012bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c0:	61d3      	str	r3, [r2, #28]
 80012c2:	4b91      	ldr	r3, [pc, #580]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012ce:	2301      	movs	r3, #1
 80012d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d2:	4b8e      	ldr	r3, [pc, #568]	; (800150c <HAL_RCC_OscConfig+0x4f8>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d118      	bne.n	8001310 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012de:	4b8b      	ldr	r3, [pc, #556]	; (800150c <HAL_RCC_OscConfig+0x4f8>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a8a      	ldr	r2, [pc, #552]	; (800150c <HAL_RCC_OscConfig+0x4f8>)
 80012e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012ea:	f7ff fc11 	bl	8000b10 <HAL_GetTick>
 80012ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f0:	e008      	b.n	8001304 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012f2:	f7ff fc0d 	bl	8000b10 <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b64      	cmp	r3, #100	; 0x64
 80012fe:	d901      	bls.n	8001304 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e0fd      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001304:	4b81      	ldr	r3, [pc, #516]	; (800150c <HAL_RCC_OscConfig+0x4f8>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800130c:	2b00      	cmp	r3, #0
 800130e:	d0f0      	beq.n	80012f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d106      	bne.n	8001326 <HAL_RCC_OscConfig+0x312>
 8001318:	4b7b      	ldr	r3, [pc, #492]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 800131a:	6a1b      	ldr	r3, [r3, #32]
 800131c:	4a7a      	ldr	r2, [pc, #488]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	6213      	str	r3, [r2, #32]
 8001324:	e02d      	b.n	8001382 <HAL_RCC_OscConfig+0x36e>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d10c      	bne.n	8001348 <HAL_RCC_OscConfig+0x334>
 800132e:	4b76      	ldr	r3, [pc, #472]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 8001330:	6a1b      	ldr	r3, [r3, #32]
 8001332:	4a75      	ldr	r2, [pc, #468]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 8001334:	f023 0301 	bic.w	r3, r3, #1
 8001338:	6213      	str	r3, [r2, #32]
 800133a:	4b73      	ldr	r3, [pc, #460]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 800133c:	6a1b      	ldr	r3, [r3, #32]
 800133e:	4a72      	ldr	r2, [pc, #456]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 8001340:	f023 0304 	bic.w	r3, r3, #4
 8001344:	6213      	str	r3, [r2, #32]
 8001346:	e01c      	b.n	8001382 <HAL_RCC_OscConfig+0x36e>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	2b05      	cmp	r3, #5
 800134e:	d10c      	bne.n	800136a <HAL_RCC_OscConfig+0x356>
 8001350:	4b6d      	ldr	r3, [pc, #436]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 8001352:	6a1b      	ldr	r3, [r3, #32]
 8001354:	4a6c      	ldr	r2, [pc, #432]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 8001356:	f043 0304 	orr.w	r3, r3, #4
 800135a:	6213      	str	r3, [r2, #32]
 800135c:	4b6a      	ldr	r3, [pc, #424]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 800135e:	6a1b      	ldr	r3, [r3, #32]
 8001360:	4a69      	ldr	r2, [pc, #420]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	6213      	str	r3, [r2, #32]
 8001368:	e00b      	b.n	8001382 <HAL_RCC_OscConfig+0x36e>
 800136a:	4b67      	ldr	r3, [pc, #412]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	4a66      	ldr	r2, [pc, #408]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 8001370:	f023 0301 	bic.w	r3, r3, #1
 8001374:	6213      	str	r3, [r2, #32]
 8001376:	4b64      	ldr	r3, [pc, #400]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 8001378:	6a1b      	ldr	r3, [r3, #32]
 800137a:	4a63      	ldr	r2, [pc, #396]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 800137c:	f023 0304 	bic.w	r3, r3, #4
 8001380:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d015      	beq.n	80013b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800138a:	f7ff fbc1 	bl	8000b10 <HAL_GetTick>
 800138e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001390:	e00a      	b.n	80013a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001392:	f7ff fbbd 	bl	8000b10 <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e0ab      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a8:	4b57      	ldr	r3, [pc, #348]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d0ee      	beq.n	8001392 <HAL_RCC_OscConfig+0x37e>
 80013b4:	e014      	b.n	80013e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b6:	f7ff fbab 	bl	8000b10 <HAL_GetTick>
 80013ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013bc:	e00a      	b.n	80013d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013be:	f7ff fba7 	bl	8000b10 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e095      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013d4:	4b4c      	ldr	r3, [pc, #304]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 80013d6:	6a1b      	ldr	r3, [r3, #32]
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1ee      	bne.n	80013be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013e0:	7dfb      	ldrb	r3, [r7, #23]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d105      	bne.n	80013f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013e6:	4b48      	ldr	r3, [pc, #288]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	4a47      	ldr	r2, [pc, #284]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 80013ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f000 8081 	beq.w	80014fe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013fc:	4b42      	ldr	r3, [pc, #264]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 030c 	and.w	r3, r3, #12
 8001404:	2b08      	cmp	r3, #8
 8001406:	d061      	beq.n	80014cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	69db      	ldr	r3, [r3, #28]
 800140c:	2b02      	cmp	r3, #2
 800140e:	d146      	bne.n	800149e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001410:	4b3f      	ldr	r3, [pc, #252]	; (8001510 <HAL_RCC_OscConfig+0x4fc>)
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001416:	f7ff fb7b 	bl	8000b10 <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800141e:	f7ff fb77 	bl	8000b10 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e067      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001430:	4b35      	ldr	r3, [pc, #212]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1f0      	bne.n	800141e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001444:	d108      	bne.n	8001458 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001446:	4b30      	ldr	r3, [pc, #192]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	492d      	ldr	r1, [pc, #180]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 8001454:	4313      	orrs	r3, r2
 8001456:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001458:	4b2b      	ldr	r3, [pc, #172]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a19      	ldr	r1, [r3, #32]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001468:	430b      	orrs	r3, r1
 800146a:	4927      	ldr	r1, [pc, #156]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 800146c:	4313      	orrs	r3, r2
 800146e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001470:	4b27      	ldr	r3, [pc, #156]	; (8001510 <HAL_RCC_OscConfig+0x4fc>)
 8001472:	2201      	movs	r2, #1
 8001474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001476:	f7ff fb4b 	bl	8000b10 <HAL_GetTick>
 800147a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800147c:	e008      	b.n	8001490 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800147e:	f7ff fb47 	bl	8000b10 <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e037      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001490:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0f0      	beq.n	800147e <HAL_RCC_OscConfig+0x46a>
 800149c:	e02f      	b.n	80014fe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800149e:	4b1c      	ldr	r3, [pc, #112]	; (8001510 <HAL_RCC_OscConfig+0x4fc>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a4:	f7ff fb34 	bl	8000b10 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ac:	f7ff fb30 	bl	8000b10 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e020      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014be:	4b12      	ldr	r3, [pc, #72]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f0      	bne.n	80014ac <HAL_RCC_OscConfig+0x498>
 80014ca:	e018      	b.n	80014fe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	69db      	ldr	r3, [r3, #28]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d101      	bne.n	80014d8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e013      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014d8:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a1b      	ldr	r3, [r3, #32]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d106      	bne.n	80014fa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d001      	beq.n	80014fe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e000      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40021000 	.word	0x40021000
 800150c:	40007000 	.word	0x40007000
 8001510:	42420060 	.word	0x42420060

08001514 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d101      	bne.n	8001528 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e0d0      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001528:	4b6a      	ldr	r3, [pc, #424]	; (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0307 	and.w	r3, r3, #7
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	429a      	cmp	r2, r3
 8001534:	d910      	bls.n	8001558 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001536:	4b67      	ldr	r3, [pc, #412]	; (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f023 0207 	bic.w	r2, r3, #7
 800153e:	4965      	ldr	r1, [pc, #404]	; (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	4313      	orrs	r3, r2
 8001544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001546:	4b63      	ldr	r3, [pc, #396]	; (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	429a      	cmp	r2, r3
 8001552:	d001      	beq.n	8001558 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e0b8      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d020      	beq.n	80015a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	2b00      	cmp	r3, #0
 800156e:	d005      	beq.n	800157c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001570:	4b59      	ldr	r3, [pc, #356]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	4a58      	ldr	r2, [pc, #352]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001576:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800157a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0308 	and.w	r3, r3, #8
 8001584:	2b00      	cmp	r3, #0
 8001586:	d005      	beq.n	8001594 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001588:	4b53      	ldr	r3, [pc, #332]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	4a52      	ldr	r2, [pc, #328]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 800158e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001592:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001594:	4b50      	ldr	r3, [pc, #320]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	494d      	ldr	r1, [pc, #308]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d040      	beq.n	8001634 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d107      	bne.n	80015ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ba:	4b47      	ldr	r3, [pc, #284]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d115      	bne.n	80015f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e07f      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d107      	bne.n	80015e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015d2:	4b41      	ldr	r3, [pc, #260]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d109      	bne.n	80015f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e073      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e2:	4b3d      	ldr	r3, [pc, #244]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e06b      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015f2:	4b39      	ldr	r3, [pc, #228]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f023 0203 	bic.w	r2, r3, #3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	4936      	ldr	r1, [pc, #216]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001600:	4313      	orrs	r3, r2
 8001602:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001604:	f7ff fa84 	bl	8000b10 <HAL_GetTick>
 8001608:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800160a:	e00a      	b.n	8001622 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800160c:	f7ff fa80 	bl	8000b10 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	f241 3288 	movw	r2, #5000	; 0x1388
 800161a:	4293      	cmp	r3, r2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e053      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001622:	4b2d      	ldr	r3, [pc, #180]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f003 020c 	and.w	r2, r3, #12
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	429a      	cmp	r2, r3
 8001632:	d1eb      	bne.n	800160c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001634:	4b27      	ldr	r3, [pc, #156]	; (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0307 	and.w	r3, r3, #7
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	429a      	cmp	r2, r3
 8001640:	d210      	bcs.n	8001664 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001642:	4b24      	ldr	r3, [pc, #144]	; (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f023 0207 	bic.w	r2, r3, #7
 800164a:	4922      	ldr	r1, [pc, #136]	; (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	4313      	orrs	r3, r2
 8001650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001652:	4b20      	ldr	r3, [pc, #128]	; (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	429a      	cmp	r2, r3
 800165e:	d001      	beq.n	8001664 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e032      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0304 	and.w	r3, r3, #4
 800166c:	2b00      	cmp	r3, #0
 800166e:	d008      	beq.n	8001682 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001670:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	4916      	ldr	r1, [pc, #88]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 800167e:	4313      	orrs	r3, r2
 8001680:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0308 	and.w	r3, r3, #8
 800168a:	2b00      	cmp	r3, #0
 800168c:	d009      	beq.n	80016a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800168e:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	490e      	ldr	r1, [pc, #56]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016a2:	f000 f821 	bl	80016e8 <HAL_RCC_GetSysClockFreq>
 80016a6:	4601      	mov	r1, r0
 80016a8:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	091b      	lsrs	r3, r3, #4
 80016ae:	f003 030f 	and.w	r3, r3, #15
 80016b2:	4a0a      	ldr	r2, [pc, #40]	; (80016dc <HAL_RCC_ClockConfig+0x1c8>)
 80016b4:	5cd3      	ldrb	r3, [r2, r3]
 80016b6:	fa21 f303 	lsr.w	r3, r1, r3
 80016ba:	4a09      	ldr	r2, [pc, #36]	; (80016e0 <HAL_RCC_ClockConfig+0x1cc>)
 80016bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016be:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <HAL_RCC_ClockConfig+0x1d0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff f9e2 	bl	8000a8c <HAL_InitTick>

  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40022000 	.word	0x40022000
 80016d8:	40021000 	.word	0x40021000
 80016dc:	08004284 	.word	0x08004284
 80016e0:	20000000 	.word	0x20000000
 80016e4:	20000004 	.word	0x20000004

080016e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016e8:	b490      	push	{r4, r7}
 80016ea:	b08a      	sub	sp, #40	; 0x28
 80016ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80016ee:	4b2a      	ldr	r3, [pc, #168]	; (8001798 <HAL_RCC_GetSysClockFreq+0xb0>)
 80016f0:	1d3c      	adds	r4, r7, #4
 80016f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80016f8:	4b28      	ldr	r3, [pc, #160]	; (800179c <HAL_RCC_GetSysClockFreq+0xb4>)
 80016fa:	881b      	ldrh	r3, [r3, #0]
 80016fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
 8001702:	2300      	movs	r3, #0
 8001704:	61bb      	str	r3, [r7, #24]
 8001706:	2300      	movs	r3, #0
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800170e:	2300      	movs	r3, #0
 8001710:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001712:	4b23      	ldr	r3, [pc, #140]	; (80017a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	f003 030c 	and.w	r3, r3, #12
 800171e:	2b04      	cmp	r3, #4
 8001720:	d002      	beq.n	8001728 <HAL_RCC_GetSysClockFreq+0x40>
 8001722:	2b08      	cmp	r3, #8
 8001724:	d003      	beq.n	800172e <HAL_RCC_GetSysClockFreq+0x46>
 8001726:	e02d      	b.n	8001784 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001728:	4b1e      	ldr	r3, [pc, #120]	; (80017a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800172a:	623b      	str	r3, [r7, #32]
      break;
 800172c:	e02d      	b.n	800178a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	0c9b      	lsrs	r3, r3, #18
 8001732:	f003 030f 	and.w	r3, r3, #15
 8001736:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800173a:	4413      	add	r3, r2
 800173c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001740:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d013      	beq.n	8001774 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800174c:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	0c5b      	lsrs	r3, r3, #17
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800175a:	4413      	add	r3, r2
 800175c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001760:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	4a0f      	ldr	r2, [pc, #60]	; (80017a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001766:	fb02 f203 	mul.w	r2, r2, r3
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
 8001772:	e004      	b.n	800177e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	4a0c      	ldr	r2, [pc, #48]	; (80017a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001778:	fb02 f303 	mul.w	r3, r2, r3
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001780:	623b      	str	r3, [r7, #32]
      break;
 8001782:	e002      	b.n	800178a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001784:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001786:	623b      	str	r3, [r7, #32]
      break;
 8001788:	bf00      	nop
    }
  }
  return sysclockfreq;
 800178a:	6a3b      	ldr	r3, [r7, #32]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3728      	adds	r7, #40	; 0x28
 8001790:	46bd      	mov	sp, r7
 8001792:	bc90      	pop	{r4, r7}
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	08004270 	.word	0x08004270
 800179c:	08004280 	.word	0x08004280
 80017a0:	40021000 	.word	0x40021000
 80017a4:	007a1200 	.word	0x007a1200
 80017a8:	003d0900 	.word	0x003d0900

080017ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017b0:	4b02      	ldr	r3, [pc, #8]	; (80017bc <HAL_RCC_GetHCLKFreq+0x10>)
 80017b2:	681b      	ldr	r3, [r3, #0]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr
 80017bc:	20000000 	.word	0x20000000

080017c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017c4:	f7ff fff2 	bl	80017ac <HAL_RCC_GetHCLKFreq>
 80017c8:	4601      	mov	r1, r0
 80017ca:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	0a1b      	lsrs	r3, r3, #8
 80017d0:	f003 0307 	and.w	r3, r3, #7
 80017d4:	4a03      	ldr	r2, [pc, #12]	; (80017e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017d6:	5cd3      	ldrb	r3, [r2, r3]
 80017d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80017dc:	4618      	mov	r0, r3
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40021000 	.word	0x40021000
 80017e4:	08004294 	.word	0x08004294

080017e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017ec:	f7ff ffde 	bl	80017ac <HAL_RCC_GetHCLKFreq>
 80017f0:	4601      	mov	r1, r0
 80017f2:	4b05      	ldr	r3, [pc, #20]	; (8001808 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	0adb      	lsrs	r3, r3, #11
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	4a03      	ldr	r2, [pc, #12]	; (800180c <HAL_RCC_GetPCLK2Freq+0x24>)
 80017fe:	5cd3      	ldrb	r3, [r2, r3]
 8001800:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001804:	4618      	mov	r0, r3
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40021000 	.word	0x40021000
 800180c:	08004294 	.word	0x08004294

08001810 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001818:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <RCC_Delay+0x34>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a0a      	ldr	r2, [pc, #40]	; (8001848 <RCC_Delay+0x38>)
 800181e:	fba2 2303 	umull	r2, r3, r2, r3
 8001822:	0a5b      	lsrs	r3, r3, #9
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	fb02 f303 	mul.w	r3, r2, r3
 800182a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800182c:	bf00      	nop
  }
  while (Delay --);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	1e5a      	subs	r2, r3, #1
 8001832:	60fa      	str	r2, [r7, #12]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1f9      	bne.n	800182c <RCC_Delay+0x1c>
}
 8001838:	bf00      	nop
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	20000000 	.word	0x20000000
 8001848:	10624dd3 	.word	0x10624dd3

0800184c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e053      	b.n	8001906 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800186a:	b2db      	uxtb	r3, r3
 800186c:	2b00      	cmp	r3, #0
 800186e:	d106      	bne.n	800187e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7fe ffab 	bl	80007d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2202      	movs	r2, #2
 8001882:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001894:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	431a      	orrs	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	431a      	orrs	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	431a      	orrs	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	431a      	orrs	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018ba:	431a      	orrs	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	69db      	ldr	r3, [r3, #28]
 80018c0:	431a      	orrs	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a1b      	ldr	r3, [r3, #32]
 80018c6:	ea42 0103 	orr.w	r1, r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	430a      	orrs	r2, r1
 80018d4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	0c1a      	lsrs	r2, r3, #16
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f002 0204 	and.w	r2, r2, #4
 80018e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	69da      	ldr	r2, [r3, #28]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b088      	sub	sp, #32
 8001912:	af00      	add	r7, sp, #0
 8001914:	60f8      	str	r0, [r7, #12]
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	603b      	str	r3, [r7, #0]
 800191a:	4613      	mov	r3, r2
 800191c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800191e:	2300      	movs	r3, #0
 8001920:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001928:	2b01      	cmp	r3, #1
 800192a:	d101      	bne.n	8001930 <HAL_SPI_Transmit+0x22>
 800192c:	2302      	movs	r3, #2
 800192e:	e11e      	b.n	8001b6e <HAL_SPI_Transmit+0x260>
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001938:	f7ff f8ea 	bl	8000b10 <HAL_GetTick>
 800193c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800193e:	88fb      	ldrh	r3, [r7, #6]
 8001940:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b01      	cmp	r3, #1
 800194c:	d002      	beq.n	8001954 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800194e:	2302      	movs	r3, #2
 8001950:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001952:	e103      	b.n	8001b5c <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d002      	beq.n	8001960 <HAL_SPI_Transmit+0x52>
 800195a:	88fb      	ldrh	r3, [r7, #6]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d102      	bne.n	8001966 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001964:	e0fa      	b.n	8001b5c <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2203      	movs	r2, #3
 800196a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2200      	movs	r2, #0
 8001972:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	88fa      	ldrh	r2, [r7, #6]
 800197e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	88fa      	ldrh	r2, [r7, #6]
 8001984:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2200      	movs	r2, #0
 800198a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2200      	movs	r2, #0
 8001990:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2200      	movs	r2, #0
 8001996:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2200      	movs	r2, #0
 800199c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2200      	movs	r2, #0
 80019a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019ac:	d107      	bne.n	80019be <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019c8:	2b40      	cmp	r3, #64	; 0x40
 80019ca:	d007      	beq.n	80019dc <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019e4:	d14b      	bne.n	8001a7e <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d002      	beq.n	80019f4 <HAL_SPI_Transmit+0xe6>
 80019ee:	8afb      	ldrh	r3, [r7, #22]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d13e      	bne.n	8001a72 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f8:	881a      	ldrh	r2, [r3, #0]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a04:	1c9a      	adds	r2, r3, #2
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	3b01      	subs	r3, #1
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001a18:	e02b      	b.n	8001a72 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d112      	bne.n	8001a4e <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2c:	881a      	ldrh	r2, [r3, #0]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a38:	1c9a      	adds	r2, r3, #2
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	3b01      	subs	r3, #1
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	86da      	strh	r2, [r3, #54]	; 0x36
 8001a4c:	e011      	b.n	8001a72 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a4e:	f7ff f85f 	bl	8000b10 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d803      	bhi.n	8001a66 <HAL_SPI_Transmit+0x158>
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a64:	d102      	bne.n	8001a6c <HAL_SPI_Transmit+0x15e>
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d102      	bne.n	8001a72 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001a70:	e074      	b.n	8001b5c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1ce      	bne.n	8001a1a <HAL_SPI_Transmit+0x10c>
 8001a7c:	e04c      	b.n	8001b18 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d002      	beq.n	8001a8c <HAL_SPI_Transmit+0x17e>
 8001a86:	8afb      	ldrh	r3, [r7, #22]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d140      	bne.n	8001b0e <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	330c      	adds	r3, #12
 8001a96:	7812      	ldrb	r2, [r2, #0]
 8001a98:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	1c5a      	adds	r2, r3, #1
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001ab2:	e02c      	b.n	8001b0e <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d113      	bne.n	8001aea <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	330c      	adds	r3, #12
 8001acc:	7812      	ldrb	r2, [r2, #0]
 8001ace:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad4:	1c5a      	adds	r2, r3, #1
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	86da      	strh	r2, [r3, #54]	; 0x36
 8001ae8:	e011      	b.n	8001b0e <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001aea:	f7ff f811 	bl	8000b10 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d803      	bhi.n	8001b02 <HAL_SPI_Transmit+0x1f4>
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b00:	d102      	bne.n	8001b08 <HAL_SPI_Transmit+0x1fa>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d102      	bne.n	8001b0e <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001b0c:	e026      	b.n	8001b5c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1cd      	bne.n	8001ab4 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	6839      	ldr	r1, [r7, #0]
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	f000 fb91 	bl	8002244 <SPI_EndRxTxTransaction>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d002      	beq.n	8001b2e <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d10a      	bne.n	8001b4c <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	613b      	str	r3, [r7, #16]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	613b      	str	r3, [r7, #16]
 8001b4a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d002      	beq.n	8001b5a <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	77fb      	strb	r3, [r7, #31]
 8001b58:	e000      	b.n	8001b5c <HAL_SPI_Transmit+0x24e>
  }

error:
 8001b5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001b6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3720      	adds	r7, #32
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b088      	sub	sp, #32
 8001b7a:	af02      	add	r7, sp, #8
 8001b7c:	60f8      	str	r0, [r7, #12]
 8001b7e:	60b9      	str	r1, [r7, #8]
 8001b80:	603b      	str	r3, [r7, #0]
 8001b82:	4613      	mov	r3, r2
 8001b84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001b86:	2300      	movs	r3, #0
 8001b88:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b92:	d112      	bne.n	8001bba <HAL_SPI_Receive+0x44>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d10e      	bne.n	8001bba <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2204      	movs	r2, #4
 8001ba0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001ba4:	88fa      	ldrh	r2, [r7, #6]
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	4613      	mov	r3, r2
 8001bac:	68ba      	ldr	r2, [r7, #8]
 8001bae:	68b9      	ldr	r1, [r7, #8]
 8001bb0:	68f8      	ldr	r0, [r7, #12]
 8001bb2:	f000 f8e9 	bl	8001d88 <HAL_SPI_TransmitReceive>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	e0e2      	b.n	8001d80 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d101      	bne.n	8001bc8 <HAL_SPI_Receive+0x52>
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	e0db      	b.n	8001d80 <HAL_SPI_Receive+0x20a>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001bd0:	f7fe ff9e 	bl	8000b10 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d002      	beq.n	8001be8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001be2:	2302      	movs	r3, #2
 8001be4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001be6:	e0c2      	b.n	8001d6e <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d002      	beq.n	8001bf4 <HAL_SPI_Receive+0x7e>
 8001bee:	88fb      	ldrh	r3, [r7, #6]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d102      	bne.n	8001bfa <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001bf8:	e0b9      	b.n	8001d6e <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2204      	movs	r2, #4
 8001bfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2200      	movs	r2, #0
 8001c06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	88fa      	ldrh	r2, [r7, #6]
 8001c12:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	88fa      	ldrh	r2, [r7, #6]
 8001c18:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2200      	movs	r2, #0
 8001c24:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c40:	d107      	bne.n	8001c52 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c50:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c5c:	2b40      	cmp	r3, #64	; 0x40
 8001c5e:	d007      	beq.n	8001c70 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c6e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d162      	bne.n	8001d3e <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001c78:	e02e      	b.n	8001cd8 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d115      	bne.n	8001cb4 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f103 020c 	add.w	r2, r3, #12
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c94:	7812      	ldrb	r2, [r2, #0]
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c9e:	1c5a      	adds	r2, r3, #1
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	3b01      	subs	r3, #1
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001cb2:	e011      	b.n	8001cd8 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001cb4:	f7fe ff2c 	bl	8000b10 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d803      	bhi.n	8001ccc <HAL_SPI_Receive+0x156>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cca:	d102      	bne.n	8001cd2 <HAL_SPI_Receive+0x15c>
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d102      	bne.n	8001cd8 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001cd6:	e04a      	b.n	8001d6e <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1cb      	bne.n	8001c7a <HAL_SPI_Receive+0x104>
 8001ce2:	e031      	b.n	8001d48 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d113      	bne.n	8001d1a <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68da      	ldr	r2, [r3, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cfc:	b292      	uxth	r2, r2
 8001cfe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d04:	1c9a      	adds	r2, r3, #2
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	3b01      	subs	r3, #1
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d18:	e011      	b.n	8001d3e <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d1a:	f7fe fef9 	bl	8000b10 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d803      	bhi.n	8001d32 <HAL_SPI_Receive+0x1bc>
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d30:	d102      	bne.n	8001d38 <HAL_SPI_Receive+0x1c2>
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d102      	bne.n	8001d3e <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001d3c:	e017      	b.n	8001d6e <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1cd      	bne.n	8001ce4 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	6839      	ldr	r1, [r7, #0]
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f000 fa27 	bl	80021a0 <SPI_EndRxTransaction>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d002      	beq.n	8001d5e <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2220      	movs	r2, #32
 8001d5c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d002      	beq.n	8001d6c <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	75fb      	strb	r3, [r7, #23]
 8001d6a:	e000      	b.n	8001d6e <HAL_SPI_Receive+0x1f8>
  }

error :
 8001d6c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08c      	sub	sp, #48	; 0x30
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
 8001d94:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001d96:	2301      	movs	r3, #1
 8001d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d101      	bne.n	8001dae <HAL_SPI_TransmitReceive+0x26>
 8001daa:	2302      	movs	r3, #2
 8001dac:	e18a      	b.n	80020c4 <HAL_SPI_TransmitReceive+0x33c>
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001db6:	f7fe feab 	bl	8000b10 <HAL_GetTick>
 8001dba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001dcc:	887b      	ldrh	r3, [r7, #2]
 8001dce:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001dd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d00f      	beq.n	8001df8 <HAL_SPI_TransmitReceive+0x70>
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001dde:	d107      	bne.n	8001df0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d103      	bne.n	8001df0 <HAL_SPI_TransmitReceive+0x68>
 8001de8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001dec:	2b04      	cmp	r3, #4
 8001dee:	d003      	beq.n	8001df8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001df0:	2302      	movs	r3, #2
 8001df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001df6:	e15b      	b.n	80020b0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d005      	beq.n	8001e0a <HAL_SPI_TransmitReceive+0x82>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d002      	beq.n	8001e0a <HAL_SPI_TransmitReceive+0x82>
 8001e04:	887b      	ldrh	r3, [r7, #2]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d103      	bne.n	8001e12 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001e10:	e14e      	b.n	80020b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	d003      	beq.n	8001e26 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2205      	movs	r2, #5
 8001e22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	887a      	ldrh	r2, [r7, #2]
 8001e36:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	887a      	ldrh	r2, [r7, #2]
 8001e3c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	68ba      	ldr	r2, [r7, #8]
 8001e42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	887a      	ldrh	r2, [r7, #2]
 8001e48:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	887a      	ldrh	r2, [r7, #2]
 8001e4e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e66:	2b40      	cmp	r3, #64	; 0x40
 8001e68:	d007      	beq.n	8001e7a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e78:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e82:	d178      	bne.n	8001f76 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d002      	beq.n	8001e92 <HAL_SPI_TransmitReceive+0x10a>
 8001e8c:	8b7b      	ldrh	r3, [r7, #26]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d166      	bne.n	8001f60 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	881a      	ldrh	r2, [r3, #0]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	1c9a      	adds	r2, r3, #2
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001eb6:	e053      	b.n	8001f60 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d11b      	bne.n	8001efe <HAL_SPI_TransmitReceive+0x176>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d016      	beq.n	8001efe <HAL_SPI_TransmitReceive+0x176>
 8001ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d113      	bne.n	8001efe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	881a      	ldrh	r2, [r3, #0]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	1c9a      	adds	r2, r3, #2
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d119      	bne.n	8001f40 <HAL_SPI_TransmitReceive+0x1b8>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d014      	beq.n	8001f40 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68da      	ldr	r2, [r3, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f20:	b292      	uxth	r2, r2
 8001f22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f28:	1c9a      	adds	r2, r3, #2
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	3b01      	subs	r3, #1
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001f40:	f7fe fde6 	bl	8000b10 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d807      	bhi.n	8001f60 <HAL_SPI_TransmitReceive+0x1d8>
 8001f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f56:	d003      	beq.n	8001f60 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001f5e:	e0a7      	b.n	80020b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1a6      	bne.n	8001eb8 <HAL_SPI_TransmitReceive+0x130>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1a1      	bne.n	8001eb8 <HAL_SPI_TransmitReceive+0x130>
 8001f74:	e07c      	b.n	8002070 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d002      	beq.n	8001f84 <HAL_SPI_TransmitReceive+0x1fc>
 8001f7e:	8b7b      	ldrh	r3, [r7, #26]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d16b      	bne.n	800205c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	330c      	adds	r3, #12
 8001f8e:	7812      	ldrb	r2, [r2, #0]
 8001f90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001faa:	e057      	b.n	800205c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d11c      	bne.n	8001ff4 <HAL_SPI_TransmitReceive+0x26c>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d017      	beq.n	8001ff4 <HAL_SPI_TransmitReceive+0x26c>
 8001fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d114      	bne.n	8001ff4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	330c      	adds	r3, #12
 8001fd4:	7812      	ldrb	r2, [r2, #0]
 8001fd6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fdc:	1c5a      	adds	r2, r3, #1
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d119      	bne.n	8002036 <HAL_SPI_TransmitReceive+0x2ae>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002006:	b29b      	uxth	r3, r3
 8002008:	2b00      	cmp	r3, #0
 800200a:	d014      	beq.n	8002036 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800201e:	1c5a      	adds	r2, r3, #1
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002028:	b29b      	uxth	r3, r3
 800202a:	3b01      	subs	r3, #1
 800202c:	b29a      	uxth	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002032:	2301      	movs	r3, #1
 8002034:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002036:	f7fe fd6b 	bl	8000b10 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002042:	429a      	cmp	r2, r3
 8002044:	d803      	bhi.n	800204e <HAL_SPI_TransmitReceive+0x2c6>
 8002046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002048:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800204c:	d102      	bne.n	8002054 <HAL_SPI_TransmitReceive+0x2cc>
 800204e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002050:	2b00      	cmp	r3, #0
 8002052:	d103      	bne.n	800205c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800205a:	e029      	b.n	80020b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002060:	b29b      	uxth	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1a2      	bne.n	8001fac <HAL_SPI_TransmitReceive+0x224>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800206a:	b29b      	uxth	r3, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	d19d      	bne.n	8001fac <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002072:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f000 f8e5 	bl	8002244 <SPI_EndRxTxTransaction>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d006      	beq.n	800208e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2220      	movs	r2, #32
 800208a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800208c:	e010      	b.n	80020b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10b      	bne.n	80020ae <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	617b      	str	r3, [r7, #20]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	617b      	str	r3, [r7, #20]
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	e000      	b.n	80020b0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80020ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80020c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3730      	adds	r7, #48	; 0x30
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	603b      	str	r3, [r7, #0]
 80020d8:	4613      	mov	r3, r2
 80020da:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020dc:	e04c      	b.n	8002178 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020e4:	d048      	beq.n	8002178 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80020e6:	f7fe fd13 	bl	8000b10 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d902      	bls.n	80020fc <SPI_WaitFlagStateUntilTimeout+0x30>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d13d      	bne.n	8002178 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800210a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002114:	d111      	bne.n	800213a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800211e:	d004      	beq.n	800212a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002128:	d107      	bne.n	800213a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002138:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002142:	d10f      	bne.n	8002164 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002162:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e00f      	b.n	8002198 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689a      	ldr	r2, [r3, #8]
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	4013      	ands	r3, r2
 8002182:	68ba      	ldr	r2, [r7, #8]
 8002184:	429a      	cmp	r2, r3
 8002186:	bf0c      	ite	eq
 8002188:	2301      	moveq	r3, #1
 800218a:	2300      	movne	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	461a      	mov	r2, r3
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	429a      	cmp	r2, r3
 8002194:	d1a3      	bne.n	80020de <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af02      	add	r7, sp, #8
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021b4:	d111      	bne.n	80021da <SPI_EndRxTransaction+0x3a>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021be:	d004      	beq.n	80021ca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021c8:	d107      	bne.n	80021da <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021d8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021e2:	d117      	bne.n	8002214 <SPI_EndRxTransaction+0x74>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ec:	d112      	bne.n	8002214 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	2200      	movs	r2, #0
 80021f6:	2101      	movs	r1, #1
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f7ff ff67 	bl	80020cc <SPI_WaitFlagStateUntilTimeout>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d01a      	beq.n	800223a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002208:	f043 0220 	orr.w	r2, r3, #32
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e013      	b.n	800223c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	2200      	movs	r2, #0
 800221c:	2180      	movs	r1, #128	; 0x80
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f7ff ff54 	bl	80020cc <SPI_WaitFlagStateUntilTimeout>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d007      	beq.n	800223a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222e:	f043 0220 	orr.w	r2, r3, #32
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e000      	b.n	800223c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af02      	add	r7, sp, #8
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	2200      	movs	r2, #0
 8002258:	2180      	movs	r1, #128	; 0x80
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f7ff ff36 	bl	80020cc <SPI_WaitFlagStateUntilTimeout>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d007      	beq.n	8002276 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226a:	f043 0220 	orr.w	r2, r3, #32
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e000      	b.n	8002278 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e03f      	b.n	8002312 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d106      	bne.n	80022ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7fe fade 	bl	8000868 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2224      	movs	r2, #36	; 0x24
 80022b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f90b 	bl	80024e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	691a      	ldr	r2, [r3, #16]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	695a      	ldr	r2, [r3, #20]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2220      	movs	r2, #32
 8002304:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2220      	movs	r2, #32
 800230c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b088      	sub	sp, #32
 800231e:	af02      	add	r7, sp, #8
 8002320:	60f8      	str	r0, [r7, #12]
 8002322:	60b9      	str	r1, [r7, #8]
 8002324:	603b      	str	r3, [r7, #0]
 8002326:	4613      	mov	r3, r2
 8002328:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800232a:	2300      	movs	r3, #0
 800232c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b20      	cmp	r3, #32
 8002338:	f040 8083 	bne.w	8002442 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d002      	beq.n	8002348 <HAL_UART_Transmit+0x2e>
 8002342:	88fb      	ldrh	r3, [r7, #6]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e07b      	b.n	8002444 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002352:	2b01      	cmp	r3, #1
 8002354:	d101      	bne.n	800235a <HAL_UART_Transmit+0x40>
 8002356:	2302      	movs	r3, #2
 8002358:	e074      	b.n	8002444 <HAL_UART_Transmit+0x12a>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2221      	movs	r2, #33	; 0x21
 800236c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002370:	f7fe fbce 	bl	8000b10 <HAL_GetTick>
 8002374:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	88fa      	ldrh	r2, [r7, #6]
 800237a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	88fa      	ldrh	r2, [r7, #6]
 8002380:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002382:	e042      	b.n	800240a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002388:	b29b      	uxth	r3, r3
 800238a:	3b01      	subs	r3, #1
 800238c:	b29a      	uxth	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800239a:	d122      	bne.n	80023e2 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	9300      	str	r3, [sp, #0]
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	2200      	movs	r2, #0
 80023a4:	2180      	movs	r1, #128	; 0x80
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f000 f850 	bl	800244c <UART_WaitOnFlagUntilTimeout>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e046      	b.n	8002444 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	881b      	ldrh	r3, [r3, #0]
 80023be:	461a      	mov	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023c8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d103      	bne.n	80023da <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	3302      	adds	r3, #2
 80023d6:	60bb      	str	r3, [r7, #8]
 80023d8:	e017      	b.n	800240a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	3301      	adds	r3, #1
 80023de:	60bb      	str	r3, [r7, #8]
 80023e0:	e013      	b.n	800240a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	2200      	movs	r2, #0
 80023ea:	2180      	movs	r1, #128	; 0x80
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f000 f82d 	bl	800244c <UART_WaitOnFlagUntilTimeout>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e023      	b.n	8002444 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	1c5a      	adds	r2, r3, #1
 8002400:	60ba      	str	r2, [r7, #8]
 8002402:	781a      	ldrb	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800240e:	b29b      	uxth	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1b7      	bne.n	8002384 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	2200      	movs	r2, #0
 800241c:	2140      	movs	r1, #64	; 0x40
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 f814 	bl	800244c <UART_WaitOnFlagUntilTimeout>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e00a      	b.n	8002444 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2220      	movs	r2, #32
 8002432:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800243e:	2300      	movs	r3, #0
 8002440:	e000      	b.n	8002444 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002442:	2302      	movs	r3, #2
  }
}
 8002444:	4618      	mov	r0, r3
 8002446:	3718      	adds	r7, #24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	603b      	str	r3, [r7, #0]
 8002458:	4613      	mov	r3, r2
 800245a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800245c:	e02c      	b.n	80024b8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002464:	d028      	beq.n	80024b8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d007      	beq.n	800247c <UART_WaitOnFlagUntilTimeout+0x30>
 800246c:	f7fe fb50 	bl	8000b10 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	429a      	cmp	r2, r3
 800247a:	d21d      	bcs.n	80024b8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800248a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	695a      	ldr	r2, [r3, #20]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0201 	bic.w	r2, r2, #1
 800249a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2220      	movs	r2, #32
 80024a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2220      	movs	r2, #32
 80024a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e00f      	b.n	80024d8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	4013      	ands	r3, r2
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	bf0c      	ite	eq
 80024c8:	2301      	moveq	r3, #1
 80024ca:	2300      	movne	r3, #0
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	461a      	mov	r2, r3
 80024d0:	79fb      	ldrb	r3, [r7, #7]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d0c3      	beq.n	800245e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68da      	ldr	r2, [r3, #12]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	430a      	orrs	r2, r1
 80024fc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689a      	ldr	r2, [r3, #8]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	4313      	orrs	r3, r2
 800250e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800251a:	f023 030c 	bic.w	r3, r3, #12
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6812      	ldr	r2, [r2, #0]
 8002522:	68f9      	ldr	r1, [r7, #12]
 8002524:	430b      	orrs	r3, r1
 8002526:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	699a      	ldr	r2, [r3, #24]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a52      	ldr	r2, [pc, #328]	; (800268c <UART_SetConfig+0x1ac>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d14e      	bne.n	80025e6 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002548:	f7ff f94e 	bl	80017e8 <HAL_RCC_GetPCLK2Freq>
 800254c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	009a      	lsls	r2, r3, #2
 8002558:	441a      	add	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	fbb2 f3f3 	udiv	r3, r2, r3
 8002564:	4a4a      	ldr	r2, [pc, #296]	; (8002690 <UART_SetConfig+0x1b0>)
 8002566:	fba2 2303 	umull	r2, r3, r2, r3
 800256a:	095b      	lsrs	r3, r3, #5
 800256c:	0119      	lsls	r1, r3, #4
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	4613      	mov	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	009a      	lsls	r2, r3, #2
 8002578:	441a      	add	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	fbb2 f2f3 	udiv	r2, r2, r3
 8002584:	4b42      	ldr	r3, [pc, #264]	; (8002690 <UART_SetConfig+0x1b0>)
 8002586:	fba3 0302 	umull	r0, r3, r3, r2
 800258a:	095b      	lsrs	r3, r3, #5
 800258c:	2064      	movs	r0, #100	; 0x64
 800258e:	fb00 f303 	mul.w	r3, r0, r3
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	011b      	lsls	r3, r3, #4
 8002596:	3332      	adds	r3, #50	; 0x32
 8002598:	4a3d      	ldr	r2, [pc, #244]	; (8002690 <UART_SetConfig+0x1b0>)
 800259a:	fba2 2303 	umull	r2, r3, r2, r3
 800259e:	095b      	lsrs	r3, r3, #5
 80025a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025a4:	4419      	add	r1, r3
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	4613      	mov	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	009a      	lsls	r2, r3, #2
 80025b0:	441a      	add	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80025bc:	4b34      	ldr	r3, [pc, #208]	; (8002690 <UART_SetConfig+0x1b0>)
 80025be:	fba3 0302 	umull	r0, r3, r3, r2
 80025c2:	095b      	lsrs	r3, r3, #5
 80025c4:	2064      	movs	r0, #100	; 0x64
 80025c6:	fb00 f303 	mul.w	r3, r0, r3
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	011b      	lsls	r3, r3, #4
 80025ce:	3332      	adds	r3, #50	; 0x32
 80025d0:	4a2f      	ldr	r2, [pc, #188]	; (8002690 <UART_SetConfig+0x1b0>)
 80025d2:	fba2 2303 	umull	r2, r3, r2, r3
 80025d6:	095b      	lsrs	r3, r3, #5
 80025d8:	f003 020f 	and.w	r2, r3, #15
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	440a      	add	r2, r1
 80025e2:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80025e4:	e04d      	b.n	8002682 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80025e6:	f7ff f8eb 	bl	80017c0 <HAL_RCC_GetPCLK1Freq>
 80025ea:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025ec:	68ba      	ldr	r2, [r7, #8]
 80025ee:	4613      	mov	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	009a      	lsls	r2, r3, #2
 80025f6:	441a      	add	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002602:	4a23      	ldr	r2, [pc, #140]	; (8002690 <UART_SetConfig+0x1b0>)
 8002604:	fba2 2303 	umull	r2, r3, r2, r3
 8002608:	095b      	lsrs	r3, r3, #5
 800260a:	0119      	lsls	r1, r3, #4
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	4613      	mov	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	009a      	lsls	r2, r3, #2
 8002616:	441a      	add	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002622:	4b1b      	ldr	r3, [pc, #108]	; (8002690 <UART_SetConfig+0x1b0>)
 8002624:	fba3 0302 	umull	r0, r3, r3, r2
 8002628:	095b      	lsrs	r3, r3, #5
 800262a:	2064      	movs	r0, #100	; 0x64
 800262c:	fb00 f303 	mul.w	r3, r0, r3
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	011b      	lsls	r3, r3, #4
 8002634:	3332      	adds	r3, #50	; 0x32
 8002636:	4a16      	ldr	r2, [pc, #88]	; (8002690 <UART_SetConfig+0x1b0>)
 8002638:	fba2 2303 	umull	r2, r3, r2, r3
 800263c:	095b      	lsrs	r3, r3, #5
 800263e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002642:	4419      	add	r1, r3
 8002644:	68ba      	ldr	r2, [r7, #8]
 8002646:	4613      	mov	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4413      	add	r3, r2
 800264c:	009a      	lsls	r2, r3, #2
 800264e:	441a      	add	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	fbb2 f2f3 	udiv	r2, r2, r3
 800265a:	4b0d      	ldr	r3, [pc, #52]	; (8002690 <UART_SetConfig+0x1b0>)
 800265c:	fba3 0302 	umull	r0, r3, r3, r2
 8002660:	095b      	lsrs	r3, r3, #5
 8002662:	2064      	movs	r0, #100	; 0x64
 8002664:	fb00 f303 	mul.w	r3, r0, r3
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	011b      	lsls	r3, r3, #4
 800266c:	3332      	adds	r3, #50	; 0x32
 800266e:	4a08      	ldr	r2, [pc, #32]	; (8002690 <UART_SetConfig+0x1b0>)
 8002670:	fba2 2303 	umull	r2, r3, r2, r3
 8002674:	095b      	lsrs	r3, r3, #5
 8002676:	f003 020f 	and.w	r2, r3, #15
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	440a      	add	r2, r1
 8002680:	609a      	str	r2, [r3, #8]
}
 8002682:	bf00      	nop
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40013800 	.word	0x40013800
 8002690:	51eb851f 	.word	0x51eb851f

08002694 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 800269c:	4b22      	ldr	r3, [pc, #136]	; (8002728 <WIZCHIP_READ+0x94>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	4798      	blx	r3
   WIZCHIP.CS._select();
 80026a2:	4b21      	ldr	r3, [pc, #132]	; (8002728 <WIZCHIP_READ+0x94>)
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80026a8:	4b1f      	ldr	r3, [pc, #124]	; (8002728 <WIZCHIP_READ+0x94>)
 80026aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <WIZCHIP_READ+0x24>
 80026b0:	4b1d      	ldr	r3, [pc, #116]	; (8002728 <WIZCHIP_READ+0x94>)
 80026b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d114      	bne.n	80026e2 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80026b8:	4b1b      	ldr	r3, [pc, #108]	; (8002728 <WIZCHIP_READ+0x94>)
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	0c12      	lsrs	r2, r2, #16
 80026c0:	b2d2      	uxtb	r2, r2
 80026c2:	4610      	mov	r0, r2
 80026c4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80026c6:	4b18      	ldr	r3, [pc, #96]	; (8002728 <WIZCHIP_READ+0x94>)
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	0a12      	lsrs	r2, r2, #8
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	4610      	mov	r0, r2
 80026d2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80026d4:	4b14      	ldr	r3, [pc, #80]	; (8002728 <WIZCHIP_READ+0x94>)
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	4610      	mov	r0, r2
 80026de:	4798      	blx	r3
 80026e0:	e011      	b.n	8002706 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	0c1b      	lsrs	r3, r3, #16
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	0a1b      	lsrs	r3, r3, #8
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80026f8:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <WIZCHIP_READ+0x94>)
 80026fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fc:	f107 020c 	add.w	r2, r7, #12
 8002700:	2103      	movs	r1, #3
 8002702:	4610      	mov	r0, r2
 8002704:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8002706:	4b08      	ldr	r3, [pc, #32]	; (8002728 <WIZCHIP_READ+0x94>)
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	4798      	blx	r3
 800270c:	4603      	mov	r3, r0
 800270e:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8002710:	4b05      	ldr	r3, [pc, #20]	; (8002728 <WIZCHIP_READ+0x94>)
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002716:	4b04      	ldr	r3, [pc, #16]	; (8002728 <WIZCHIP_READ+0x94>)
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	4798      	blx	r3
   return ret;
 800271c:	7bfb      	ldrb	r3, [r7, #15]
}
 800271e:	4618      	mov	r0, r3
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	2000000c 	.word	0x2000000c

0800272c <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	460b      	mov	r3, r1
 8002736:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8002738:	4b22      	ldr	r3, [pc, #136]	; (80027c4 <WIZCHIP_WRITE+0x98>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	4798      	blx	r3
   WIZCHIP.CS._select();
 800273e:	4b21      	ldr	r3, [pc, #132]	; (80027c4 <WIZCHIP_WRITE+0x98>)
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f043 0304 	orr.w	r3, r3, #4
 800274a:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800274c:	4b1d      	ldr	r3, [pc, #116]	; (80027c4 <WIZCHIP_WRITE+0x98>)
 800274e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002750:	2b00      	cmp	r3, #0
 8002752:	d119      	bne.n	8002788 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002754:	4b1b      	ldr	r3, [pc, #108]	; (80027c4 <WIZCHIP_WRITE+0x98>)
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	0c12      	lsrs	r2, r2, #16
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	4610      	mov	r0, r2
 8002760:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002762:	4b18      	ldr	r3, [pc, #96]	; (80027c4 <WIZCHIP_WRITE+0x98>)
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	0a12      	lsrs	r2, r2, #8
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	4610      	mov	r0, r2
 800276e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002770:	4b14      	ldr	r3, [pc, #80]	; (80027c4 <WIZCHIP_WRITE+0x98>)
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	4610      	mov	r0, r2
 800277a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 800277c:	4b11      	ldr	r3, [pc, #68]	; (80027c4 <WIZCHIP_WRITE+0x98>)
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	78fa      	ldrb	r2, [r7, #3]
 8002782:	4610      	mov	r0, r2
 8002784:	4798      	blx	r3
 8002786:	e013      	b.n	80027b0 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	0c1b      	lsrs	r3, r3, #16
 800278c:	b2db      	uxtb	r3, r3
 800278e:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	0a1b      	lsrs	r3, r3, #8
 8002794:	b2db      	uxtb	r3, r3
 8002796:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	b2db      	uxtb	r3, r3
 800279c:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 800279e:	78fb      	ldrb	r3, [r7, #3]
 80027a0:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80027a2:	4b08      	ldr	r3, [pc, #32]	; (80027c4 <WIZCHIP_WRITE+0x98>)
 80027a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a6:	f107 020c 	add.w	r2, r7, #12
 80027aa:	2104      	movs	r1, #4
 80027ac:	4610      	mov	r0, r2
 80027ae:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80027b0:	4b04      	ldr	r3, [pc, #16]	; (80027c4 <WIZCHIP_WRITE+0x98>)
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80027b6:	4b03      	ldr	r3, [pc, #12]	; (80027c4 <WIZCHIP_WRITE+0x98>)
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	4798      	blx	r3
}
 80027bc:	bf00      	nop
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	2000000c 	.word	0x2000000c

080027c8 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80027c8:	b590      	push	{r4, r7, lr}
 80027ca:	b087      	sub	sp, #28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	4613      	mov	r3, r2
 80027d4:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80027d6:	4b2b      	ldr	r3, [pc, #172]	; (8002884 <WIZCHIP_READ_BUF+0xbc>)
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	4798      	blx	r3
   WIZCHIP.CS._select();
 80027dc:	4b29      	ldr	r3, [pc, #164]	; (8002884 <WIZCHIP_READ_BUF+0xbc>)
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80027e2:	4b28      	ldr	r3, [pc, #160]	; (8002884 <WIZCHIP_READ_BUF+0xbc>)
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <WIZCHIP_READ_BUF+0x2a>
 80027ea:	4b26      	ldr	r3, [pc, #152]	; (8002884 <WIZCHIP_READ_BUF+0xbc>)
 80027ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d126      	bne.n	8002840 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80027f2:	4b24      	ldr	r3, [pc, #144]	; (8002884 <WIZCHIP_READ_BUF+0xbc>)
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	0c12      	lsrs	r2, r2, #16
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	4610      	mov	r0, r2
 80027fe:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002800:	4b20      	ldr	r3, [pc, #128]	; (8002884 <WIZCHIP_READ_BUF+0xbc>)
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	0a12      	lsrs	r2, r2, #8
 8002808:	b2d2      	uxtb	r2, r2
 800280a:	4610      	mov	r0, r2
 800280c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800280e:	4b1d      	ldr	r3, [pc, #116]	; (8002884 <WIZCHIP_READ_BUF+0xbc>)
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	4610      	mov	r0, r2
 8002818:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800281a:	2300      	movs	r3, #0
 800281c:	82fb      	strh	r3, [r7, #22]
 800281e:	e00a      	b.n	8002836 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8002820:	4b18      	ldr	r3, [pc, #96]	; (8002884 <WIZCHIP_READ_BUF+0xbc>)
 8002822:	69db      	ldr	r3, [r3, #28]
 8002824:	8afa      	ldrh	r2, [r7, #22]
 8002826:	68b9      	ldr	r1, [r7, #8]
 8002828:	188c      	adds	r4, r1, r2
 800282a:	4798      	blx	r3
 800282c:	4603      	mov	r3, r0
 800282e:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8002830:	8afb      	ldrh	r3, [r7, #22]
 8002832:	3301      	adds	r3, #1
 8002834:	82fb      	strh	r3, [r7, #22]
 8002836:	8afa      	ldrh	r2, [r7, #22]
 8002838:	88fb      	ldrh	r3, [r7, #6]
 800283a:	429a      	cmp	r2, r3
 800283c:	d3f0      	bcc.n	8002820 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800283e:	e017      	b.n	8002870 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	0c1b      	lsrs	r3, r3, #16
 8002844:	b2db      	uxtb	r3, r3
 8002846:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	0a1b      	lsrs	r3, r3, #8
 800284c:	b2db      	uxtb	r3, r3
 800284e:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	b2db      	uxtb	r3, r3
 8002854:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002856:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <WIZCHIP_READ_BUF+0xbc>)
 8002858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285a:	f107 0210 	add.w	r2, r7, #16
 800285e:	2103      	movs	r1, #3
 8002860:	4610      	mov	r0, r2
 8002862:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8002864:	4b07      	ldr	r3, [pc, #28]	; (8002884 <WIZCHIP_READ_BUF+0xbc>)
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	88fa      	ldrh	r2, [r7, #6]
 800286a:	4611      	mov	r1, r2
 800286c:	68b8      	ldr	r0, [r7, #8]
 800286e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002870:	4b04      	ldr	r3, [pc, #16]	; (8002884 <WIZCHIP_READ_BUF+0xbc>)
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002876:	4b03      	ldr	r3, [pc, #12]	; (8002884 <WIZCHIP_READ_BUF+0xbc>)
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	4798      	blx	r3
}
 800287c:	bf00      	nop
 800287e:	371c      	adds	r7, #28
 8002880:	46bd      	mov	sp, r7
 8002882:	bd90      	pop	{r4, r7, pc}
 8002884:	2000000c 	.word	0x2000000c

08002888 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	4613      	mov	r3, r2
 8002894:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8002896:	4b2b      	ldr	r3, [pc, #172]	; (8002944 <WIZCHIP_WRITE_BUF+0xbc>)
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800289c:	4b29      	ldr	r3, [pc, #164]	; (8002944 <WIZCHIP_WRITE_BUF+0xbc>)
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f043 0304 	orr.w	r3, r3, #4
 80028a8:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80028aa:	4b26      	ldr	r3, [pc, #152]	; (8002944 <WIZCHIP_WRITE_BUF+0xbc>)
 80028ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d126      	bne.n	8002900 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80028b2:	4b24      	ldr	r3, [pc, #144]	; (8002944 <WIZCHIP_WRITE_BUF+0xbc>)
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	0c12      	lsrs	r2, r2, #16
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	4610      	mov	r0, r2
 80028be:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80028c0:	4b20      	ldr	r3, [pc, #128]	; (8002944 <WIZCHIP_WRITE_BUF+0xbc>)
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	0a12      	lsrs	r2, r2, #8
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	4610      	mov	r0, r2
 80028cc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80028ce:	4b1d      	ldr	r3, [pc, #116]	; (8002944 <WIZCHIP_WRITE_BUF+0xbc>)
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	4610      	mov	r0, r2
 80028d8:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80028da:	2300      	movs	r3, #0
 80028dc:	82fb      	strh	r3, [r7, #22]
 80028de:	e00a      	b.n	80028f6 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80028e0:	4b18      	ldr	r3, [pc, #96]	; (8002944 <WIZCHIP_WRITE_BUF+0xbc>)
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	8afa      	ldrh	r2, [r7, #22]
 80028e6:	68b9      	ldr	r1, [r7, #8]
 80028e8:	440a      	add	r2, r1
 80028ea:	7812      	ldrb	r2, [r2, #0]
 80028ec:	4610      	mov	r0, r2
 80028ee:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80028f0:	8afb      	ldrh	r3, [r7, #22]
 80028f2:	3301      	adds	r3, #1
 80028f4:	82fb      	strh	r3, [r7, #22]
 80028f6:	8afa      	ldrh	r2, [r7, #22]
 80028f8:	88fb      	ldrh	r3, [r7, #6]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d3f0      	bcc.n	80028e0 <WIZCHIP_WRITE_BUF+0x58>
 80028fe:	e017      	b.n	8002930 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	0c1b      	lsrs	r3, r3, #16
 8002904:	b2db      	uxtb	r3, r3
 8002906:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	0a1b      	lsrs	r3, r3, #8
 800290c:	b2db      	uxtb	r3, r3
 800290e:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	b2db      	uxtb	r3, r3
 8002914:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002916:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <WIZCHIP_WRITE_BUF+0xbc>)
 8002918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291a:	f107 0210 	add.w	r2, r7, #16
 800291e:	2103      	movs	r1, #3
 8002920:	4610      	mov	r0, r2
 8002922:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8002924:	4b07      	ldr	r3, [pc, #28]	; (8002944 <WIZCHIP_WRITE_BUF+0xbc>)
 8002926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002928:	88fa      	ldrh	r2, [r7, #6]
 800292a:	4611      	mov	r1, r2
 800292c:	68b8      	ldr	r0, [r7, #8]
 800292e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002930:	4b04      	ldr	r3, [pc, #16]	; (8002944 <WIZCHIP_WRITE_BUF+0xbc>)
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002936:	4b03      	ldr	r3, [pc, #12]	; (8002944 <WIZCHIP_WRITE_BUF+0xbc>)
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	4798      	blx	r3
}
 800293c:	bf00      	nop
 800293e:	3718      	adds	r7, #24
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	2000000c 	.word	0x2000000c

08002948 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8002948:	b590      	push	{r4, r7, lr}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8002952:	2300      	movs	r3, #0
 8002954:	81fb      	strh	r3, [r7, #14]
 8002956:	2300      	movs	r3, #0
 8002958:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800295a:	79fb      	ldrb	r3, [r7, #7]
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	3301      	adds	r3, #1
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002966:	4618      	mov	r0, r3
 8002968:	f7ff fe94 	bl	8002694 <WIZCHIP_READ>
 800296c:	4603      	mov	r3, r0
 800296e:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002970:	89bb      	ldrh	r3, [r7, #12]
 8002972:	021b      	lsls	r3, r3, #8
 8002974:	b29c      	uxth	r4, r3
 8002976:	79fb      	ldrb	r3, [r7, #7]
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	3301      	adds	r3, #1
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff fe86 	bl	8002694 <WIZCHIP_READ>
 8002988:	4603      	mov	r3, r0
 800298a:	b29b      	uxth	r3, r3
 800298c:	4423      	add	r3, r4
 800298e:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002990:	89bb      	ldrh	r3, [r7, #12]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d01a      	beq.n	80029cc <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	3301      	adds	r3, #1
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff fe76 	bl	8002694 <WIZCHIP_READ>
 80029a8:	4603      	mov	r3, r0
 80029aa:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80029ac:	89fb      	ldrh	r3, [r7, #14]
 80029ae:	021b      	lsls	r3, r3, #8
 80029b0:	b29c      	uxth	r4, r3
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	3301      	adds	r3, #1
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff fe68 	bl	8002694 <WIZCHIP_READ>
 80029c4:	4603      	mov	r3, r0
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	4423      	add	r3, r4
 80029ca:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80029cc:	89fa      	ldrh	r2, [r7, #14]
 80029ce:	89bb      	ldrh	r3, [r7, #12]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d1c2      	bne.n	800295a <getSn_TX_FSR+0x12>
   return val;
 80029d4:	89fb      	ldrh	r3, [r7, #14]
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd90      	pop	{r4, r7, pc}

080029de <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80029de:	b590      	push	{r4, r7, lr}
 80029e0:	b085      	sub	sp, #20
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	4603      	mov	r3, r0
 80029e6:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80029e8:	2300      	movs	r3, #0
 80029ea:	81fb      	strh	r3, [r7, #14]
 80029ec:	2300      	movs	r3, #0
 80029ee:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80029f0:	79fb      	ldrb	r3, [r7, #7]
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	3301      	adds	r3, #1
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff fe49 	bl	8002694 <WIZCHIP_READ>
 8002a02:	4603      	mov	r3, r0
 8002a04:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8002a06:	89bb      	ldrh	r3, [r7, #12]
 8002a08:	021b      	lsls	r3, r3, #8
 8002a0a:	b29c      	uxth	r4, r3
 8002a0c:	79fb      	ldrb	r3, [r7, #7]
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	3301      	adds	r3, #1
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff fe3b 	bl	8002694 <WIZCHIP_READ>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	4423      	add	r3, r4
 8002a24:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002a26:	89bb      	ldrh	r3, [r7, #12]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d01a      	beq.n	8002a62 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8002a2c:	79fb      	ldrb	r3, [r7, #7]
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	3301      	adds	r3, #1
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff fe2b 	bl	8002694 <WIZCHIP_READ>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8002a42:	89fb      	ldrh	r3, [r7, #14]
 8002a44:	021b      	lsls	r3, r3, #8
 8002a46:	b29c      	uxth	r4, r3
 8002a48:	79fb      	ldrb	r3, [r7, #7]
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff fe1d 	bl	8002694 <WIZCHIP_READ>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	4423      	add	r3, r4
 8002a60:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8002a62:	89fa      	ldrh	r2, [r7, #14]
 8002a64:	89bb      	ldrh	r3, [r7, #12]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d1c2      	bne.n	80029f0 <getSn_RX_RSR+0x12>
   return val;
 8002a6a:	89fb      	ldrh	r3, [r7, #14]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd90      	pop	{r4, r7, pc}

08002a74 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002a74:	b590      	push	{r4, r7, lr}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	6039      	str	r1, [r7, #0]
 8002a7e:	71fb      	strb	r3, [r7, #7]
 8002a80:	4613      	mov	r3, r2
 8002a82:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002a84:	2300      	movs	r3, #0
 8002a86:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8002a8c:	88bb      	ldrh	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d048      	beq.n	8002b24 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8002a92:	79fb      	ldrb	r3, [r7, #7]
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	3301      	adds	r3, #1
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff fdf8 	bl	8002694 <WIZCHIP_READ>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	021b      	lsls	r3, r3, #8
 8002aaa:	b29c      	uxth	r4, r3
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff fdeb 	bl	8002694 <WIZCHIP_READ>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	4423      	add	r3, r4
 8002ac4:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8002ac6:	89fb      	ldrh	r3, [r7, #14]
 8002ac8:	021b      	lsls	r3, r3, #8
 8002aca:	79fa      	ldrb	r2, [r7, #7]
 8002acc:	0092      	lsls	r2, r2, #2
 8002ace:	3202      	adds	r2, #2
 8002ad0:	00d2      	lsls	r2, r2, #3
 8002ad2:	4413      	add	r3, r2
 8002ad4:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8002ad6:	88bb      	ldrh	r3, [r7, #4]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	6839      	ldr	r1, [r7, #0]
 8002adc:	68b8      	ldr	r0, [r7, #8]
 8002ade:	f7ff fed3 	bl	8002888 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8002ae2:	89fa      	ldrh	r2, [r7, #14]
 8002ae4:	88bb      	ldrh	r3, [r7, #4]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8002aea:	79fb      	ldrb	r3, [r7, #7]
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	3301      	adds	r3, #1
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002af6:	461a      	mov	r2, r3
 8002af8:	89fb      	ldrh	r3, [r7, #14]
 8002afa:	0a1b      	lsrs	r3, r3, #8
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	4619      	mov	r1, r3
 8002b02:	4610      	mov	r0, r2
 8002b04:	f7ff fe12 	bl	800272c <WIZCHIP_WRITE>
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8002b14:	461a      	mov	r2, r3
 8002b16:	89fb      	ldrh	r3, [r7, #14]
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4610      	mov	r0, r2
 8002b1e:	f7ff fe05 	bl	800272c <WIZCHIP_WRITE>
 8002b22:	e000      	b.n	8002b26 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8002b24:	bf00      	nop
}
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd90      	pop	{r4, r7, pc}

08002b2c <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8002b2c:	b590      	push	{r4, r7, lr}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	4604      	mov	r4, r0
 8002b34:	4608      	mov	r0, r1
 8002b36:	4611      	mov	r1, r2
 8002b38:	461a      	mov	r2, r3
 8002b3a:	4623      	mov	r3, r4
 8002b3c:	71fb      	strb	r3, [r7, #7]
 8002b3e:	4603      	mov	r3, r0
 8002b40:	71bb      	strb	r3, [r7, #6]
 8002b42:	460b      	mov	r3, r1
 8002b44:	80bb      	strh	r3, [r7, #4]
 8002b46:	4613      	mov	r3, r2
 8002b48:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8002b4a:	79fb      	ldrb	r3, [r7, #7]
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	d902      	bls.n	8002b56 <socket+0x2a>
 8002b50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b54:	e0f1      	b.n	8002d3a <socket+0x20e>
	switch(protocol)
 8002b56:	79bb      	ldrb	r3, [r7, #6]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d004      	beq.n	8002b66 <socket+0x3a>
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	db10      	blt.n	8002b82 <socket+0x56>
 8002b60:	2b04      	cmp	r3, #4
 8002b62:	dc0e      	bgt.n	8002b82 <socket+0x56>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8002b64:	e011      	b.n	8002b8a <socket+0x5e>
            getSIPR((uint8_t*)&taddr);
 8002b66:	f107 030c 	add.w	r3, r7, #12
 8002b6a:	2204      	movs	r2, #4
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002b72:	f7ff fe29 	bl	80027c8 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d105      	bne.n	8002b88 <socket+0x5c>
 8002b7c:	f06f 0302 	mvn.w	r3, #2
 8002b80:	e0db      	b.n	8002d3a <socket+0x20e>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8002b82:	f06f 0304 	mvn.w	r3, #4
 8002b86:	e0d8      	b.n	8002d3a <socket+0x20e>
	    break;
 8002b88:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8002b8a:	78fb      	ldrb	r3, [r7, #3]
 8002b8c:	f003 0304 	and.w	r3, r3, #4
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d002      	beq.n	8002b9a <socket+0x6e>
 8002b94:	f06f 0305 	mvn.w	r3, #5
 8002b98:	e0cf      	b.n	8002d3a <socket+0x20e>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8002b9a:	78fb      	ldrb	r3, [r7, #3]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d025      	beq.n	8002bec <socket+0xc0>
	{
   	switch(protocol)
 8002ba0:	79bb      	ldrb	r3, [r7, #6]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d002      	beq.n	8002bac <socket+0x80>
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d008      	beq.n	8002bbc <socket+0x90>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8002baa:	e024      	b.n	8002bf6 <socket+0xca>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8002bac:	78fb      	ldrb	r3, [r7, #3]
 8002bae:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d11c      	bne.n	8002bf0 <socket+0xc4>
 8002bb6:	f06f 0305 	mvn.w	r3, #5
 8002bba:	e0be      	b.n	8002d3a <socket+0x20e>
   	      if(flag & SF_IGMP_VER2)
 8002bbc:	78fb      	ldrb	r3, [r7, #3]
 8002bbe:	f003 0320 	and.w	r3, r3, #32
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d006      	beq.n	8002bd4 <socket+0xa8>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8002bc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	db02      	blt.n	8002bd4 <socket+0xa8>
 8002bce:	f06f 0305 	mvn.w	r3, #5
 8002bd2:	e0b2      	b.n	8002d3a <socket+0x20e>
      	      if(flag & SF_UNI_BLOCK)
 8002bd4:	78fb      	ldrb	r3, [r7, #3]
 8002bd6:	f003 0310 	and.w	r3, r3, #16
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00a      	beq.n	8002bf4 <socket+0xc8>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8002bde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	db06      	blt.n	8002bf4 <socket+0xc8>
 8002be6:	f06f 0305 	mvn.w	r3, #5
 8002bea:	e0a6      	b.n	8002d3a <socket+0x20e>
   	}
   }
 8002bec:	bf00      	nop
 8002bee:	e002      	b.n	8002bf6 <socket+0xca>
   	      break;
 8002bf0:	bf00      	nop
 8002bf2:	e000      	b.n	8002bf6 <socket+0xca>
   	      break;
 8002bf4:	bf00      	nop
	close(sn);
 8002bf6:	79fb      	ldrb	r3, [r7, #7]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f000 f8ad 	bl	8002d58 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	3301      	adds	r3, #1
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	4618      	mov	r0, r3
 8002c08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c0c:	f023 030f 	bic.w	r3, r3, #15
 8002c10:	b25a      	sxtb	r2, r3
 8002c12:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	b25b      	sxtb	r3, r3
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	f7ff fd85 	bl	800272c <WIZCHIP_WRITE>
    #endif
	if(!port)
 8002c22:	88bb      	ldrh	r3, [r7, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d110      	bne.n	8002c4a <socket+0x11e>
	{
	   port = sock_any_port++;
 8002c28:	4b46      	ldr	r3, [pc, #280]	; (8002d44 <socket+0x218>)
 8002c2a:	881b      	ldrh	r3, [r3, #0]
 8002c2c:	1c5a      	adds	r2, r3, #1
 8002c2e:	b291      	uxth	r1, r2
 8002c30:	4a44      	ldr	r2, [pc, #272]	; (8002d44 <socket+0x218>)
 8002c32:	8011      	strh	r1, [r2, #0]
 8002c34:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8002c36:	4b43      	ldr	r3, [pc, #268]	; (8002d44 <socket+0x218>)
 8002c38:	881b      	ldrh	r3, [r3, #0]
 8002c3a:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d103      	bne.n	8002c4a <socket+0x11e>
 8002c42:	4b40      	ldr	r3, [pc, #256]	; (8002d44 <socket+0x218>)
 8002c44:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8002c48:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	3301      	adds	r3, #1
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c56:	461a      	mov	r2, r3
 8002c58:	88bb      	ldrh	r3, [r7, #4]
 8002c5a:	0a1b      	lsrs	r3, r3, #8
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	4619      	mov	r1, r3
 8002c62:	4610      	mov	r0, r2
 8002c64:	f7ff fd62 	bl	800272c <WIZCHIP_WRITE>
 8002c68:	79fb      	ldrb	r3, [r7, #7]
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c74:	461a      	mov	r2, r3
 8002c76:	88bb      	ldrh	r3, [r7, #4]
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	f7ff fd55 	bl	800272c <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8002c82:	79fb      	ldrb	r3, [r7, #7]
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	3301      	adds	r3, #1
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002c8e:	2101      	movs	r1, #1
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff fd4b 	bl	800272c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002c96:	bf00      	nop
 8002c98:	79fb      	ldrb	r3, [r7, #7]
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff fcf5 	bl	8002694 <WIZCHIP_READ>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1f3      	bne.n	8002c98 <socket+0x16c>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8002cb0:	79fb      	ldrb	r3, [r7, #7]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	b21b      	sxth	r3, r3
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	b21a      	sxth	r2, r3
 8002cbe:	4b22      	ldr	r3, [pc, #136]	; (8002d48 <socket+0x21c>)
 8002cc0:	881b      	ldrh	r3, [r3, #0]
 8002cc2:	b21b      	sxth	r3, r3
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	b21b      	sxth	r3, r3
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	4b1f      	ldr	r3, [pc, #124]	; (8002d48 <socket+0x21c>)
 8002ccc:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8002cce:	78fb      	ldrb	r3, [r7, #3]
 8002cd0:	f003 0201 	and.w	r2, r3, #1
 8002cd4:	79fb      	ldrb	r3, [r7, #7]
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	b21a      	sxth	r2, r3
 8002cdc:	4b1a      	ldr	r3, [pc, #104]	; (8002d48 <socket+0x21c>)
 8002cde:	881b      	ldrh	r3, [r3, #0]
 8002ce0:	b21b      	sxth	r3, r3
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	b21b      	sxth	r3, r3
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	4b17      	ldr	r3, [pc, #92]	; (8002d48 <socket+0x21c>)
 8002cea:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8002cec:	79fb      	ldrb	r3, [r7, #7]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	b21b      	sxth	r3, r3
 8002cf6:	43db      	mvns	r3, r3
 8002cf8:	b21a      	sxth	r2, r3
 8002cfa:	4b14      	ldr	r3, [pc, #80]	; (8002d4c <socket+0x220>)
 8002cfc:	881b      	ldrh	r3, [r3, #0]
 8002cfe:	b21b      	sxth	r3, r3
 8002d00:	4013      	ands	r3, r2
 8002d02:	b21b      	sxth	r3, r3
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	4b11      	ldr	r3, [pc, #68]	; (8002d4c <socket+0x220>)
 8002d08:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8002d0a:	79fb      	ldrb	r3, [r7, #7]
 8002d0c:	4a10      	ldr	r2, [pc, #64]	; (8002d50 <socket+0x224>)
 8002d0e:	2100      	movs	r1, #0
 8002d10:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8002d14:	79fb      	ldrb	r3, [r7, #7]
 8002d16:	4a0f      	ldr	r2, [pc, #60]	; (8002d54 <socket+0x228>)
 8002d18:	2100      	movs	r1, #0
 8002d1a:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8002d1c:	bf00      	nop
 8002d1e:	79fb      	ldrb	r3, [r7, #7]
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	3301      	adds	r3, #1
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff fcb2 	bl	8002694 <WIZCHIP_READ>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0f3      	beq.n	8002d1e <socket+0x1f2>
   return (int8_t)sn;
 8002d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3714      	adds	r7, #20
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd90      	pop	{r4, r7, pc}
 8002d42:	bf00      	nop
 8002d44:	2000000a 	.word	0x2000000a
 8002d48:	200000bc 	.word	0x200000bc
 8002d4c:	200000be 	.word	0x200000be
 8002d50:	200000c0 	.word	0x200000c0
 8002d54:	200000d0 	.word	0x200000d0

08002d58 <close>:

int8_t close(uint8_t sn)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8002d62:	79fb      	ldrb	r3, [r7, #7]
 8002d64:	2b08      	cmp	r3, #8
 8002d66:	d902      	bls.n	8002d6e <close+0x16>
 8002d68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d6c:	e055      	b.n	8002e1a <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8002d6e:	79fb      	ldrb	r3, [r7, #7]
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	3301      	adds	r3, #1
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002d7a:	2110      	movs	r1, #16
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff fcd5 	bl	800272c <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8002d82:	bf00      	nop
 8002d84:	79fb      	ldrb	r3, [r7, #7]
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	3301      	adds	r3, #1
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff fc7f 	bl	8002694 <WIZCHIP_READ>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1f3      	bne.n	8002d84 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8002d9c:	79fb      	ldrb	r3, [r7, #7]
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	3301      	adds	r3, #1
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002da8:	211f      	movs	r1, #31
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff fcbe 	bl	800272c <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8002db0:	79fb      	ldrb	r3, [r7, #7]
 8002db2:	2201      	movs	r2, #1
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	b21b      	sxth	r3, r3
 8002dba:	43db      	mvns	r3, r3
 8002dbc:	b21a      	sxth	r2, r3
 8002dbe:	4b19      	ldr	r3, [pc, #100]	; (8002e24 <close+0xcc>)
 8002dc0:	881b      	ldrh	r3, [r3, #0]
 8002dc2:	b21b      	sxth	r3, r3
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	b21b      	sxth	r3, r3
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	4b16      	ldr	r3, [pc, #88]	; (8002e24 <close+0xcc>)
 8002dcc:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	b21b      	sxth	r3, r3
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	b21a      	sxth	r2, r3
 8002ddc:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <close+0xd0>)
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	b21b      	sxth	r3, r3
 8002de2:	4013      	ands	r3, r2
 8002de4:	b21b      	sxth	r3, r3
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	4b0f      	ldr	r3, [pc, #60]	; (8002e28 <close+0xd0>)
 8002dea:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8002dec:	79fb      	ldrb	r3, [r7, #7]
 8002dee:	4a0f      	ldr	r2, [pc, #60]	; (8002e2c <close+0xd4>)
 8002df0:	2100      	movs	r1, #0
 8002df2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	4a0d      	ldr	r2, [pc, #52]	; (8002e30 <close+0xd8>)
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8002dfe:	bf00      	nop
 8002e00:	79fb      	ldrb	r3, [r7, #7]
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	3301      	adds	r3, #1
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff fc41 	bl	8002694 <WIZCHIP_READ>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1f3      	bne.n	8002e00 <close+0xa8>
	return SOCK_OK;
 8002e18:	2301      	movs	r3, #1
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	200000bc 	.word	0x200000bc
 8002e28:	200000be 	.word	0x200000be
 8002e2c:	200000c0 	.word	0x200000c0
 8002e30:	200000d0 	.word	0x200000d0

08002e34 <listen>:

int8_t listen(uint8_t sn)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8002e3e:	79fb      	ldrb	r3, [r7, #7]
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d902      	bls.n	8002e4a <listen+0x16>
 8002e44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e48:	e049      	b.n	8002ede <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002e4a:	79fb      	ldrb	r3, [r7, #7]
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	3301      	adds	r3, #1
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff fc1e 	bl	8002694 <WIZCHIP_READ>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d002      	beq.n	8002e68 <listen+0x34>
 8002e62:	f06f 0304 	mvn.w	r3, #4
 8002e66:	e03a      	b.n	8002ede <listen+0xaa>
	CHECK_SOCKINIT();
 8002e68:	79fb      	ldrb	r3, [r7, #7]
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff fc0d 	bl	8002694 <WIZCHIP_READ>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b13      	cmp	r3, #19
 8002e7e:	d002      	beq.n	8002e86 <listen+0x52>
 8002e80:	f06f 0302 	mvn.w	r3, #2
 8002e84:	e02b      	b.n	8002ede <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002e92:	2102      	movs	r1, #2
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff fc49 	bl	800272c <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8002e9a:	bf00      	nop
 8002e9c:	79fb      	ldrb	r3, [r7, #7]
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff fbf3 	bl	8002694 <WIZCHIP_READ>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1f3      	bne.n	8002e9c <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8002eb4:	e006      	b.n	8002ec4 <listen+0x90>
   {
         close(sn);
 8002eb6:	79fb      	ldrb	r3, [r7, #7]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff ff4d 	bl	8002d58 <close>
         return SOCKERR_SOCKCLOSED;
 8002ebe:	f06f 0303 	mvn.w	r3, #3
 8002ec2:	e00c      	b.n	8002ede <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8002ec4:	79fb      	ldrb	r3, [r7, #7]
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	3301      	adds	r3, #1
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff fbdf 	bl	8002694 <WIZCHIP_READ>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b14      	cmp	r3, #20
 8002eda:	d1ec      	bne.n	8002eb6 <listen+0x82>
   }
   return SOCK_OK;
 8002edc:	2301      	movs	r3, #1
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
	...

08002ee8 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	4603      	mov	r3, r0
 8002ef0:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8002ef2:	79fb      	ldrb	r3, [r7, #7]
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	d902      	bls.n	8002efe <disconnect+0x16>
 8002ef8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002efc:	e062      	b.n	8002fc4 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	3301      	adds	r3, #1
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff fbc4 	bl	8002694 <WIZCHIP_READ>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	f003 030f 	and.w	r3, r3, #15
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d002      	beq.n	8002f1c <disconnect+0x34>
 8002f16:	f06f 0304 	mvn.w	r3, #4
 8002f1a:	e053      	b.n	8002fc4 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8002f1c:	79fb      	ldrb	r3, [r7, #7]
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	3301      	adds	r3, #1
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002f28:	2108      	movs	r1, #8
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff fbfe 	bl	800272c <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8002f30:	bf00      	nop
 8002f32:	79fb      	ldrb	r3, [r7, #7]
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	3301      	adds	r3, #1
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff fba8 	bl	8002694 <WIZCHIP_READ>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f3      	bne.n	8002f32 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8002f4a:	79fb      	ldrb	r3, [r7, #7]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	b21b      	sxth	r3, r3
 8002f54:	43db      	mvns	r3, r3
 8002f56:	b21a      	sxth	r2, r3
 8002f58:	4b1c      	ldr	r3, [pc, #112]	; (8002fcc <disconnect+0xe4>)
 8002f5a:	881b      	ldrh	r3, [r3, #0]
 8002f5c:	b21b      	sxth	r3, r3
 8002f5e:	4013      	ands	r3, r2
 8002f60:	b21b      	sxth	r3, r3
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	4b19      	ldr	r3, [pc, #100]	; (8002fcc <disconnect+0xe4>)
 8002f66:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8002f68:	4b19      	ldr	r3, [pc, #100]	; (8002fd0 <disconnect+0xe8>)
 8002f6a:	881b      	ldrh	r3, [r3, #0]
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	79fb      	ldrb	r3, [r7, #7]
 8002f70:	fa42 f303 	asr.w	r3, r2, r3
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d016      	beq.n	8002faa <disconnect+0xc2>
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	e021      	b.n	8002fc4 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8002f80:	79fb      	ldrb	r3, [r7, #7]
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	3301      	adds	r3, #1
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff fb81 	bl	8002694 <WIZCHIP_READ>
 8002f92:	4603      	mov	r3, r0
 8002f94:	f003 0308 	and.w	r3, r3, #8
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d006      	beq.n	8002faa <disconnect+0xc2>
	   {
	      close(sn);
 8002f9c:	79fb      	ldrb	r3, [r7, #7]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff feda 	bl	8002d58 <close>
	      return SOCKERR_TIMEOUT;
 8002fa4:	f06f 030c 	mvn.w	r3, #12
 8002fa8:	e00c      	b.n	8002fc4 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8002faa:	79fb      	ldrb	r3, [r7, #7]
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	3301      	adds	r3, #1
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff fb6c 	bl	8002694 <WIZCHIP_READ>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1de      	bne.n	8002f80 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8002fc2:	2301      	movs	r3, #1
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	200000be 	.word	0x200000be
 8002fd0:	200000bc 	.word	0x200000bc

08002fd4 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	4603      	mov	r3, r0
 8002fdc:	6039      	str	r1, [r7, #0]
 8002fde:	71fb      	strb	r3, [r7, #7]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8002fec:	79fb      	ldrb	r3, [r7, #7]
 8002fee:	2b08      	cmp	r3, #8
 8002ff0:	d902      	bls.n	8002ff8 <send+0x24>
 8002ff2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ff6:	e0de      	b.n	80031b6 <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002ff8:	79fb      	ldrb	r3, [r7, #7]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff fb47 	bl	8002694 <WIZCHIP_READ>
 8003006:	4603      	mov	r3, r0
 8003008:	f003 030f 	and.w	r3, r3, #15
 800300c:	2b01      	cmp	r3, #1
 800300e:	d002      	beq.n	8003016 <send+0x42>
 8003010:	f06f 0304 	mvn.w	r3, #4
 8003014:	e0cf      	b.n	80031b6 <send+0x1e2>
   CHECK_SOCKDATA();
 8003016:	88bb      	ldrh	r3, [r7, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d102      	bne.n	8003022 <send+0x4e>
 800301c:	f06f 030d 	mvn.w	r3, #13
 8003020:	e0c9      	b.n	80031b6 <send+0x1e2>
   tmp = getSn_SR(sn);
 8003022:	79fb      	ldrb	r3, [r7, #7]
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	3301      	adds	r3, #1
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff fb30 	bl	8002694 <WIZCHIP_READ>
 8003034:	4603      	mov	r3, r0
 8003036:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8003038:	7bfb      	ldrb	r3, [r7, #15]
 800303a:	2b17      	cmp	r3, #23
 800303c:	d005      	beq.n	800304a <send+0x76>
 800303e:	7bfb      	ldrb	r3, [r7, #15]
 8003040:	2b1c      	cmp	r3, #28
 8003042:	d002      	beq.n	800304a <send+0x76>
 8003044:	f06f 0306 	mvn.w	r3, #6
 8003048:	e0b5      	b.n	80031b6 <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 800304a:	4b5d      	ldr	r3, [pc, #372]	; (80031c0 <send+0x1ec>)
 800304c:	881b      	ldrh	r3, [r3, #0]
 800304e:	461a      	mov	r2, r3
 8003050:	79fb      	ldrb	r3, [r7, #7]
 8003052:	fa42 f303 	asr.w	r3, r2, r3
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d039      	beq.n	80030d2 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	3301      	adds	r3, #1
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff fb12 	bl	8002694 <WIZCHIP_READ>
 8003070:	4603      	mov	r3, r0
 8003072:	f003 031f 	and.w	r3, r3, #31
 8003076:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8003078:	7bfb      	ldrb	r3, [r7, #15]
 800307a:	f003 0310 	and.w	r3, r3, #16
 800307e:	2b00      	cmp	r3, #0
 8003080:	d019      	beq.n	80030b6 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8003082:	79fb      	ldrb	r3, [r7, #7]
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	3301      	adds	r3, #1
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800308e:	2110      	movs	r1, #16
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff fb4b 	bl	800272c <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8003096:	79fb      	ldrb	r3, [r7, #7]
 8003098:	2201      	movs	r2, #1
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	b21b      	sxth	r3, r3
 80030a0:	43db      	mvns	r3, r3
 80030a2:	b21a      	sxth	r2, r3
 80030a4:	4b46      	ldr	r3, [pc, #280]	; (80031c0 <send+0x1ec>)
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	b21b      	sxth	r3, r3
 80030aa:	4013      	ands	r3, r2
 80030ac:	b21b      	sxth	r3, r3
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	4b43      	ldr	r3, [pc, #268]	; (80031c0 <send+0x1ec>)
 80030b2:	801a      	strh	r2, [r3, #0]
 80030b4:	e00d      	b.n	80030d2 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80030b6:	7bfb      	ldrb	r3, [r7, #15]
 80030b8:	f003 0308 	and.w	r3, r3, #8
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d006      	beq.n	80030ce <send+0xfa>
      {
         close(sn);
 80030c0:	79fb      	ldrb	r3, [r7, #7]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff fe48 	bl	8002d58 <close>
         return SOCKERR_TIMEOUT;
 80030c8:	f06f 030c 	mvn.w	r3, #12
 80030cc:	e073      	b.n	80031b6 <send+0x1e2>
      }
      else return SOCK_BUSY;
 80030ce:	2300      	movs	r3, #0
 80030d0:	e071      	b.n	80031b6 <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 80030d2:	79fb      	ldrb	r3, [r7, #7]
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	3301      	adds	r3, #1
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff fad8 	bl	8002694 <WIZCHIP_READ>
 80030e4:	4603      	mov	r3, r0
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	029b      	lsls	r3, r3, #10
 80030ea:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80030ec:	88ba      	ldrh	r2, [r7, #4]
 80030ee:	89bb      	ldrh	r3, [r7, #12]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d901      	bls.n	80030f8 <send+0x124>
 80030f4:	89bb      	ldrh	r3, [r7, #12]
 80030f6:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80030f8:	79fb      	ldrb	r3, [r7, #7]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7ff fc24 	bl	8002948 <getSn_TX_FSR>
 8003100:	4603      	mov	r3, r0
 8003102:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8003104:	79fb      	ldrb	r3, [r7, #7]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	3301      	adds	r3, #1
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff fabf 	bl	8002694 <WIZCHIP_READ>
 8003116:	4603      	mov	r3, r0
 8003118:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 800311a:	7bfb      	ldrb	r3, [r7, #15]
 800311c:	2b17      	cmp	r3, #23
 800311e:	d009      	beq.n	8003134 <send+0x160>
 8003120:	7bfb      	ldrb	r3, [r7, #15]
 8003122:	2b1c      	cmp	r3, #28
 8003124:	d006      	beq.n	8003134 <send+0x160>
      {
         close(sn);
 8003126:	79fb      	ldrb	r3, [r7, #7]
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff fe15 	bl	8002d58 <close>
         return SOCKERR_SOCKSTATUS;
 800312e:	f06f 0306 	mvn.w	r3, #6
 8003132:	e040      	b.n	80031b6 <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8003134:	4b23      	ldr	r3, [pc, #140]	; (80031c4 <send+0x1f0>)
 8003136:	881b      	ldrh	r3, [r3, #0]
 8003138:	461a      	mov	r2, r3
 800313a:	79fb      	ldrb	r3, [r7, #7]
 800313c:	fa42 f303 	asr.w	r3, r2, r3
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <send+0x180>
 8003148:	88ba      	ldrh	r2, [r7, #4]
 800314a:	89bb      	ldrh	r3, [r7, #12]
 800314c:	429a      	cmp	r2, r3
 800314e:	d901      	bls.n	8003154 <send+0x180>
 8003150:	2300      	movs	r3, #0
 8003152:	e030      	b.n	80031b6 <send+0x1e2>
      if(len <= freesize) break;
 8003154:	88ba      	ldrh	r2, [r7, #4]
 8003156:	89bb      	ldrh	r3, [r7, #12]
 8003158:	429a      	cmp	r2, r3
 800315a:	d900      	bls.n	800315e <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 800315c:	e7cc      	b.n	80030f8 <send+0x124>
      if(len <= freesize) break;
 800315e:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8003160:	88ba      	ldrh	r2, [r7, #4]
 8003162:	79fb      	ldrb	r3, [r7, #7]
 8003164:	6839      	ldr	r1, [r7, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff fc84 	bl	8002a74 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 800316c:	79fb      	ldrb	r3, [r7, #7]
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	3301      	adds	r3, #1
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003178:	2120      	movs	r1, #32
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff fad6 	bl	800272c <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8003180:	bf00      	nop
 8003182:	79fb      	ldrb	r3, [r7, #7]
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	3301      	adds	r3, #1
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800318e:	4618      	mov	r0, r3
 8003190:	f7ff fa80 	bl	8002694 <WIZCHIP_READ>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f3      	bne.n	8003182 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 800319a:	79fb      	ldrb	r3, [r7, #7]
 800319c:	2201      	movs	r2, #1
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	b21a      	sxth	r2, r3
 80031a4:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <send+0x1ec>)
 80031a6:	881b      	ldrh	r3, [r3, #0]
 80031a8:	b21b      	sxth	r3, r3
 80031aa:	4313      	orrs	r3, r2
 80031ac:	b21b      	sxth	r3, r3
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	4b03      	ldr	r3, [pc, #12]	; (80031c0 <send+0x1ec>)
 80031b2:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80031b4:	88bb      	ldrh	r3, [r7, #4]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	200000be 	.word	0x200000be
 80031c4:	200000bc 	.word	0x200000bc

080031c8 <getsockopt>:
   }   
   return SOCK_OK;
}

int8_t  getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
 80031c8:	b590      	push	{r4, r7, lr}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	4603      	mov	r3, r0
 80031d0:	603a      	str	r2, [r7, #0]
 80031d2:	71fb      	strb	r3, [r7, #7]
 80031d4:	460b      	mov	r3, r1
 80031d6:	71bb      	strb	r3, [r7, #6]
   CHECK_SOCKNUM();
 80031d8:	79fb      	ldrb	r3, [r7, #7]
 80031da:	2b08      	cmp	r3, #8
 80031dc:	d902      	bls.n	80031e4 <getsockopt+0x1c>
 80031de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031e2:	e101      	b.n	80033e8 <getsockopt+0x220>
   switch(sotype)
 80031e4:	79bb      	ldrb	r3, [r7, #6]
 80031e6:	2b0c      	cmp	r3, #12
 80031e8:	f200 80fa 	bhi.w	80033e0 <getsockopt+0x218>
 80031ec:	a201      	add	r2, pc, #4	; (adr r2, 80031f4 <getsockopt+0x2c>)
 80031ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f2:	bf00      	nop
 80031f4:	08003229 	.word	0x08003229
 80031f8:	08003245 	.word	0x08003245
 80031fc:	08003261 	.word	0x08003261
 8003200:	0800327d 	.word	0x0800327d
 8003204:	080032b7 	.word	0x080032b7
 8003208:	080032cf 	.word	0x080032cf
 800320c:	080033e1 	.word	0x080033e1
 8003210:	08003309 	.word	0x08003309
 8003214:	08003343 	.word	0x08003343
 8003218:	08003355 	.word	0x08003355
 800321c:	08003367 	.word	0x08003367
 8003220:	08003383 	.word	0x08003383
 8003224:	080033bb 	.word	0x080033bb
   {
      case SO_FLAG:
         *(uint8_t*)arg = getSn_MR(sn) & 0xF0;
 8003228:	79fb      	ldrb	r3, [r7, #7]
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	3301      	adds	r3, #1
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff fa2f 	bl	8002694 <WIZCHIP_READ>
 8003236:	4603      	mov	r3, r0
 8003238:	f023 030f 	bic.w	r3, r3, #15
 800323c:	b2da      	uxtb	r2, r3
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	701a      	strb	r2, [r3, #0]
         break;
 8003242:	e0d0      	b.n	80033e6 <getsockopt+0x21e>
      case SO_TTL:
         *(uint8_t*) arg = getSn_TTL(sn);
 8003244:	79fb      	ldrb	r3, [r7, #7]
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	3301      	adds	r3, #1
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff fa1f 	bl	8002694 <WIZCHIP_READ>
 8003256:	4603      	mov	r3, r0
 8003258:	461a      	mov	r2, r3
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	701a      	strb	r2, [r3, #0]
         break;
 800325e:	e0c2      	b.n	80033e6 <getsockopt+0x21e>
      case SO_TOS:
         *(uint8_t*) arg = getSn_TOS(sn);
 8003260:	79fb      	ldrb	r3, [r7, #7]
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	3301      	adds	r3, #1
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff fa11 	bl	8002694 <WIZCHIP_READ>
 8003272:	4603      	mov	r3, r0
 8003274:	461a      	mov	r2, r3
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	701a      	strb	r2, [r3, #0]
         break;
 800327a:	e0b4      	b.n	80033e6 <getsockopt+0x21e>
      case SO_MSS:   
         *(uint16_t*) arg = getSn_MSSR(sn);
 800327c:	79fb      	ldrb	r3, [r7, #7]
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	3301      	adds	r3, #1
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff fa03 	bl	8002694 <WIZCHIP_READ>
 800328e:	4603      	mov	r3, r0
 8003290:	b29b      	uxth	r3, r3
 8003292:	021b      	lsls	r3, r3, #8
 8003294:	b29c      	uxth	r4, r3
 8003296:	79fb      	ldrb	r3, [r7, #7]
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	3301      	adds	r3, #1
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7ff f9f6 	bl	8002694 <WIZCHIP_READ>
 80032a8:	4603      	mov	r3, r0
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	4423      	add	r3, r4
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	801a      	strh	r2, [r3, #0]
         break;
 80032b4:	e097      	b.n	80033e6 <getsockopt+0x21e>
      case SO_DESTIP:
         getSn_DIPR(sn, (uint8_t*)arg);
 80032b6:	79fb      	ldrb	r3, [r7, #7]
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	3301      	adds	r3, #1
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80032c2:	2204      	movs	r2, #4
 80032c4:	6839      	ldr	r1, [r7, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff fa7e 	bl	80027c8 <WIZCHIP_READ_BUF>
         break;
 80032cc:	e08b      	b.n	80033e6 <getsockopt+0x21e>
      case SO_DESTPORT:  
         *(uint16_t*) arg = getSn_DPORT(sn);
 80032ce:	79fb      	ldrb	r3, [r7, #7]
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	3301      	adds	r3, #1
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032da:	4618      	mov	r0, r3
 80032dc:	f7ff f9da 	bl	8002694 <WIZCHIP_READ>
 80032e0:	4603      	mov	r3, r0
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	021b      	lsls	r3, r3, #8
 80032e6:	b29c      	uxth	r4, r3
 80032e8:	79fb      	ldrb	r3, [r7, #7]
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	3301      	adds	r3, #1
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff f9cd 	bl	8002694 <WIZCHIP_READ>
 80032fa:	4603      	mov	r3, r0
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	4423      	add	r3, r4
 8003300:	b29a      	uxth	r2, r3
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	801a      	strh	r2, [r3, #0]
         break;
 8003306:	e06e      	b.n	80033e6 <getsockopt+0x21e>
   #if _WIZCHIP_ > 5200   
      case SO_KEEPALIVEAUTO:
         CHECK_SOCKMODE(Sn_MR_TCP);
 8003308:	79fb      	ldrb	r3, [r7, #7]
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	3301      	adds	r3, #1
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff f9bf 	bl	8002694 <WIZCHIP_READ>
 8003316:	4603      	mov	r3, r0
 8003318:	f003 030f 	and.w	r3, r3, #15
 800331c:	2b01      	cmp	r3, #1
 800331e:	d002      	beq.n	8003326 <getsockopt+0x15e>
 8003320:	f06f 0304 	mvn.w	r3, #4
 8003324:	e060      	b.n	80033e8 <getsockopt+0x220>
         *(uint16_t*) arg = getSn_KPALVTR(sn);
 8003326:	79fb      	ldrb	r3, [r7, #7]
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	3301      	adds	r3, #1
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff f9ae 	bl	8002694 <WIZCHIP_READ>
 8003338:	4603      	mov	r3, r0
 800333a:	b29a      	uxth	r2, r3
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	801a      	strh	r2, [r3, #0]
         break;
 8003340:	e051      	b.n	80033e6 <getsockopt+0x21e>
   #endif      
      case SO_SENDBUF:
         *(uint16_t*) arg = getSn_TX_FSR(sn);
 8003342:	79fb      	ldrb	r3, [r7, #7]
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff faff 	bl	8002948 <getSn_TX_FSR>
 800334a:	4603      	mov	r3, r0
 800334c:	461a      	mov	r2, r3
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	801a      	strh	r2, [r3, #0]
         break;
 8003352:	e048      	b.n	80033e6 <getsockopt+0x21e>
      case SO_RECVBUF:
         *(uint16_t*) arg = getSn_RX_RSR(sn);
 8003354:	79fb      	ldrb	r3, [r7, #7]
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff fb41 	bl	80029de <getSn_RX_RSR>
 800335c:	4603      	mov	r3, r0
 800335e:	461a      	mov	r2, r3
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	801a      	strh	r2, [r3, #0]
         break;
 8003364:	e03f      	b.n	80033e6 <getsockopt+0x21e>
      case SO_STATUS:
         *(uint8_t*) arg = getSn_SR(sn);
 8003366:	79fb      	ldrb	r3, [r7, #7]
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	3301      	adds	r3, #1
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff f98e 	bl	8002694 <WIZCHIP_READ>
 8003378:	4603      	mov	r3, r0
 800337a:	461a      	mov	r2, r3
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	701a      	strb	r2, [r3, #0]
         break;
 8003380:	e031      	b.n	80033e6 <getsockopt+0x21e>
      case SO_REMAINSIZE:
         if(getSn_MR(sn) & Sn_MR_TCP)
 8003382:	79fb      	ldrb	r3, [r7, #7]
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	3301      	adds	r3, #1
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	4618      	mov	r0, r3
 800338c:	f7ff f982 	bl	8002694 <WIZCHIP_READ>
 8003390:	4603      	mov	r3, r0
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d008      	beq.n	80033ac <getsockopt+0x1e4>
            *(uint16_t*)arg = getSn_RX_RSR(sn);
 800339a:	79fb      	ldrb	r3, [r7, #7]
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff fb1e 	bl	80029de <getSn_RX_RSR>
 80033a2:	4603      	mov	r3, r0
 80033a4:	461a      	mov	r2, r3
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	801a      	strh	r2, [r3, #0]
         else
            *(uint16_t*)arg = sock_remained_size[sn];
         break;
 80033aa:	e01c      	b.n	80033e6 <getsockopt+0x21e>
            *(uint16_t*)arg = sock_remained_size[sn];
 80033ac:	79fb      	ldrb	r3, [r7, #7]
 80033ae:	4a10      	ldr	r2, [pc, #64]	; (80033f0 <getsockopt+0x228>)
 80033b0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	801a      	strh	r2, [r3, #0]
         break;
 80033b8:	e015      	b.n	80033e6 <getsockopt+0x21e>
      case SO_PACKINFO:
         //CHECK_SOCKMODE(Sn_MR_TCP);
#if _WIZCHIP_ != 5300
         if((getSn_MR(sn) == Sn_MR_TCP))
 80033ba:	79fb      	ldrb	r3, [r7, #7]
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	3301      	adds	r3, #1
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7ff f966 	bl	8002694 <WIZCHIP_READ>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d102      	bne.n	80033d4 <getsockopt+0x20c>
             return SOCKERR_SOCKMODE;
 80033ce:	f06f 0304 	mvn.w	r3, #4
 80033d2:	e009      	b.n	80033e8 <getsockopt+0x220>
#endif
         *(uint8_t*)arg = sock_pack_info[sn];
 80033d4:	79fb      	ldrb	r3, [r7, #7]
 80033d6:	4a07      	ldr	r2, [pc, #28]	; (80033f4 <getsockopt+0x22c>)
 80033d8:	5cd2      	ldrb	r2, [r2, r3]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	701a      	strb	r2, [r3, #0]
         break;
 80033de:	e002      	b.n	80033e6 <getsockopt+0x21e>
      default:
         return SOCKERR_SOCKOPT;
 80033e0:	f06f 0301 	mvn.w	r3, #1
 80033e4:	e000      	b.n	80033e8 <getsockopt+0x220>
   }
   return SOCK_OK;
 80033e6:	2301      	movs	r3, #1
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd90      	pop	{r4, r7, pc}
 80033f0:	200000c0 	.word	0x200000c0
 80033f4:	200000d0 	.word	0x200000d0

080033f8 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	bf00      	nop
 80033fe:	46bd      	mov	sp, r7
 8003400:	bc80      	pop	{r7}
 8003402:	4770      	bx	lr

08003404 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
 8003408:	bf00      	nop
 800340a:	46bd      	mov	sp, r7
 800340c:	bc80      	pop	{r7}
 800340e:	4770      	bx	lr

08003410 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
 8003414:	bf00      	nop
 8003416:	46bd      	mov	sp, r7
 8003418:	bc80      	pop	{r7}
 800341a:	4770      	bx	lr

0800341c <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
 8003420:	bf00      	nop
 8003422:	46bd      	mov	sp, r7
 8003424:	bc80      	pop	{r7}
 8003426:	4770      	bx	lr

08003428 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	b2db      	uxtb	r3, r3
 8003436:	4618      	mov	r0, r3
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	bc80      	pop	{r7}
 800343e:	4770      	bx	lr

08003440 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	460b      	mov	r3, r1
 800344a:	70fb      	strb	r3, [r7, #3]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	78fa      	ldrb	r2, [r7, #3]
 8003450:	701a      	strb	r2, [r3, #0]
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	bc80      	pop	{r7}
 800345a:	4770      	bx	lr

0800345c <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
 8003460:	2300      	movs	r3, #0
 8003462:	4618      	mov	r0, r3
 8003464:	46bd      	mov	sp, r7
 8003466:	bc80      	pop	{r7}
 8003468:	4770      	bx	lr

0800346a <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 800346a:	b480      	push	{r7}
 800346c:	b083      	sub	sp, #12
 800346e:	af00      	add	r7, sp, #0
 8003470:	4603      	mov	r3, r0
 8003472:	71fb      	strb	r3, [r7, #7]
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	bc80      	pop	{r7}
 800347c:	4770      	bx	lr
	...

08003480 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d002      	beq.n	8003496 <reg_wizchip_cs_cbfunc+0x16>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d106      	bne.n	80034a4 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8003496:	4b09      	ldr	r3, [pc, #36]	; (80034bc <reg_wizchip_cs_cbfunc+0x3c>)
 8003498:	4a09      	ldr	r2, [pc, #36]	; (80034c0 <reg_wizchip_cs_cbfunc+0x40>)
 800349a:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 800349c:	4b07      	ldr	r3, [pc, #28]	; (80034bc <reg_wizchip_cs_cbfunc+0x3c>)
 800349e:	4a09      	ldr	r2, [pc, #36]	; (80034c4 <reg_wizchip_cs_cbfunc+0x44>)
 80034a0:	619a      	str	r2, [r3, #24]
 80034a2:	e005      	b.n	80034b0 <reg_wizchip_cs_cbfunc+0x30>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 80034a4:	4a05      	ldr	r2, [pc, #20]	; (80034bc <reg_wizchip_cs_cbfunc+0x3c>)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 80034aa:	4a04      	ldr	r2, [pc, #16]	; (80034bc <reg_wizchip_cs_cbfunc+0x3c>)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	6193      	str	r3, [r2, #24]
   }
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bc80      	pop	{r7}
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	2000000c 	.word	0x2000000c
 80034c0:	08003411 	.word	0x08003411
 80034c4:	0800341d 	.word	0x0800341d

080034c8 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80034d2:	bf00      	nop
 80034d4:	4b0e      	ldr	r3, [pc, #56]	; (8003510 <reg_wizchip_spi_cbfunc+0x48>)
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0f9      	beq.n	80034d4 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d002      	beq.n	80034ec <reg_wizchip_spi_cbfunc+0x24>
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d106      	bne.n	80034fa <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80034ec:	4b08      	ldr	r3, [pc, #32]	; (8003510 <reg_wizchip_spi_cbfunc+0x48>)
 80034ee:	4a09      	ldr	r2, [pc, #36]	; (8003514 <reg_wizchip_spi_cbfunc+0x4c>)
 80034f0:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80034f2:	4b07      	ldr	r3, [pc, #28]	; (8003510 <reg_wizchip_spi_cbfunc+0x48>)
 80034f4:	4a08      	ldr	r2, [pc, #32]	; (8003518 <reg_wizchip_spi_cbfunc+0x50>)
 80034f6:	621a      	str	r2, [r3, #32]
 80034f8:	e005      	b.n	8003506 <reg_wizchip_spi_cbfunc+0x3e>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80034fa:	4a05      	ldr	r2, [pc, #20]	; (8003510 <reg_wizchip_spi_cbfunc+0x48>)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8003500:	4a03      	ldr	r2, [pc, #12]	; (8003510 <reg_wizchip_spi_cbfunc+0x48>)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	6213      	str	r3, [r2, #32]
   }
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr
 8003510:	2000000c 	.word	0x2000000c
 8003514:	0800345d 	.word	0x0800345d
 8003518:	0800346b 	.word	0x0800346b

0800351c <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8003522:	1d3b      	adds	r3, r7, #4
 8003524:	2206      	movs	r2, #6
 8003526:	4619      	mov	r1, r3
 8003528:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800352c:	f7ff f94c 	bl	80027c8 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8003530:	f107 0314 	add.w	r3, r7, #20
 8003534:	2204      	movs	r2, #4
 8003536:	4619      	mov	r1, r3
 8003538:	f44f 7080 	mov.w	r0, #256	; 0x100
 800353c:	f7ff f944 	bl	80027c8 <WIZCHIP_READ_BUF>
 8003540:	f107 0310 	add.w	r3, r7, #16
 8003544:	2204      	movs	r2, #4
 8003546:	4619      	mov	r1, r3
 8003548:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800354c:	f7ff f93c 	bl	80027c8 <WIZCHIP_READ_BUF>
 8003550:	f107 030c 	add.w	r3, r7, #12
 8003554:	2204      	movs	r2, #4
 8003556:	4619      	mov	r1, r3
 8003558:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800355c:	f7ff f934 	bl	80027c8 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8003560:	2180      	movs	r1, #128	; 0x80
 8003562:	2000      	movs	r0, #0
 8003564:	f7ff f8e2 	bl	800272c <WIZCHIP_WRITE>
   getMR(); // for delay
 8003568:	2000      	movs	r0, #0
 800356a:	f7ff f893 	bl	8002694 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 800356e:	1d3b      	adds	r3, r7, #4
 8003570:	2206      	movs	r2, #6
 8003572:	4619      	mov	r1, r3
 8003574:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003578:	f7ff f986 	bl	8002888 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 800357c:	f107 0314 	add.w	r3, r7, #20
 8003580:	2204      	movs	r2, #4
 8003582:	4619      	mov	r1, r3
 8003584:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003588:	f7ff f97e 	bl	8002888 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 800358c:	f107 0310 	add.w	r3, r7, #16
 8003590:	2204      	movs	r2, #4
 8003592:	4619      	mov	r1, r3
 8003594:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003598:	f7ff f976 	bl	8002888 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800359c:	f107 030c 	add.w	r3, r7, #12
 80035a0:	2204      	movs	r2, #4
 80035a2:	4619      	mov	r1, r3
 80035a4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80035a8:	f7ff f96e 	bl	8002888 <WIZCHIP_WRITE_BUF>
}
 80035ac:	bf00      	nop
 80035ae:	3718      	adds	r7, #24
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 80035be:	2300      	movs	r3, #0
 80035c0:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 80035c2:	f7ff ffab 	bl	800351c <wizchip_sw_reset>
   if(txsize)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d03b      	beq.n	8003644 <wizchip_init+0x90>
   {
      tmp = 0;
 80035cc:	2300      	movs	r3, #0
 80035ce:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80035d0:	2300      	movs	r3, #0
 80035d2:	73fb      	strb	r3, [r7, #15]
 80035d4:	e015      	b.n	8003602 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 80035d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	4413      	add	r3, r2
 80035de:	781a      	ldrb	r2, [r3, #0]
 80035e0:	7bbb      	ldrb	r3, [r7, #14]
 80035e2:	4413      	add	r3, r2
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 80035e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80035ec:	2b10      	cmp	r3, #16
 80035ee:	dd02      	ble.n	80035f6 <wizchip_init+0x42>
 80035f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035f4:	e066      	b.n	80036c4 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80035f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	3301      	adds	r3, #1
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	73fb      	strb	r3, [r7, #15]
 8003602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003606:	2b07      	cmp	r3, #7
 8003608:	dde5      	ble.n	80035d6 <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800360a:	2300      	movs	r3, #0
 800360c:	73fb      	strb	r3, [r7, #15]
 800360e:	e015      	b.n	800363c <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8003610:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	3301      	adds	r3, #1
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800361e:	4618      	mov	r0, r3
 8003620:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	4413      	add	r3, r2
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	4619      	mov	r1, r3
 800362c:	f7ff f87e 	bl	800272c <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003630:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003634:	b2db      	uxtb	r3, r3
 8003636:	3301      	adds	r3, #1
 8003638:	b2db      	uxtb	r3, r3
 800363a:	73fb      	strb	r3, [r7, #15]
 800363c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003640:	2b07      	cmp	r3, #7
 8003642:	dde5      	ble.n	8003610 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d03b      	beq.n	80036c2 <wizchip_init+0x10e>
   {
      tmp = 0;
 800364a:	2300      	movs	r3, #0
 800364c:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800364e:	2300      	movs	r3, #0
 8003650:	73fb      	strb	r3, [r7, #15]
 8003652:	e015      	b.n	8003680 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8003654:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	4413      	add	r3, r2
 800365c:	781a      	ldrb	r2, [r3, #0]
 800365e:	7bbb      	ldrb	r3, [r7, #14]
 8003660:	4413      	add	r3, r2
 8003662:	b2db      	uxtb	r3, r3
 8003664:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8003666:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800366a:	2b10      	cmp	r3, #16
 800366c:	dd02      	ble.n	8003674 <wizchip_init+0xc0>
 800366e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003672:	e027      	b.n	80036c4 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003674:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003678:	b2db      	uxtb	r3, r3
 800367a:	3301      	adds	r3, #1
 800367c:	b2db      	uxtb	r3, r3
 800367e:	73fb      	strb	r3, [r7, #15]
 8003680:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003684:	2b07      	cmp	r3, #7
 8003686:	dde5      	ble.n	8003654 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003688:	2300      	movs	r3, #0
 800368a:	73fb      	strb	r3, [r7, #15]
 800368c:	e015      	b.n	80036ba <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800368e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	3301      	adds	r3, #1
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800369c:	4618      	mov	r0, r3
 800369e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	4413      	add	r3, r2
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	4619      	mov	r1, r3
 80036aa:	f7ff f83f 	bl	800272c <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80036ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	3301      	adds	r3, #1
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	73fb      	strb	r3, [r7, #15]
 80036ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036be:	2b07      	cmp	r3, #7
 80036c0:	dde5      	ble.n	800368e <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2206      	movs	r2, #6
 80036d8:	4619      	mov	r1, r3
 80036da:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80036de:	f7ff f8d3 	bl	8002888 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	330e      	adds	r3, #14
 80036e6:	2204      	movs	r2, #4
 80036e8:	4619      	mov	r1, r3
 80036ea:	f44f 7080 	mov.w	r0, #256	; 0x100
 80036ee:	f7ff f8cb 	bl	8002888 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	330a      	adds	r3, #10
 80036f6:	2204      	movs	r2, #4
 80036f8:	4619      	mov	r1, r3
 80036fa:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80036fe:	f7ff f8c3 	bl	8002888 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	3306      	adds	r3, #6
 8003706:	2204      	movs	r2, #4
 8003708:	4619      	mov	r1, r3
 800370a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800370e:	f7ff f8bb 	bl	8002888 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	7c9a      	ldrb	r2, [r3, #18]
 8003716:	4b0b      	ldr	r3, [pc, #44]	; (8003744 <wizchip_setnetinfo+0x78>)
 8003718:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	7cda      	ldrb	r2, [r3, #19]
 800371e:	4b09      	ldr	r3, [pc, #36]	; (8003744 <wizchip_setnetinfo+0x78>)
 8003720:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	7d1a      	ldrb	r2, [r3, #20]
 8003726:	4b07      	ldr	r3, [pc, #28]	; (8003744 <wizchip_setnetinfo+0x78>)
 8003728:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	7d5a      	ldrb	r2, [r3, #21]
 800372e:	4b05      	ldr	r3, [pc, #20]	; (8003744 <wizchip_setnetinfo+0x78>)
 8003730:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	7d9a      	ldrb	r2, [r3, #22]
 8003736:	4b04      	ldr	r3, [pc, #16]	; (8003748 <wizchip_setnetinfo+0x7c>)
 8003738:	701a      	strb	r2, [r3, #0]
}
 800373a:	bf00      	nop
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	200000d8 	.word	0x200000d8
 8003748:	200000dc 	.word	0x200000dc

0800374c <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2206      	movs	r2, #6
 8003758:	4619      	mov	r1, r3
 800375a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800375e:	f7ff f833 	bl	80027c8 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	330e      	adds	r3, #14
 8003766:	2204      	movs	r2, #4
 8003768:	4619      	mov	r1, r3
 800376a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800376e:	f7ff f82b 	bl	80027c8 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	330a      	adds	r3, #10
 8003776:	2204      	movs	r2, #4
 8003778:	4619      	mov	r1, r3
 800377a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800377e:	f7ff f823 	bl	80027c8 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	3306      	adds	r3, #6
 8003786:	2204      	movs	r2, #4
 8003788:	4619      	mov	r1, r3
 800378a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800378e:	f7ff f81b 	bl	80027c8 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8003792:	4b0c      	ldr	r3, [pc, #48]	; (80037c4 <wizchip_getnetinfo+0x78>)
 8003794:	781a      	ldrb	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 800379a:	4b0a      	ldr	r3, [pc, #40]	; (80037c4 <wizchip_getnetinfo+0x78>)
 800379c:	785a      	ldrb	r2, [r3, #1]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 80037a2:	4b08      	ldr	r3, [pc, #32]	; (80037c4 <wizchip_getnetinfo+0x78>)
 80037a4:	789a      	ldrb	r2, [r3, #2]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 80037aa:	4b06      	ldr	r3, [pc, #24]	; (80037c4 <wizchip_getnetinfo+0x78>)
 80037ac:	78da      	ldrb	r2, [r3, #3]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 80037b2:	4b05      	ldr	r3, [pc, #20]	; (80037c8 <wizchip_getnetinfo+0x7c>)
 80037b4:	781a      	ldrb	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	759a      	strb	r2, [r3, #22]
}
 80037ba:	bf00      	nop
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	200000d8 	.word	0x200000d8
 80037c8:	200000dc 	.word	0x200000dc

080037cc <__errno>:
 80037cc:	4b01      	ldr	r3, [pc, #4]	; (80037d4 <__errno+0x8>)
 80037ce:	6818      	ldr	r0, [r3, #0]
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	20000038 	.word	0x20000038

080037d8 <__libc_init_array>:
 80037d8:	b570      	push	{r4, r5, r6, lr}
 80037da:	2500      	movs	r5, #0
 80037dc:	4e0c      	ldr	r6, [pc, #48]	; (8003810 <__libc_init_array+0x38>)
 80037de:	4c0d      	ldr	r4, [pc, #52]	; (8003814 <__libc_init_array+0x3c>)
 80037e0:	1ba4      	subs	r4, r4, r6
 80037e2:	10a4      	asrs	r4, r4, #2
 80037e4:	42a5      	cmp	r5, r4
 80037e6:	d109      	bne.n	80037fc <__libc_init_array+0x24>
 80037e8:	f000 fc36 	bl	8004058 <_init>
 80037ec:	2500      	movs	r5, #0
 80037ee:	4e0a      	ldr	r6, [pc, #40]	; (8003818 <__libc_init_array+0x40>)
 80037f0:	4c0a      	ldr	r4, [pc, #40]	; (800381c <__libc_init_array+0x44>)
 80037f2:	1ba4      	subs	r4, r4, r6
 80037f4:	10a4      	asrs	r4, r4, #2
 80037f6:	42a5      	cmp	r5, r4
 80037f8:	d105      	bne.n	8003806 <__libc_init_array+0x2e>
 80037fa:	bd70      	pop	{r4, r5, r6, pc}
 80037fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003800:	4798      	blx	r3
 8003802:	3501      	adds	r5, #1
 8003804:	e7ee      	b.n	80037e4 <__libc_init_array+0xc>
 8003806:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800380a:	4798      	blx	r3
 800380c:	3501      	adds	r5, #1
 800380e:	e7f2      	b.n	80037f6 <__libc_init_array+0x1e>
 8003810:	08004330 	.word	0x08004330
 8003814:	08004330 	.word	0x08004330
 8003818:	08004330 	.word	0x08004330
 800381c:	08004334 	.word	0x08004334

08003820 <memcpy>:
 8003820:	b510      	push	{r4, lr}
 8003822:	1e43      	subs	r3, r0, #1
 8003824:	440a      	add	r2, r1
 8003826:	4291      	cmp	r1, r2
 8003828:	d100      	bne.n	800382c <memcpy+0xc>
 800382a:	bd10      	pop	{r4, pc}
 800382c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003830:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003834:	e7f7      	b.n	8003826 <memcpy+0x6>

08003836 <memset>:
 8003836:	4603      	mov	r3, r0
 8003838:	4402      	add	r2, r0
 800383a:	4293      	cmp	r3, r2
 800383c:	d100      	bne.n	8003840 <memset+0xa>
 800383e:	4770      	bx	lr
 8003840:	f803 1b01 	strb.w	r1, [r3], #1
 8003844:	e7f9      	b.n	800383a <memset+0x4>
	...

08003848 <_free_r>:
 8003848:	b538      	push	{r3, r4, r5, lr}
 800384a:	4605      	mov	r5, r0
 800384c:	2900      	cmp	r1, #0
 800384e:	d043      	beq.n	80038d8 <_free_r+0x90>
 8003850:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003854:	1f0c      	subs	r4, r1, #4
 8003856:	2b00      	cmp	r3, #0
 8003858:	bfb8      	it	lt
 800385a:	18e4      	addlt	r4, r4, r3
 800385c:	f000 f8ca 	bl	80039f4 <__malloc_lock>
 8003860:	4a1e      	ldr	r2, [pc, #120]	; (80038dc <_free_r+0x94>)
 8003862:	6813      	ldr	r3, [r2, #0]
 8003864:	4610      	mov	r0, r2
 8003866:	b933      	cbnz	r3, 8003876 <_free_r+0x2e>
 8003868:	6063      	str	r3, [r4, #4]
 800386a:	6014      	str	r4, [r2, #0]
 800386c:	4628      	mov	r0, r5
 800386e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003872:	f000 b8c0 	b.w	80039f6 <__malloc_unlock>
 8003876:	42a3      	cmp	r3, r4
 8003878:	d90b      	bls.n	8003892 <_free_r+0x4a>
 800387a:	6821      	ldr	r1, [r4, #0]
 800387c:	1862      	adds	r2, r4, r1
 800387e:	4293      	cmp	r3, r2
 8003880:	bf01      	itttt	eq
 8003882:	681a      	ldreq	r2, [r3, #0]
 8003884:	685b      	ldreq	r3, [r3, #4]
 8003886:	1852      	addeq	r2, r2, r1
 8003888:	6022      	streq	r2, [r4, #0]
 800388a:	6063      	str	r3, [r4, #4]
 800388c:	6004      	str	r4, [r0, #0]
 800388e:	e7ed      	b.n	800386c <_free_r+0x24>
 8003890:	4613      	mov	r3, r2
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	b10a      	cbz	r2, 800389a <_free_r+0x52>
 8003896:	42a2      	cmp	r2, r4
 8003898:	d9fa      	bls.n	8003890 <_free_r+0x48>
 800389a:	6819      	ldr	r1, [r3, #0]
 800389c:	1858      	adds	r0, r3, r1
 800389e:	42a0      	cmp	r0, r4
 80038a0:	d10b      	bne.n	80038ba <_free_r+0x72>
 80038a2:	6820      	ldr	r0, [r4, #0]
 80038a4:	4401      	add	r1, r0
 80038a6:	1858      	adds	r0, r3, r1
 80038a8:	4282      	cmp	r2, r0
 80038aa:	6019      	str	r1, [r3, #0]
 80038ac:	d1de      	bne.n	800386c <_free_r+0x24>
 80038ae:	6810      	ldr	r0, [r2, #0]
 80038b0:	6852      	ldr	r2, [r2, #4]
 80038b2:	4401      	add	r1, r0
 80038b4:	6019      	str	r1, [r3, #0]
 80038b6:	605a      	str	r2, [r3, #4]
 80038b8:	e7d8      	b.n	800386c <_free_r+0x24>
 80038ba:	d902      	bls.n	80038c2 <_free_r+0x7a>
 80038bc:	230c      	movs	r3, #12
 80038be:	602b      	str	r3, [r5, #0]
 80038c0:	e7d4      	b.n	800386c <_free_r+0x24>
 80038c2:	6820      	ldr	r0, [r4, #0]
 80038c4:	1821      	adds	r1, r4, r0
 80038c6:	428a      	cmp	r2, r1
 80038c8:	bf01      	itttt	eq
 80038ca:	6811      	ldreq	r1, [r2, #0]
 80038cc:	6852      	ldreq	r2, [r2, #4]
 80038ce:	1809      	addeq	r1, r1, r0
 80038d0:	6021      	streq	r1, [r4, #0]
 80038d2:	6062      	str	r2, [r4, #4]
 80038d4:	605c      	str	r4, [r3, #4]
 80038d6:	e7c9      	b.n	800386c <_free_r+0x24>
 80038d8:	bd38      	pop	{r3, r4, r5, pc}
 80038da:	bf00      	nop
 80038dc:	200000e0 	.word	0x200000e0

080038e0 <_malloc_r>:
 80038e0:	b570      	push	{r4, r5, r6, lr}
 80038e2:	1ccd      	adds	r5, r1, #3
 80038e4:	f025 0503 	bic.w	r5, r5, #3
 80038e8:	3508      	adds	r5, #8
 80038ea:	2d0c      	cmp	r5, #12
 80038ec:	bf38      	it	cc
 80038ee:	250c      	movcc	r5, #12
 80038f0:	2d00      	cmp	r5, #0
 80038f2:	4606      	mov	r6, r0
 80038f4:	db01      	blt.n	80038fa <_malloc_r+0x1a>
 80038f6:	42a9      	cmp	r1, r5
 80038f8:	d903      	bls.n	8003902 <_malloc_r+0x22>
 80038fa:	230c      	movs	r3, #12
 80038fc:	6033      	str	r3, [r6, #0]
 80038fe:	2000      	movs	r0, #0
 8003900:	bd70      	pop	{r4, r5, r6, pc}
 8003902:	f000 f877 	bl	80039f4 <__malloc_lock>
 8003906:	4a21      	ldr	r2, [pc, #132]	; (800398c <_malloc_r+0xac>)
 8003908:	6814      	ldr	r4, [r2, #0]
 800390a:	4621      	mov	r1, r4
 800390c:	b991      	cbnz	r1, 8003934 <_malloc_r+0x54>
 800390e:	4c20      	ldr	r4, [pc, #128]	; (8003990 <_malloc_r+0xb0>)
 8003910:	6823      	ldr	r3, [r4, #0]
 8003912:	b91b      	cbnz	r3, 800391c <_malloc_r+0x3c>
 8003914:	4630      	mov	r0, r6
 8003916:	f000 f83d 	bl	8003994 <_sbrk_r>
 800391a:	6020      	str	r0, [r4, #0]
 800391c:	4629      	mov	r1, r5
 800391e:	4630      	mov	r0, r6
 8003920:	f000 f838 	bl	8003994 <_sbrk_r>
 8003924:	1c43      	adds	r3, r0, #1
 8003926:	d124      	bne.n	8003972 <_malloc_r+0x92>
 8003928:	230c      	movs	r3, #12
 800392a:	4630      	mov	r0, r6
 800392c:	6033      	str	r3, [r6, #0]
 800392e:	f000 f862 	bl	80039f6 <__malloc_unlock>
 8003932:	e7e4      	b.n	80038fe <_malloc_r+0x1e>
 8003934:	680b      	ldr	r3, [r1, #0]
 8003936:	1b5b      	subs	r3, r3, r5
 8003938:	d418      	bmi.n	800396c <_malloc_r+0x8c>
 800393a:	2b0b      	cmp	r3, #11
 800393c:	d90f      	bls.n	800395e <_malloc_r+0x7e>
 800393e:	600b      	str	r3, [r1, #0]
 8003940:	18cc      	adds	r4, r1, r3
 8003942:	50cd      	str	r5, [r1, r3]
 8003944:	4630      	mov	r0, r6
 8003946:	f000 f856 	bl	80039f6 <__malloc_unlock>
 800394a:	f104 000b 	add.w	r0, r4, #11
 800394e:	1d23      	adds	r3, r4, #4
 8003950:	f020 0007 	bic.w	r0, r0, #7
 8003954:	1ac3      	subs	r3, r0, r3
 8003956:	d0d3      	beq.n	8003900 <_malloc_r+0x20>
 8003958:	425a      	negs	r2, r3
 800395a:	50e2      	str	r2, [r4, r3]
 800395c:	e7d0      	b.n	8003900 <_malloc_r+0x20>
 800395e:	684b      	ldr	r3, [r1, #4]
 8003960:	428c      	cmp	r4, r1
 8003962:	bf16      	itet	ne
 8003964:	6063      	strne	r3, [r4, #4]
 8003966:	6013      	streq	r3, [r2, #0]
 8003968:	460c      	movne	r4, r1
 800396a:	e7eb      	b.n	8003944 <_malloc_r+0x64>
 800396c:	460c      	mov	r4, r1
 800396e:	6849      	ldr	r1, [r1, #4]
 8003970:	e7cc      	b.n	800390c <_malloc_r+0x2c>
 8003972:	1cc4      	adds	r4, r0, #3
 8003974:	f024 0403 	bic.w	r4, r4, #3
 8003978:	42a0      	cmp	r0, r4
 800397a:	d005      	beq.n	8003988 <_malloc_r+0xa8>
 800397c:	1a21      	subs	r1, r4, r0
 800397e:	4630      	mov	r0, r6
 8003980:	f000 f808 	bl	8003994 <_sbrk_r>
 8003984:	3001      	adds	r0, #1
 8003986:	d0cf      	beq.n	8003928 <_malloc_r+0x48>
 8003988:	6025      	str	r5, [r4, #0]
 800398a:	e7db      	b.n	8003944 <_malloc_r+0x64>
 800398c:	200000e0 	.word	0x200000e0
 8003990:	200000e4 	.word	0x200000e4

08003994 <_sbrk_r>:
 8003994:	b538      	push	{r3, r4, r5, lr}
 8003996:	2300      	movs	r3, #0
 8003998:	4c05      	ldr	r4, [pc, #20]	; (80039b0 <_sbrk_r+0x1c>)
 800399a:	4605      	mov	r5, r0
 800399c:	4608      	mov	r0, r1
 800399e:	6023      	str	r3, [r4, #0]
 80039a0:	f7fc ffd8 	bl	8000954 <_sbrk>
 80039a4:	1c43      	adds	r3, r0, #1
 80039a6:	d102      	bne.n	80039ae <_sbrk_r+0x1a>
 80039a8:	6823      	ldr	r3, [r4, #0]
 80039aa:	b103      	cbz	r3, 80039ae <_sbrk_r+0x1a>
 80039ac:	602b      	str	r3, [r5, #0]
 80039ae:	bd38      	pop	{r3, r4, r5, pc}
 80039b0:	200001c0 	.word	0x200001c0

080039b4 <siprintf>:
 80039b4:	b40e      	push	{r1, r2, r3}
 80039b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80039ba:	b500      	push	{lr}
 80039bc:	b09c      	sub	sp, #112	; 0x70
 80039be:	ab1d      	add	r3, sp, #116	; 0x74
 80039c0:	9002      	str	r0, [sp, #8]
 80039c2:	9006      	str	r0, [sp, #24]
 80039c4:	9107      	str	r1, [sp, #28]
 80039c6:	9104      	str	r1, [sp, #16]
 80039c8:	4808      	ldr	r0, [pc, #32]	; (80039ec <siprintf+0x38>)
 80039ca:	4909      	ldr	r1, [pc, #36]	; (80039f0 <siprintf+0x3c>)
 80039cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80039d0:	9105      	str	r1, [sp, #20]
 80039d2:	6800      	ldr	r0, [r0, #0]
 80039d4:	a902      	add	r1, sp, #8
 80039d6:	9301      	str	r3, [sp, #4]
 80039d8:	f000 f868 	bl	8003aac <_svfiprintf_r>
 80039dc:	2200      	movs	r2, #0
 80039de:	9b02      	ldr	r3, [sp, #8]
 80039e0:	701a      	strb	r2, [r3, #0]
 80039e2:	b01c      	add	sp, #112	; 0x70
 80039e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80039e8:	b003      	add	sp, #12
 80039ea:	4770      	bx	lr
 80039ec:	20000038 	.word	0x20000038
 80039f0:	ffff0208 	.word	0xffff0208

080039f4 <__malloc_lock>:
 80039f4:	4770      	bx	lr

080039f6 <__malloc_unlock>:
 80039f6:	4770      	bx	lr

080039f8 <__ssputs_r>:
 80039f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039fc:	688e      	ldr	r6, [r1, #8]
 80039fe:	4682      	mov	sl, r0
 8003a00:	429e      	cmp	r6, r3
 8003a02:	460c      	mov	r4, r1
 8003a04:	4690      	mov	r8, r2
 8003a06:	4699      	mov	r9, r3
 8003a08:	d837      	bhi.n	8003a7a <__ssputs_r+0x82>
 8003a0a:	898a      	ldrh	r2, [r1, #12]
 8003a0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a10:	d031      	beq.n	8003a76 <__ssputs_r+0x7e>
 8003a12:	2302      	movs	r3, #2
 8003a14:	6825      	ldr	r5, [r4, #0]
 8003a16:	6909      	ldr	r1, [r1, #16]
 8003a18:	1a6f      	subs	r7, r5, r1
 8003a1a:	6965      	ldr	r5, [r4, #20]
 8003a1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a20:	fb95 f5f3 	sdiv	r5, r5, r3
 8003a24:	f109 0301 	add.w	r3, r9, #1
 8003a28:	443b      	add	r3, r7
 8003a2a:	429d      	cmp	r5, r3
 8003a2c:	bf38      	it	cc
 8003a2e:	461d      	movcc	r5, r3
 8003a30:	0553      	lsls	r3, r2, #21
 8003a32:	d530      	bpl.n	8003a96 <__ssputs_r+0x9e>
 8003a34:	4629      	mov	r1, r5
 8003a36:	f7ff ff53 	bl	80038e0 <_malloc_r>
 8003a3a:	4606      	mov	r6, r0
 8003a3c:	b950      	cbnz	r0, 8003a54 <__ssputs_r+0x5c>
 8003a3e:	230c      	movs	r3, #12
 8003a40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a44:	f8ca 3000 	str.w	r3, [sl]
 8003a48:	89a3      	ldrh	r3, [r4, #12]
 8003a4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a4e:	81a3      	strh	r3, [r4, #12]
 8003a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a54:	463a      	mov	r2, r7
 8003a56:	6921      	ldr	r1, [r4, #16]
 8003a58:	f7ff fee2 	bl	8003820 <memcpy>
 8003a5c:	89a3      	ldrh	r3, [r4, #12]
 8003a5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a66:	81a3      	strh	r3, [r4, #12]
 8003a68:	6126      	str	r6, [r4, #16]
 8003a6a:	443e      	add	r6, r7
 8003a6c:	6026      	str	r6, [r4, #0]
 8003a6e:	464e      	mov	r6, r9
 8003a70:	6165      	str	r5, [r4, #20]
 8003a72:	1bed      	subs	r5, r5, r7
 8003a74:	60a5      	str	r5, [r4, #8]
 8003a76:	454e      	cmp	r6, r9
 8003a78:	d900      	bls.n	8003a7c <__ssputs_r+0x84>
 8003a7a:	464e      	mov	r6, r9
 8003a7c:	4632      	mov	r2, r6
 8003a7e:	4641      	mov	r1, r8
 8003a80:	6820      	ldr	r0, [r4, #0]
 8003a82:	f000 faa1 	bl	8003fc8 <memmove>
 8003a86:	68a3      	ldr	r3, [r4, #8]
 8003a88:	2000      	movs	r0, #0
 8003a8a:	1b9b      	subs	r3, r3, r6
 8003a8c:	60a3      	str	r3, [r4, #8]
 8003a8e:	6823      	ldr	r3, [r4, #0]
 8003a90:	441e      	add	r6, r3
 8003a92:	6026      	str	r6, [r4, #0]
 8003a94:	e7dc      	b.n	8003a50 <__ssputs_r+0x58>
 8003a96:	462a      	mov	r2, r5
 8003a98:	f000 faaf 	bl	8003ffa <_realloc_r>
 8003a9c:	4606      	mov	r6, r0
 8003a9e:	2800      	cmp	r0, #0
 8003aa0:	d1e2      	bne.n	8003a68 <__ssputs_r+0x70>
 8003aa2:	6921      	ldr	r1, [r4, #16]
 8003aa4:	4650      	mov	r0, sl
 8003aa6:	f7ff fecf 	bl	8003848 <_free_r>
 8003aaa:	e7c8      	b.n	8003a3e <__ssputs_r+0x46>

08003aac <_svfiprintf_r>:
 8003aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ab0:	461d      	mov	r5, r3
 8003ab2:	898b      	ldrh	r3, [r1, #12]
 8003ab4:	b09d      	sub	sp, #116	; 0x74
 8003ab6:	061f      	lsls	r7, r3, #24
 8003ab8:	4680      	mov	r8, r0
 8003aba:	460c      	mov	r4, r1
 8003abc:	4616      	mov	r6, r2
 8003abe:	d50f      	bpl.n	8003ae0 <_svfiprintf_r+0x34>
 8003ac0:	690b      	ldr	r3, [r1, #16]
 8003ac2:	b96b      	cbnz	r3, 8003ae0 <_svfiprintf_r+0x34>
 8003ac4:	2140      	movs	r1, #64	; 0x40
 8003ac6:	f7ff ff0b 	bl	80038e0 <_malloc_r>
 8003aca:	6020      	str	r0, [r4, #0]
 8003acc:	6120      	str	r0, [r4, #16]
 8003ace:	b928      	cbnz	r0, 8003adc <_svfiprintf_r+0x30>
 8003ad0:	230c      	movs	r3, #12
 8003ad2:	f8c8 3000 	str.w	r3, [r8]
 8003ad6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ada:	e0c8      	b.n	8003c6e <_svfiprintf_r+0x1c2>
 8003adc:	2340      	movs	r3, #64	; 0x40
 8003ade:	6163      	str	r3, [r4, #20]
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	9309      	str	r3, [sp, #36]	; 0x24
 8003ae4:	2320      	movs	r3, #32
 8003ae6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003aea:	2330      	movs	r3, #48	; 0x30
 8003aec:	f04f 0b01 	mov.w	fp, #1
 8003af0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003af4:	9503      	str	r5, [sp, #12]
 8003af6:	4637      	mov	r7, r6
 8003af8:	463d      	mov	r5, r7
 8003afa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003afe:	b10b      	cbz	r3, 8003b04 <_svfiprintf_r+0x58>
 8003b00:	2b25      	cmp	r3, #37	; 0x25
 8003b02:	d13e      	bne.n	8003b82 <_svfiprintf_r+0xd6>
 8003b04:	ebb7 0a06 	subs.w	sl, r7, r6
 8003b08:	d00b      	beq.n	8003b22 <_svfiprintf_r+0x76>
 8003b0a:	4653      	mov	r3, sl
 8003b0c:	4632      	mov	r2, r6
 8003b0e:	4621      	mov	r1, r4
 8003b10:	4640      	mov	r0, r8
 8003b12:	f7ff ff71 	bl	80039f8 <__ssputs_r>
 8003b16:	3001      	adds	r0, #1
 8003b18:	f000 80a4 	beq.w	8003c64 <_svfiprintf_r+0x1b8>
 8003b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b1e:	4453      	add	r3, sl
 8003b20:	9309      	str	r3, [sp, #36]	; 0x24
 8003b22:	783b      	ldrb	r3, [r7, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 809d 	beq.w	8003c64 <_svfiprintf_r+0x1b8>
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b34:	9304      	str	r3, [sp, #16]
 8003b36:	9307      	str	r3, [sp, #28]
 8003b38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b3c:	931a      	str	r3, [sp, #104]	; 0x68
 8003b3e:	462f      	mov	r7, r5
 8003b40:	2205      	movs	r2, #5
 8003b42:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003b46:	4850      	ldr	r0, [pc, #320]	; (8003c88 <_svfiprintf_r+0x1dc>)
 8003b48:	f000 fa30 	bl	8003fac <memchr>
 8003b4c:	9b04      	ldr	r3, [sp, #16]
 8003b4e:	b9d0      	cbnz	r0, 8003b86 <_svfiprintf_r+0xda>
 8003b50:	06d9      	lsls	r1, r3, #27
 8003b52:	bf44      	itt	mi
 8003b54:	2220      	movmi	r2, #32
 8003b56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003b5a:	071a      	lsls	r2, r3, #28
 8003b5c:	bf44      	itt	mi
 8003b5e:	222b      	movmi	r2, #43	; 0x2b
 8003b60:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003b64:	782a      	ldrb	r2, [r5, #0]
 8003b66:	2a2a      	cmp	r2, #42	; 0x2a
 8003b68:	d015      	beq.n	8003b96 <_svfiprintf_r+0xea>
 8003b6a:	462f      	mov	r7, r5
 8003b6c:	2000      	movs	r0, #0
 8003b6e:	250a      	movs	r5, #10
 8003b70:	9a07      	ldr	r2, [sp, #28]
 8003b72:	4639      	mov	r1, r7
 8003b74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b78:	3b30      	subs	r3, #48	; 0x30
 8003b7a:	2b09      	cmp	r3, #9
 8003b7c:	d94d      	bls.n	8003c1a <_svfiprintf_r+0x16e>
 8003b7e:	b1b8      	cbz	r0, 8003bb0 <_svfiprintf_r+0x104>
 8003b80:	e00f      	b.n	8003ba2 <_svfiprintf_r+0xf6>
 8003b82:	462f      	mov	r7, r5
 8003b84:	e7b8      	b.n	8003af8 <_svfiprintf_r+0x4c>
 8003b86:	4a40      	ldr	r2, [pc, #256]	; (8003c88 <_svfiprintf_r+0x1dc>)
 8003b88:	463d      	mov	r5, r7
 8003b8a:	1a80      	subs	r0, r0, r2
 8003b8c:	fa0b f000 	lsl.w	r0, fp, r0
 8003b90:	4318      	orrs	r0, r3
 8003b92:	9004      	str	r0, [sp, #16]
 8003b94:	e7d3      	b.n	8003b3e <_svfiprintf_r+0x92>
 8003b96:	9a03      	ldr	r2, [sp, #12]
 8003b98:	1d11      	adds	r1, r2, #4
 8003b9a:	6812      	ldr	r2, [r2, #0]
 8003b9c:	9103      	str	r1, [sp, #12]
 8003b9e:	2a00      	cmp	r2, #0
 8003ba0:	db01      	blt.n	8003ba6 <_svfiprintf_r+0xfa>
 8003ba2:	9207      	str	r2, [sp, #28]
 8003ba4:	e004      	b.n	8003bb0 <_svfiprintf_r+0x104>
 8003ba6:	4252      	negs	r2, r2
 8003ba8:	f043 0302 	orr.w	r3, r3, #2
 8003bac:	9207      	str	r2, [sp, #28]
 8003bae:	9304      	str	r3, [sp, #16]
 8003bb0:	783b      	ldrb	r3, [r7, #0]
 8003bb2:	2b2e      	cmp	r3, #46	; 0x2e
 8003bb4:	d10c      	bne.n	8003bd0 <_svfiprintf_r+0x124>
 8003bb6:	787b      	ldrb	r3, [r7, #1]
 8003bb8:	2b2a      	cmp	r3, #42	; 0x2a
 8003bba:	d133      	bne.n	8003c24 <_svfiprintf_r+0x178>
 8003bbc:	9b03      	ldr	r3, [sp, #12]
 8003bbe:	3702      	adds	r7, #2
 8003bc0:	1d1a      	adds	r2, r3, #4
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	9203      	str	r2, [sp, #12]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	bfb8      	it	lt
 8003bca:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003bce:	9305      	str	r3, [sp, #20]
 8003bd0:	4d2e      	ldr	r5, [pc, #184]	; (8003c8c <_svfiprintf_r+0x1e0>)
 8003bd2:	2203      	movs	r2, #3
 8003bd4:	7839      	ldrb	r1, [r7, #0]
 8003bd6:	4628      	mov	r0, r5
 8003bd8:	f000 f9e8 	bl	8003fac <memchr>
 8003bdc:	b138      	cbz	r0, 8003bee <_svfiprintf_r+0x142>
 8003bde:	2340      	movs	r3, #64	; 0x40
 8003be0:	1b40      	subs	r0, r0, r5
 8003be2:	fa03 f000 	lsl.w	r0, r3, r0
 8003be6:	9b04      	ldr	r3, [sp, #16]
 8003be8:	3701      	adds	r7, #1
 8003bea:	4303      	orrs	r3, r0
 8003bec:	9304      	str	r3, [sp, #16]
 8003bee:	7839      	ldrb	r1, [r7, #0]
 8003bf0:	2206      	movs	r2, #6
 8003bf2:	4827      	ldr	r0, [pc, #156]	; (8003c90 <_svfiprintf_r+0x1e4>)
 8003bf4:	1c7e      	adds	r6, r7, #1
 8003bf6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003bfa:	f000 f9d7 	bl	8003fac <memchr>
 8003bfe:	2800      	cmp	r0, #0
 8003c00:	d038      	beq.n	8003c74 <_svfiprintf_r+0x1c8>
 8003c02:	4b24      	ldr	r3, [pc, #144]	; (8003c94 <_svfiprintf_r+0x1e8>)
 8003c04:	bb13      	cbnz	r3, 8003c4c <_svfiprintf_r+0x1a0>
 8003c06:	9b03      	ldr	r3, [sp, #12]
 8003c08:	3307      	adds	r3, #7
 8003c0a:	f023 0307 	bic.w	r3, r3, #7
 8003c0e:	3308      	adds	r3, #8
 8003c10:	9303      	str	r3, [sp, #12]
 8003c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c14:	444b      	add	r3, r9
 8003c16:	9309      	str	r3, [sp, #36]	; 0x24
 8003c18:	e76d      	b.n	8003af6 <_svfiprintf_r+0x4a>
 8003c1a:	fb05 3202 	mla	r2, r5, r2, r3
 8003c1e:	2001      	movs	r0, #1
 8003c20:	460f      	mov	r7, r1
 8003c22:	e7a6      	b.n	8003b72 <_svfiprintf_r+0xc6>
 8003c24:	2300      	movs	r3, #0
 8003c26:	250a      	movs	r5, #10
 8003c28:	4619      	mov	r1, r3
 8003c2a:	3701      	adds	r7, #1
 8003c2c:	9305      	str	r3, [sp, #20]
 8003c2e:	4638      	mov	r0, r7
 8003c30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c34:	3a30      	subs	r2, #48	; 0x30
 8003c36:	2a09      	cmp	r2, #9
 8003c38:	d903      	bls.n	8003c42 <_svfiprintf_r+0x196>
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d0c8      	beq.n	8003bd0 <_svfiprintf_r+0x124>
 8003c3e:	9105      	str	r1, [sp, #20]
 8003c40:	e7c6      	b.n	8003bd0 <_svfiprintf_r+0x124>
 8003c42:	fb05 2101 	mla	r1, r5, r1, r2
 8003c46:	2301      	movs	r3, #1
 8003c48:	4607      	mov	r7, r0
 8003c4a:	e7f0      	b.n	8003c2e <_svfiprintf_r+0x182>
 8003c4c:	ab03      	add	r3, sp, #12
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	4622      	mov	r2, r4
 8003c52:	4b11      	ldr	r3, [pc, #68]	; (8003c98 <_svfiprintf_r+0x1ec>)
 8003c54:	a904      	add	r1, sp, #16
 8003c56:	4640      	mov	r0, r8
 8003c58:	f3af 8000 	nop.w
 8003c5c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003c60:	4681      	mov	r9, r0
 8003c62:	d1d6      	bne.n	8003c12 <_svfiprintf_r+0x166>
 8003c64:	89a3      	ldrh	r3, [r4, #12]
 8003c66:	065b      	lsls	r3, r3, #25
 8003c68:	f53f af35 	bmi.w	8003ad6 <_svfiprintf_r+0x2a>
 8003c6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c6e:	b01d      	add	sp, #116	; 0x74
 8003c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c74:	ab03      	add	r3, sp, #12
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	4622      	mov	r2, r4
 8003c7a:	4b07      	ldr	r3, [pc, #28]	; (8003c98 <_svfiprintf_r+0x1ec>)
 8003c7c:	a904      	add	r1, sp, #16
 8003c7e:	4640      	mov	r0, r8
 8003c80:	f000 f882 	bl	8003d88 <_printf_i>
 8003c84:	e7ea      	b.n	8003c5c <_svfiprintf_r+0x1b0>
 8003c86:	bf00      	nop
 8003c88:	080042fc 	.word	0x080042fc
 8003c8c:	08004302 	.word	0x08004302
 8003c90:	08004306 	.word	0x08004306
 8003c94:	00000000 	.word	0x00000000
 8003c98:	080039f9 	.word	0x080039f9

08003c9c <_printf_common>:
 8003c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ca0:	4691      	mov	r9, r2
 8003ca2:	461f      	mov	r7, r3
 8003ca4:	688a      	ldr	r2, [r1, #8]
 8003ca6:	690b      	ldr	r3, [r1, #16]
 8003ca8:	4606      	mov	r6, r0
 8003caa:	4293      	cmp	r3, r2
 8003cac:	bfb8      	it	lt
 8003cae:	4613      	movlt	r3, r2
 8003cb0:	f8c9 3000 	str.w	r3, [r9]
 8003cb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003cb8:	460c      	mov	r4, r1
 8003cba:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003cbe:	b112      	cbz	r2, 8003cc6 <_printf_common+0x2a>
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	f8c9 3000 	str.w	r3, [r9]
 8003cc6:	6823      	ldr	r3, [r4, #0]
 8003cc8:	0699      	lsls	r1, r3, #26
 8003cca:	bf42      	ittt	mi
 8003ccc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003cd0:	3302      	addmi	r3, #2
 8003cd2:	f8c9 3000 	strmi.w	r3, [r9]
 8003cd6:	6825      	ldr	r5, [r4, #0]
 8003cd8:	f015 0506 	ands.w	r5, r5, #6
 8003cdc:	d107      	bne.n	8003cee <_printf_common+0x52>
 8003cde:	f104 0a19 	add.w	sl, r4, #25
 8003ce2:	68e3      	ldr	r3, [r4, #12]
 8003ce4:	f8d9 2000 	ldr.w	r2, [r9]
 8003ce8:	1a9b      	subs	r3, r3, r2
 8003cea:	42ab      	cmp	r3, r5
 8003cec:	dc29      	bgt.n	8003d42 <_printf_common+0xa6>
 8003cee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003cf2:	6822      	ldr	r2, [r4, #0]
 8003cf4:	3300      	adds	r3, #0
 8003cf6:	bf18      	it	ne
 8003cf8:	2301      	movne	r3, #1
 8003cfa:	0692      	lsls	r2, r2, #26
 8003cfc:	d42e      	bmi.n	8003d5c <_printf_common+0xc0>
 8003cfe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d02:	4639      	mov	r1, r7
 8003d04:	4630      	mov	r0, r6
 8003d06:	47c0      	blx	r8
 8003d08:	3001      	adds	r0, #1
 8003d0a:	d021      	beq.n	8003d50 <_printf_common+0xb4>
 8003d0c:	6823      	ldr	r3, [r4, #0]
 8003d0e:	68e5      	ldr	r5, [r4, #12]
 8003d10:	f003 0306 	and.w	r3, r3, #6
 8003d14:	2b04      	cmp	r3, #4
 8003d16:	bf18      	it	ne
 8003d18:	2500      	movne	r5, #0
 8003d1a:	f8d9 2000 	ldr.w	r2, [r9]
 8003d1e:	f04f 0900 	mov.w	r9, #0
 8003d22:	bf08      	it	eq
 8003d24:	1aad      	subeq	r5, r5, r2
 8003d26:	68a3      	ldr	r3, [r4, #8]
 8003d28:	6922      	ldr	r2, [r4, #16]
 8003d2a:	bf08      	it	eq
 8003d2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d30:	4293      	cmp	r3, r2
 8003d32:	bfc4      	itt	gt
 8003d34:	1a9b      	subgt	r3, r3, r2
 8003d36:	18ed      	addgt	r5, r5, r3
 8003d38:	341a      	adds	r4, #26
 8003d3a:	454d      	cmp	r5, r9
 8003d3c:	d11a      	bne.n	8003d74 <_printf_common+0xd8>
 8003d3e:	2000      	movs	r0, #0
 8003d40:	e008      	b.n	8003d54 <_printf_common+0xb8>
 8003d42:	2301      	movs	r3, #1
 8003d44:	4652      	mov	r2, sl
 8003d46:	4639      	mov	r1, r7
 8003d48:	4630      	mov	r0, r6
 8003d4a:	47c0      	blx	r8
 8003d4c:	3001      	adds	r0, #1
 8003d4e:	d103      	bne.n	8003d58 <_printf_common+0xbc>
 8003d50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d58:	3501      	adds	r5, #1
 8003d5a:	e7c2      	b.n	8003ce2 <_printf_common+0x46>
 8003d5c:	2030      	movs	r0, #48	; 0x30
 8003d5e:	18e1      	adds	r1, r4, r3
 8003d60:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d64:	1c5a      	adds	r2, r3, #1
 8003d66:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d6a:	4422      	add	r2, r4
 8003d6c:	3302      	adds	r3, #2
 8003d6e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d72:	e7c4      	b.n	8003cfe <_printf_common+0x62>
 8003d74:	2301      	movs	r3, #1
 8003d76:	4622      	mov	r2, r4
 8003d78:	4639      	mov	r1, r7
 8003d7a:	4630      	mov	r0, r6
 8003d7c:	47c0      	blx	r8
 8003d7e:	3001      	adds	r0, #1
 8003d80:	d0e6      	beq.n	8003d50 <_printf_common+0xb4>
 8003d82:	f109 0901 	add.w	r9, r9, #1
 8003d86:	e7d8      	b.n	8003d3a <_printf_common+0x9e>

08003d88 <_printf_i>:
 8003d88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d8c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003d90:	460c      	mov	r4, r1
 8003d92:	7e09      	ldrb	r1, [r1, #24]
 8003d94:	b085      	sub	sp, #20
 8003d96:	296e      	cmp	r1, #110	; 0x6e
 8003d98:	4617      	mov	r7, r2
 8003d9a:	4606      	mov	r6, r0
 8003d9c:	4698      	mov	r8, r3
 8003d9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003da0:	f000 80b3 	beq.w	8003f0a <_printf_i+0x182>
 8003da4:	d822      	bhi.n	8003dec <_printf_i+0x64>
 8003da6:	2963      	cmp	r1, #99	; 0x63
 8003da8:	d036      	beq.n	8003e18 <_printf_i+0x90>
 8003daa:	d80a      	bhi.n	8003dc2 <_printf_i+0x3a>
 8003dac:	2900      	cmp	r1, #0
 8003dae:	f000 80b9 	beq.w	8003f24 <_printf_i+0x19c>
 8003db2:	2958      	cmp	r1, #88	; 0x58
 8003db4:	f000 8083 	beq.w	8003ebe <_printf_i+0x136>
 8003db8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dbc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003dc0:	e032      	b.n	8003e28 <_printf_i+0xa0>
 8003dc2:	2964      	cmp	r1, #100	; 0x64
 8003dc4:	d001      	beq.n	8003dca <_printf_i+0x42>
 8003dc6:	2969      	cmp	r1, #105	; 0x69
 8003dc8:	d1f6      	bne.n	8003db8 <_printf_i+0x30>
 8003dca:	6820      	ldr	r0, [r4, #0]
 8003dcc:	6813      	ldr	r3, [r2, #0]
 8003dce:	0605      	lsls	r5, r0, #24
 8003dd0:	f103 0104 	add.w	r1, r3, #4
 8003dd4:	d52a      	bpl.n	8003e2c <_printf_i+0xa4>
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6011      	str	r1, [r2, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	da03      	bge.n	8003de6 <_printf_i+0x5e>
 8003dde:	222d      	movs	r2, #45	; 0x2d
 8003de0:	425b      	negs	r3, r3
 8003de2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003de6:	486f      	ldr	r0, [pc, #444]	; (8003fa4 <_printf_i+0x21c>)
 8003de8:	220a      	movs	r2, #10
 8003dea:	e039      	b.n	8003e60 <_printf_i+0xd8>
 8003dec:	2973      	cmp	r1, #115	; 0x73
 8003dee:	f000 809d 	beq.w	8003f2c <_printf_i+0x1a4>
 8003df2:	d808      	bhi.n	8003e06 <_printf_i+0x7e>
 8003df4:	296f      	cmp	r1, #111	; 0x6f
 8003df6:	d020      	beq.n	8003e3a <_printf_i+0xb2>
 8003df8:	2970      	cmp	r1, #112	; 0x70
 8003dfa:	d1dd      	bne.n	8003db8 <_printf_i+0x30>
 8003dfc:	6823      	ldr	r3, [r4, #0]
 8003dfe:	f043 0320 	orr.w	r3, r3, #32
 8003e02:	6023      	str	r3, [r4, #0]
 8003e04:	e003      	b.n	8003e0e <_printf_i+0x86>
 8003e06:	2975      	cmp	r1, #117	; 0x75
 8003e08:	d017      	beq.n	8003e3a <_printf_i+0xb2>
 8003e0a:	2978      	cmp	r1, #120	; 0x78
 8003e0c:	d1d4      	bne.n	8003db8 <_printf_i+0x30>
 8003e0e:	2378      	movs	r3, #120	; 0x78
 8003e10:	4865      	ldr	r0, [pc, #404]	; (8003fa8 <_printf_i+0x220>)
 8003e12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e16:	e055      	b.n	8003ec4 <_printf_i+0x13c>
 8003e18:	6813      	ldr	r3, [r2, #0]
 8003e1a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e1e:	1d19      	adds	r1, r3, #4
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6011      	str	r1, [r2, #0]
 8003e24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e08c      	b.n	8003f46 <_printf_i+0x1be>
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e32:	6011      	str	r1, [r2, #0]
 8003e34:	bf18      	it	ne
 8003e36:	b21b      	sxthne	r3, r3
 8003e38:	e7cf      	b.n	8003dda <_printf_i+0x52>
 8003e3a:	6813      	ldr	r3, [r2, #0]
 8003e3c:	6825      	ldr	r5, [r4, #0]
 8003e3e:	1d18      	adds	r0, r3, #4
 8003e40:	6010      	str	r0, [r2, #0]
 8003e42:	0628      	lsls	r0, r5, #24
 8003e44:	d501      	bpl.n	8003e4a <_printf_i+0xc2>
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	e002      	b.n	8003e50 <_printf_i+0xc8>
 8003e4a:	0668      	lsls	r0, r5, #25
 8003e4c:	d5fb      	bpl.n	8003e46 <_printf_i+0xbe>
 8003e4e:	881b      	ldrh	r3, [r3, #0]
 8003e50:	296f      	cmp	r1, #111	; 0x6f
 8003e52:	bf14      	ite	ne
 8003e54:	220a      	movne	r2, #10
 8003e56:	2208      	moveq	r2, #8
 8003e58:	4852      	ldr	r0, [pc, #328]	; (8003fa4 <_printf_i+0x21c>)
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e60:	6865      	ldr	r5, [r4, #4]
 8003e62:	2d00      	cmp	r5, #0
 8003e64:	60a5      	str	r5, [r4, #8]
 8003e66:	f2c0 8095 	blt.w	8003f94 <_printf_i+0x20c>
 8003e6a:	6821      	ldr	r1, [r4, #0]
 8003e6c:	f021 0104 	bic.w	r1, r1, #4
 8003e70:	6021      	str	r1, [r4, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d13d      	bne.n	8003ef2 <_printf_i+0x16a>
 8003e76:	2d00      	cmp	r5, #0
 8003e78:	f040 808e 	bne.w	8003f98 <_printf_i+0x210>
 8003e7c:	4665      	mov	r5, ip
 8003e7e:	2a08      	cmp	r2, #8
 8003e80:	d10b      	bne.n	8003e9a <_printf_i+0x112>
 8003e82:	6823      	ldr	r3, [r4, #0]
 8003e84:	07db      	lsls	r3, r3, #31
 8003e86:	d508      	bpl.n	8003e9a <_printf_i+0x112>
 8003e88:	6923      	ldr	r3, [r4, #16]
 8003e8a:	6862      	ldr	r2, [r4, #4]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	bfde      	ittt	le
 8003e90:	2330      	movle	r3, #48	; 0x30
 8003e92:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e96:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003e9a:	ebac 0305 	sub.w	r3, ip, r5
 8003e9e:	6123      	str	r3, [r4, #16]
 8003ea0:	f8cd 8000 	str.w	r8, [sp]
 8003ea4:	463b      	mov	r3, r7
 8003ea6:	aa03      	add	r2, sp, #12
 8003ea8:	4621      	mov	r1, r4
 8003eaa:	4630      	mov	r0, r6
 8003eac:	f7ff fef6 	bl	8003c9c <_printf_common>
 8003eb0:	3001      	adds	r0, #1
 8003eb2:	d14d      	bne.n	8003f50 <_printf_i+0x1c8>
 8003eb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003eb8:	b005      	add	sp, #20
 8003eba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003ebe:	4839      	ldr	r0, [pc, #228]	; (8003fa4 <_printf_i+0x21c>)
 8003ec0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003ec4:	6813      	ldr	r3, [r2, #0]
 8003ec6:	6821      	ldr	r1, [r4, #0]
 8003ec8:	1d1d      	adds	r5, r3, #4
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6015      	str	r5, [r2, #0]
 8003ece:	060a      	lsls	r2, r1, #24
 8003ed0:	d50b      	bpl.n	8003eea <_printf_i+0x162>
 8003ed2:	07ca      	lsls	r2, r1, #31
 8003ed4:	bf44      	itt	mi
 8003ed6:	f041 0120 	orrmi.w	r1, r1, #32
 8003eda:	6021      	strmi	r1, [r4, #0]
 8003edc:	b91b      	cbnz	r3, 8003ee6 <_printf_i+0x15e>
 8003ede:	6822      	ldr	r2, [r4, #0]
 8003ee0:	f022 0220 	bic.w	r2, r2, #32
 8003ee4:	6022      	str	r2, [r4, #0]
 8003ee6:	2210      	movs	r2, #16
 8003ee8:	e7b7      	b.n	8003e5a <_printf_i+0xd2>
 8003eea:	064d      	lsls	r5, r1, #25
 8003eec:	bf48      	it	mi
 8003eee:	b29b      	uxthmi	r3, r3
 8003ef0:	e7ef      	b.n	8003ed2 <_printf_i+0x14a>
 8003ef2:	4665      	mov	r5, ip
 8003ef4:	fbb3 f1f2 	udiv	r1, r3, r2
 8003ef8:	fb02 3311 	mls	r3, r2, r1, r3
 8003efc:	5cc3      	ldrb	r3, [r0, r3]
 8003efe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003f02:	460b      	mov	r3, r1
 8003f04:	2900      	cmp	r1, #0
 8003f06:	d1f5      	bne.n	8003ef4 <_printf_i+0x16c>
 8003f08:	e7b9      	b.n	8003e7e <_printf_i+0xf6>
 8003f0a:	6813      	ldr	r3, [r2, #0]
 8003f0c:	6825      	ldr	r5, [r4, #0]
 8003f0e:	1d18      	adds	r0, r3, #4
 8003f10:	6961      	ldr	r1, [r4, #20]
 8003f12:	6010      	str	r0, [r2, #0]
 8003f14:	0628      	lsls	r0, r5, #24
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	d501      	bpl.n	8003f1e <_printf_i+0x196>
 8003f1a:	6019      	str	r1, [r3, #0]
 8003f1c:	e002      	b.n	8003f24 <_printf_i+0x19c>
 8003f1e:	066a      	lsls	r2, r5, #25
 8003f20:	d5fb      	bpl.n	8003f1a <_printf_i+0x192>
 8003f22:	8019      	strh	r1, [r3, #0]
 8003f24:	2300      	movs	r3, #0
 8003f26:	4665      	mov	r5, ip
 8003f28:	6123      	str	r3, [r4, #16]
 8003f2a:	e7b9      	b.n	8003ea0 <_printf_i+0x118>
 8003f2c:	6813      	ldr	r3, [r2, #0]
 8003f2e:	1d19      	adds	r1, r3, #4
 8003f30:	6011      	str	r1, [r2, #0]
 8003f32:	681d      	ldr	r5, [r3, #0]
 8003f34:	6862      	ldr	r2, [r4, #4]
 8003f36:	2100      	movs	r1, #0
 8003f38:	4628      	mov	r0, r5
 8003f3a:	f000 f837 	bl	8003fac <memchr>
 8003f3e:	b108      	cbz	r0, 8003f44 <_printf_i+0x1bc>
 8003f40:	1b40      	subs	r0, r0, r5
 8003f42:	6060      	str	r0, [r4, #4]
 8003f44:	6863      	ldr	r3, [r4, #4]
 8003f46:	6123      	str	r3, [r4, #16]
 8003f48:	2300      	movs	r3, #0
 8003f4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f4e:	e7a7      	b.n	8003ea0 <_printf_i+0x118>
 8003f50:	6923      	ldr	r3, [r4, #16]
 8003f52:	462a      	mov	r2, r5
 8003f54:	4639      	mov	r1, r7
 8003f56:	4630      	mov	r0, r6
 8003f58:	47c0      	blx	r8
 8003f5a:	3001      	adds	r0, #1
 8003f5c:	d0aa      	beq.n	8003eb4 <_printf_i+0x12c>
 8003f5e:	6823      	ldr	r3, [r4, #0]
 8003f60:	079b      	lsls	r3, r3, #30
 8003f62:	d413      	bmi.n	8003f8c <_printf_i+0x204>
 8003f64:	68e0      	ldr	r0, [r4, #12]
 8003f66:	9b03      	ldr	r3, [sp, #12]
 8003f68:	4298      	cmp	r0, r3
 8003f6a:	bfb8      	it	lt
 8003f6c:	4618      	movlt	r0, r3
 8003f6e:	e7a3      	b.n	8003eb8 <_printf_i+0x130>
 8003f70:	2301      	movs	r3, #1
 8003f72:	464a      	mov	r2, r9
 8003f74:	4639      	mov	r1, r7
 8003f76:	4630      	mov	r0, r6
 8003f78:	47c0      	blx	r8
 8003f7a:	3001      	adds	r0, #1
 8003f7c:	d09a      	beq.n	8003eb4 <_printf_i+0x12c>
 8003f7e:	3501      	adds	r5, #1
 8003f80:	68e3      	ldr	r3, [r4, #12]
 8003f82:	9a03      	ldr	r2, [sp, #12]
 8003f84:	1a9b      	subs	r3, r3, r2
 8003f86:	42ab      	cmp	r3, r5
 8003f88:	dcf2      	bgt.n	8003f70 <_printf_i+0x1e8>
 8003f8a:	e7eb      	b.n	8003f64 <_printf_i+0x1dc>
 8003f8c:	2500      	movs	r5, #0
 8003f8e:	f104 0919 	add.w	r9, r4, #25
 8003f92:	e7f5      	b.n	8003f80 <_printf_i+0x1f8>
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1ac      	bne.n	8003ef2 <_printf_i+0x16a>
 8003f98:	7803      	ldrb	r3, [r0, #0]
 8003f9a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f9e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fa2:	e76c      	b.n	8003e7e <_printf_i+0xf6>
 8003fa4:	0800430d 	.word	0x0800430d
 8003fa8:	0800431e 	.word	0x0800431e

08003fac <memchr>:
 8003fac:	b510      	push	{r4, lr}
 8003fae:	b2c9      	uxtb	r1, r1
 8003fb0:	4402      	add	r2, r0
 8003fb2:	4290      	cmp	r0, r2
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	d101      	bne.n	8003fbc <memchr+0x10>
 8003fb8:	2300      	movs	r3, #0
 8003fba:	e003      	b.n	8003fc4 <memchr+0x18>
 8003fbc:	781c      	ldrb	r4, [r3, #0]
 8003fbe:	3001      	adds	r0, #1
 8003fc0:	428c      	cmp	r4, r1
 8003fc2:	d1f6      	bne.n	8003fb2 <memchr+0x6>
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	bd10      	pop	{r4, pc}

08003fc8 <memmove>:
 8003fc8:	4288      	cmp	r0, r1
 8003fca:	b510      	push	{r4, lr}
 8003fcc:	eb01 0302 	add.w	r3, r1, r2
 8003fd0:	d807      	bhi.n	8003fe2 <memmove+0x1a>
 8003fd2:	1e42      	subs	r2, r0, #1
 8003fd4:	4299      	cmp	r1, r3
 8003fd6:	d00a      	beq.n	8003fee <memmove+0x26>
 8003fd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fdc:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003fe0:	e7f8      	b.n	8003fd4 <memmove+0xc>
 8003fe2:	4283      	cmp	r3, r0
 8003fe4:	d9f5      	bls.n	8003fd2 <memmove+0xa>
 8003fe6:	1881      	adds	r1, r0, r2
 8003fe8:	1ad2      	subs	r2, r2, r3
 8003fea:	42d3      	cmn	r3, r2
 8003fec:	d100      	bne.n	8003ff0 <memmove+0x28>
 8003fee:	bd10      	pop	{r4, pc}
 8003ff0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ff4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003ff8:	e7f7      	b.n	8003fea <memmove+0x22>

08003ffa <_realloc_r>:
 8003ffa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ffc:	4607      	mov	r7, r0
 8003ffe:	4614      	mov	r4, r2
 8004000:	460e      	mov	r6, r1
 8004002:	b921      	cbnz	r1, 800400e <_realloc_r+0x14>
 8004004:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004008:	4611      	mov	r1, r2
 800400a:	f7ff bc69 	b.w	80038e0 <_malloc_r>
 800400e:	b922      	cbnz	r2, 800401a <_realloc_r+0x20>
 8004010:	f7ff fc1a 	bl	8003848 <_free_r>
 8004014:	4625      	mov	r5, r4
 8004016:	4628      	mov	r0, r5
 8004018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800401a:	f000 f814 	bl	8004046 <_malloc_usable_size_r>
 800401e:	42a0      	cmp	r0, r4
 8004020:	d20f      	bcs.n	8004042 <_realloc_r+0x48>
 8004022:	4621      	mov	r1, r4
 8004024:	4638      	mov	r0, r7
 8004026:	f7ff fc5b 	bl	80038e0 <_malloc_r>
 800402a:	4605      	mov	r5, r0
 800402c:	2800      	cmp	r0, #0
 800402e:	d0f2      	beq.n	8004016 <_realloc_r+0x1c>
 8004030:	4631      	mov	r1, r6
 8004032:	4622      	mov	r2, r4
 8004034:	f7ff fbf4 	bl	8003820 <memcpy>
 8004038:	4631      	mov	r1, r6
 800403a:	4638      	mov	r0, r7
 800403c:	f7ff fc04 	bl	8003848 <_free_r>
 8004040:	e7e9      	b.n	8004016 <_realloc_r+0x1c>
 8004042:	4635      	mov	r5, r6
 8004044:	e7e7      	b.n	8004016 <_realloc_r+0x1c>

08004046 <_malloc_usable_size_r>:
 8004046:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800404a:	1f18      	subs	r0, r3, #4
 800404c:	2b00      	cmp	r3, #0
 800404e:	bfbc      	itt	lt
 8004050:	580b      	ldrlt	r3, [r1, r0]
 8004052:	18c0      	addlt	r0, r0, r3
 8004054:	4770      	bx	lr
	...

08004058 <_init>:
 8004058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800405a:	bf00      	nop
 800405c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800405e:	bc08      	pop	{r3}
 8004060:	469e      	mov	lr, r3
 8004062:	4770      	bx	lr

08004064 <_fini>:
 8004064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004066:	bf00      	nop
 8004068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800406a:	bc08      	pop	{r3}
 800406c:	469e      	mov	lr, r3
 800406e:	4770      	bx	lr
