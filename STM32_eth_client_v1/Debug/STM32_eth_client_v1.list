
STM32_eth_client_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fd8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  080040e4  080040e4  000140e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800434c  0800434c  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  0800434c  0800434c  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800434c  0800434c  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800434c  0800434c  0001434c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004350  08004350  00014350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08004354  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  2000009c  080043f0  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  080043f0  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a6e1  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001de0  00000000  00000000  0002a7a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009f8  00000000  00000000  0002c588  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000928  00000000  00000000  0002cf80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014a21  00000000  00000000  0002d8a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007dc0  00000000  00000000  000422c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007031b  00000000  00000000  0004a089  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ba3a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c34  00000000  00000000  000ba420  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000009c 	.word	0x2000009c
 8000128:	00000000 	.word	0x00000000
 800012c:	080040cc 	.word	0x080040cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a0 	.word	0x200000a0
 8000148:	080040cc 	.word	0x080040cc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <cs_sel>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void cs_sel() {
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //CS LOW
 8000160:	2200      	movs	r2, #0
 8000162:	2110      	movs	r1, #16
 8000164:	4802      	ldr	r0, [pc, #8]	; (8000170 <cs_sel+0x14>)
 8000166:	f000 ff39 	bl	8000fdc <HAL_GPIO_WritePin>
}
 800016a:	bf00      	nop
 800016c:	bd80      	pop	{r7, pc}
 800016e:	bf00      	nop
 8000170:	40010800 	.word	0x40010800

08000174 <cs_desel>:

void cs_desel() {
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 8000178:	2201      	movs	r2, #1
 800017a:	2110      	movs	r1, #16
 800017c:	4802      	ldr	r0, [pc, #8]	; (8000188 <cs_desel+0x14>)
 800017e:	f000 ff2d 	bl	8000fdc <HAL_GPIO_WritePin>
}
 8000182:	bf00      	nop
 8000184:	bd80      	pop	{r7, pc}
 8000186:	bf00      	nop
 8000188:	40010800 	.word	0x40010800

0800018c <spi_rb>:

uint8_t spi_rb(void) {
 800018c:	b580      	push	{r7, lr}
 800018e:	b082      	sub	sp, #8
 8000190:	af00      	add	r7, sp, #0
	uint8_t rbuf;
	HAL_SPI_Receive(&hspi1, &rbuf, 1, 0xFFFFFFFF);
 8000192:	1df9      	adds	r1, r7, #7
 8000194:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000198:	2201      	movs	r2, #1
 800019a:	4804      	ldr	r0, [pc, #16]	; (80001ac <spi_rb+0x20>)
 800019c:	f001 fce7 	bl	8001b6e <HAL_SPI_Receive>
	return rbuf;
 80001a0:	79fb      	ldrb	r3, [r7, #7]
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	3708      	adds	r7, #8
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	20000164 	.word	0x20000164

080001b0 <spi_wb>:

void spi_wb(uint8_t b) {
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b082      	sub	sp, #8
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	4603      	mov	r3, r0
 80001b8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &b, 1, 0xFFFFFFFF);
 80001ba:	1df9      	adds	r1, r7, #7
 80001bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80001c0:	2201      	movs	r2, #1
 80001c2:	4803      	ldr	r0, [pc, #12]	; (80001d0 <spi_wb+0x20>)
 80001c4:	f001 fb9f 	bl	8001906 <HAL_SPI_Transmit>
}
 80001c8:	bf00      	nop
 80001ca:	3708      	adds	r7, #8
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bd80      	pop	{r7, pc}
 80001d0:	20000164 	.word	0x20000164

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b5b0      	push	{r4, r5, r7, lr}
 80001d6:	b0a0      	sub	sp, #128	; 0x80
 80001d8:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	uint8_t retVal, sockStatus;
	int16_t rcvLen;
	uint8_t rcvBuf[60], bufSize[] = {2, 2, 2, 2, 2, 2, 2, 2};
 80001da:	4abd      	ldr	r2, [pc, #756]	; (80004d0 <main+0x2fc>)
 80001dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001e4:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t serverIP[4] = {192, 168, 2, 192};
 80001e8:	4bba      	ldr	r3, [pc, #744]	; (80004d4 <main+0x300>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	627b      	str	r3, [r7, #36]	; 0x24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ee:	f000 fc33 	bl	8000a58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f2:	f000 f9af 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f6:	f000 fa51 	bl	800069c <MX_GPIO_Init>
  MX_SPI1_Init();
 80001fa:	f000 f9ef 	bl	80005dc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80001fe:	f000 fa23 	bl	8000648 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  PRINT_HEADER();
 8000202:	2364      	movs	r3, #100	; 0x64
 8000204:	222f      	movs	r2, #47	; 0x2f
 8000206:	49b4      	ldr	r1, [pc, #720]	; (80004d8 <main+0x304>)
 8000208:	48b4      	ldr	r0, [pc, #720]	; (80004dc <main+0x308>)
 800020a:	f002 f882 	bl	8002312 <HAL_UART_Transmit>
 800020e:	2364      	movs	r3, #100	; 0x64
 8000210:	222f      	movs	r2, #47	; 0x2f
 8000212:	49b3      	ldr	r1, [pc, #716]	; (80004e0 <main+0x30c>)
 8000214:	48b1      	ldr	r0, [pc, #708]	; (80004dc <main+0x308>)
 8000216:	f002 f87c 	bl	8002312 <HAL_UART_Transmit>
 800021a:	2364      	movs	r3, #100	; 0x64
 800021c:	222f      	movs	r2, #47	; 0x2f
 800021e:	49ae      	ldr	r1, [pc, #696]	; (80004d8 <main+0x304>)
 8000220:	48ae      	ldr	r0, [pc, #696]	; (80004dc <main+0x308>)
 8000222:	f002 f876 	bl	8002312 <HAL_UART_Transmit>

  reg_wizchip_cs_cbfunc(cs_sel, cs_desel);
 8000226:	49af      	ldr	r1, [pc, #700]	; (80004e4 <main+0x310>)
 8000228:	48af      	ldr	r0, [pc, #700]	; (80004e8 <main+0x314>)
 800022a:	f003 f963 	bl	80034f4 <reg_wizchip_cs_cbfunc>
  reg_wizchip_spi_cbfunc(spi_rb, spi_wb);
 800022e:	49af      	ldr	r1, [pc, #700]	; (80004ec <main+0x318>)
 8000230:	48af      	ldr	r0, [pc, #700]	; (80004f0 <main+0x31c>)
 8000232:	f003 f983 	bl	800353c <reg_wizchip_spi_cbfunc>
  wizchip_init(bufSize, bufSize);
 8000236:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800023a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800023e:	4611      	mov	r1, r2
 8000240:	4618      	mov	r0, r3
 8000242:	f003 f9f1 	bl	8003628 <wizchip_init>
  wiz_NetInfo netInfo = { .mac		= {0x00, 0x08, 0xdc, 0xab, 0xef}, //Mac Addres
 8000246:	f107 030c 	add.w	r3, r7, #12
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]
 8000254:	611a      	str	r2, [r3, #16]
 8000256:	f8c3 2013 	str.w	r2, [r3, #19]
 800025a:	2308      	movs	r3, #8
 800025c:	737b      	strb	r3, [r7, #13]
 800025e:	23dc      	movs	r3, #220	; 0xdc
 8000260:	73bb      	strb	r3, [r7, #14]
 8000262:	23ab      	movs	r3, #171	; 0xab
 8000264:	73fb      	strb	r3, [r7, #15]
 8000266:	23ef      	movs	r3, #239	; 0xef
 8000268:	743b      	strb	r3, [r7, #16]
 800026a:	23c0      	movs	r3, #192	; 0xc0
 800026c:	74bb      	strb	r3, [r7, #18]
 800026e:	23a8      	movs	r3, #168	; 0xa8
 8000270:	74fb      	strb	r3, [r7, #19]
 8000272:	2302      	movs	r3, #2
 8000274:	753b      	strb	r3, [r7, #20]
 8000276:	23bf      	movs	r3, #191	; 0xbf
 8000278:	757b      	strb	r3, [r7, #21]
 800027a:	23ff      	movs	r3, #255	; 0xff
 800027c:	75bb      	strb	r3, [r7, #22]
 800027e:	23ff      	movs	r3, #255	; 0xff
 8000280:	75fb      	strb	r3, [r7, #23]
 8000282:	23ff      	movs	r3, #255	; 0xff
 8000284:	763b      	strb	r3, [r7, #24]
 8000286:	23c0      	movs	r3, #192	; 0xc0
 8000288:	76bb      	strb	r3, [r7, #26]
 800028a:	23a8      	movs	r3, #168	; 0xa8
 800028c:	76fb      	strb	r3, [r7, #27]
 800028e:	2302      	movs	r3, #2
 8000290:	773b      	strb	r3, [r7, #28]
 8000292:	2301      	movs	r3, #1
 8000294:	777b      	strb	r3, [r7, #29]
						  .ip 		= {192, 168, 2, 191},
						  .sn		= {255, 255, 255, 0},
						  .gw		= {192, 168, 2, 1} };
  wizchip_setnetinfo(&netInfo);
 8000296:	f107 030c 	add.w	r3, r7, #12
 800029a:	4618      	mov	r0, r3
 800029c:	f003 fa50 	bl	8003740 <wizchip_setnetinfo>
  wizchip_getnetinfo(&netInfo);
 80002a0:	f107 030c 	add.w	r3, r7, #12
 80002a4:	4618      	mov	r0, r3
 80002a6:	f003 fa8b 	bl	80037c0 <wizchip_getnetinfo>
  PRINT_NETINFO(netInfo);
 80002aa:	2364      	movs	r3, #100	; 0x64
 80002ac:	2218      	movs	r2, #24
 80002ae:	4991      	ldr	r1, [pc, #580]	; (80004f4 <main+0x320>)
 80002b0:	488a      	ldr	r0, [pc, #552]	; (80004dc <main+0x308>)
 80002b2:	f002 f82e 	bl	8002312 <HAL_UART_Transmit>
 80002b6:	7b3b      	ldrb	r3, [r7, #12]
 80002b8:	461c      	mov	r4, r3
 80002ba:	7b7b      	ldrb	r3, [r7, #13]
 80002bc:	461d      	mov	r5, r3
 80002be:	7bbb      	ldrb	r3, [r7, #14]
 80002c0:	7bfa      	ldrb	r2, [r7, #15]
 80002c2:	7c39      	ldrb	r1, [r7, #16]
 80002c4:	7c78      	ldrb	r0, [r7, #17]
 80002c6:	9003      	str	r0, [sp, #12]
 80002c8:	9102      	str	r1, [sp, #8]
 80002ca:	9201      	str	r2, [sp, #4]
 80002cc:	9300      	str	r3, [sp, #0]
 80002ce:	462b      	mov	r3, r5
 80002d0:	4622      	mov	r2, r4
 80002d2:	4989      	ldr	r1, [pc, #548]	; (80004f8 <main+0x324>)
 80002d4:	4889      	ldr	r0, [pc, #548]	; (80004fc <main+0x328>)
 80002d6:	f003 fba7 	bl	8003a28 <siprintf>
 80002da:	4888      	ldr	r0, [pc, #544]	; (80004fc <main+0x328>)
 80002dc:	f7ff ff36 	bl	800014c <strlen>
 80002e0:	4603      	mov	r3, r0
 80002e2:	b29a      	uxth	r2, r3
 80002e4:	2364      	movs	r3, #100	; 0x64
 80002e6:	4985      	ldr	r1, [pc, #532]	; (80004fc <main+0x328>)
 80002e8:	487c      	ldr	r0, [pc, #496]	; (80004dc <main+0x308>)
 80002ea:	f002 f812 	bl	8002312 <HAL_UART_Transmit>
 80002ee:	7cbb      	ldrb	r3, [r7, #18]
 80002f0:	4619      	mov	r1, r3
 80002f2:	7cfb      	ldrb	r3, [r7, #19]
 80002f4:	4618      	mov	r0, r3
 80002f6:	7d3b      	ldrb	r3, [r7, #20]
 80002f8:	7d7a      	ldrb	r2, [r7, #21]
 80002fa:	9201      	str	r2, [sp, #4]
 80002fc:	9300      	str	r3, [sp, #0]
 80002fe:	4603      	mov	r3, r0
 8000300:	460a      	mov	r2, r1
 8000302:	497f      	ldr	r1, [pc, #508]	; (8000500 <main+0x32c>)
 8000304:	487d      	ldr	r0, [pc, #500]	; (80004fc <main+0x328>)
 8000306:	f003 fb8f 	bl	8003a28 <siprintf>
 800030a:	487c      	ldr	r0, [pc, #496]	; (80004fc <main+0x328>)
 800030c:	f7ff ff1e 	bl	800014c <strlen>
 8000310:	4603      	mov	r3, r0
 8000312:	b29a      	uxth	r2, r3
 8000314:	2364      	movs	r3, #100	; 0x64
 8000316:	4979      	ldr	r1, [pc, #484]	; (80004fc <main+0x328>)
 8000318:	4870      	ldr	r0, [pc, #448]	; (80004dc <main+0x308>)
 800031a:	f001 fffa 	bl	8002312 <HAL_UART_Transmit>
 800031e:	7dbb      	ldrb	r3, [r7, #22]
 8000320:	4619      	mov	r1, r3
 8000322:	7dfb      	ldrb	r3, [r7, #23]
 8000324:	4618      	mov	r0, r3
 8000326:	7e3b      	ldrb	r3, [r7, #24]
 8000328:	7e7a      	ldrb	r2, [r7, #25]
 800032a:	9201      	str	r2, [sp, #4]
 800032c:	9300      	str	r3, [sp, #0]
 800032e:	4603      	mov	r3, r0
 8000330:	460a      	mov	r2, r1
 8000332:	4974      	ldr	r1, [pc, #464]	; (8000504 <main+0x330>)
 8000334:	4871      	ldr	r0, [pc, #452]	; (80004fc <main+0x328>)
 8000336:	f003 fb77 	bl	8003a28 <siprintf>
 800033a:	4870      	ldr	r0, [pc, #448]	; (80004fc <main+0x328>)
 800033c:	f7ff ff06 	bl	800014c <strlen>
 8000340:	4603      	mov	r3, r0
 8000342:	b29a      	uxth	r2, r3
 8000344:	2364      	movs	r3, #100	; 0x64
 8000346:	496d      	ldr	r1, [pc, #436]	; (80004fc <main+0x328>)
 8000348:	4864      	ldr	r0, [pc, #400]	; (80004dc <main+0x308>)
 800034a:	f001 ffe2 	bl	8002312 <HAL_UART_Transmit>
 800034e:	7ebb      	ldrb	r3, [r7, #26]
 8000350:	4619      	mov	r1, r3
 8000352:	7efb      	ldrb	r3, [r7, #27]
 8000354:	4618      	mov	r0, r3
 8000356:	7f3b      	ldrb	r3, [r7, #28]
 8000358:	7f7a      	ldrb	r2, [r7, #29]
 800035a:	9201      	str	r2, [sp, #4]
 800035c:	9300      	str	r3, [sp, #0]
 800035e:	4603      	mov	r3, r0
 8000360:	460a      	mov	r2, r1
 8000362:	4969      	ldr	r1, [pc, #420]	; (8000508 <main+0x334>)
 8000364:	4865      	ldr	r0, [pc, #404]	; (80004fc <main+0x328>)
 8000366:	f003 fb5f 	bl	8003a28 <siprintf>
 800036a:	4864      	ldr	r0, [pc, #400]	; (80004fc <main+0x328>)
 800036c:	f7ff feee 	bl	800014c <strlen>
 8000370:	4603      	mov	r3, r0
 8000372:	b29a      	uxth	r2, r3
 8000374:	2364      	movs	r3, #100	; 0x64
 8000376:	4961      	ldr	r1, [pc, #388]	; (80004fc <main+0x328>)
 8000378:	4858      	ldr	r0, [pc, #352]	; (80004dc <main+0x308>)
 800037a:	f001 ffca 	bl	8002312 <HAL_UART_Transmit>

  reconnect:
  	  /*Abro socket 0 en TCP_Socket con TCP_PORT = 5001*/
  	  if((retVal = socket(0, Sn_MR_TCP, TCP_PORT, SF_TCP_NODELAY)) == 0){
 800037e:	2320      	movs	r3, #32
 8000380:	f241 3289 	movw	r2, #5001	; 0x1389
 8000384:	2101      	movs	r1, #1
 8000386:	2000      	movs	r0, #0
 8000388:	f002 fbcc 	bl	8002b24 <socket>
 800038c:	4603      	mov	r3, r0
 800038e:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8000392:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000396:	2b00      	cmp	r3, #0
 8000398:	f040 80be 	bne.w	8000518 <main+0x344>
  		  HAL_Delay(800);
 800039c:	f44f 7048 	mov.w	r0, #800	; 0x320
 80003a0:	f000 fbbc 	bl	8000b1c <HAL_Delay>
  		  /*Busco conectarme*/
  		  sockStatus = getSn_SR(0);
 80003a4:	f44f 7042 	mov.w	r0, #776	; 0x308
 80003a8:	f002 f970 	bl	800268c <WIZCHIP_READ>
 80003ac:	4603      	mov	r3, r0
 80003ae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  		  	  HAL_Delay(800);
 80003b2:	f44f 7048 	mov.w	r0, #800	; 0x320
 80003b6:	f000 fbb1 	bl	8000b1c <HAL_Delay>

  		  	  while(sockStatus != SOCK_OK)
 80003ba:	e00a      	b.n	80003d2 <main+0x1fe>
  		  		  sockStatus = connect(0,serverIP,TCP_PORT);
 80003bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003c0:	f241 3289 	movw	r2, #5001	; 0x1389
 80003c4:	4619      	mov	r1, r3
 80003c6:	2000      	movs	r0, #0
 80003c8:	f002 fd30 	bl	8002e2c <connect>
 80003cc:	4603      	mov	r3, r0
 80003ce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  		  	  while(sockStatus != SOCK_OK)
 80003d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	d1f0      	bne.n	80003bc <main+0x1e8>
  		  	if(sockStatus == SOCK_OK){
 80003da:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80003de:	2b01      	cmp	r3, #1
 80003e0:	d164      	bne.n	80004ac <main+0x2d8>
//  	 		  if((retVal = connect(0,serverIP,TCP_PORT)) == SOCK_OK){
 // 	   		  while((sockStatus = getSn_SR(0)) == Sn_SR)  //Sn_CR
//  	   			  HAL_Delay(1000);
  	   		  sockStatus = getSn_SR(0);
 80003e2:	f44f 7042 	mov.w	r0, #776	; 0x308
 80003e6:	f002 f951 	bl	800268c <WIZCHIP_READ>
 80003ea:	4603      	mov	r3, r0
 80003ec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

//  	   		  while((sockStatus = getSn_SR(0)) == SOCK_CLOSE_WAIT)
//  	   			  HAL_Delay(100);
  			  while(1){
  				  if((sockStatus = getSn_SR(0)) == SOCK_ESTABLISHED){ // Sn_SR  SE queda aca!! LPM
 80003f0:	f44f 7042 	mov.w	r0, #776	; 0x308
 80003f4:	f002 f94a 	bl	800268c <WIZCHIP_READ>
 80003f8:	4603      	mov	r3, r0
 80003fa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80003fe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000402:	2b17      	cmp	r3, #23
 8000404:	d13f      	bne.n	8000486 <main+0x2b2>
  				  uint8_t remoteIP[4];
  				  uint16_t remotePort;

  				  getsockopt(0, SO_DESTIP, remoteIP);
 8000406:	f107 0308 	add.w	r3, r7, #8
 800040a:	461a      	mov	r2, r3
 800040c:	2104      	movs	r1, #4
 800040e:	2000      	movs	r0, #0
 8000410:	f002 ff14 	bl	800323c <getsockopt>
  				  getsockopt(0, SO_DESTPORT, (uint8_t*)&remotePort);
 8000414:	1dbb      	adds	r3, r7, #6
 8000416:	461a      	mov	r2, r3
 8000418:	2105      	movs	r1, #5
 800041a:	2000      	movs	r0, #0
 800041c:	f002 ff0e 	bl	800323c <getsockopt>
  				  sprintf(msg, CONN_ESTABLISHED_MSG, remoteIP[0], remoteIP[1], remoteIP[2], remoteIP[3], remotePort);
 8000420:	7a3b      	ldrb	r3, [r7, #8]
 8000422:	4618      	mov	r0, r3
 8000424:	7a7b      	ldrb	r3, [r7, #9]
 8000426:	461c      	mov	r4, r3
 8000428:	7abb      	ldrb	r3, [r7, #10]
 800042a:	7afa      	ldrb	r2, [r7, #11]
 800042c:	88f9      	ldrh	r1, [r7, #6]
 800042e:	9102      	str	r1, [sp, #8]
 8000430:	9201      	str	r2, [sp, #4]
 8000432:	9300      	str	r3, [sp, #0]
 8000434:	4623      	mov	r3, r4
 8000436:	4602      	mov	r2, r0
 8000438:	4934      	ldr	r1, [pc, #208]	; (800050c <main+0x338>)
 800043a:	4830      	ldr	r0, [pc, #192]	; (80004fc <main+0x328>)
 800043c:	f003 faf4 	bl	8003a28 <siprintf>
  				  PRINT_STR(msg);
 8000440:	482e      	ldr	r0, [pc, #184]	; (80004fc <main+0x328>)
 8000442:	f7ff fe83 	bl	800014c <strlen>
 8000446:	4603      	mov	r3, r0
 8000448:	b29a      	uxth	r2, r3
 800044a:	2364      	movs	r3, #100	; 0x64
 800044c:	492b      	ldr	r1, [pc, #172]	; (80004fc <main+0x328>)
 800044e:	4823      	ldr	r0, [pc, #140]	; (80004dc <main+0x308>)
 8000450:	f001 ff5f 	bl	8002312 <HAL_UART_Transmit>

//   			  if((retVal = send(0, GREETING_MSG, strlen(GREETING_MSG))) == (int16_t)strlen(GREETING_MSG))

  			      retVal = recv(0, rcvBuf, sizeof(rcvBuf));
 8000454:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000458:	223c      	movs	r2, #60	; 0x3c
 800045a:	4619      	mov	r1, r3
 800045c:	2000      	movs	r0, #0
 800045e:	f002 fe37 	bl	80030d0 <recv>
 8000462:	4603      	mov	r3, r0
 8000464:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e


  			      PRINT_STR(rcvBuf);
 8000468:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800046c:	4618      	mov	r0, r3
 800046e:	f7ff fe6d 	bl	800014c <strlen>
 8000472:	4603      	mov	r3, r0
 8000474:	b29a      	uxth	r2, r3
 8000476:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800047a:	2364      	movs	r3, #100	; 0x64
 800047c:	4817      	ldr	r0, [pc, #92]	; (80004dc <main+0x308>)
 800047e:	f001 ff48 	bl	8002312 <HAL_UART_Transmit>

  				  break;
 8000482:	bf00      	nop
 8000484:	e059      	b.n	800053a <main+0x366>
  			  }
  				  else { /* Something went wrong with remote peer, maybe the connection was closed unexpectedly */
   				  sprintf(msg, WRONG_STATUS_MSG, sockStatus);
 8000486:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800048a:	461a      	mov	r2, r3
 800048c:	4920      	ldr	r1, [pc, #128]	; (8000510 <main+0x33c>)
 800048e:	481b      	ldr	r0, [pc, #108]	; (80004fc <main+0x328>)
 8000490:	f003 faca 	bl	8003a28 <siprintf>
   				  PRINT_STR(msg);
 8000494:	4819      	ldr	r0, [pc, #100]	; (80004fc <main+0x328>)
 8000496:	f7ff fe59 	bl	800014c <strlen>
 800049a:	4603      	mov	r3, r0
 800049c:	b29a      	uxth	r2, r3
 800049e:	2364      	movs	r3, #100	; 0x64
 80004a0:	4916      	ldr	r1, [pc, #88]	; (80004fc <main+0x328>)
 80004a2:	480e      	ldr	r0, [pc, #56]	; (80004dc <main+0x308>)
 80004a4:	f001 ff35 	bl	8002312 <HAL_UART_Transmit>
   				  break;
 80004a8:	bf00      	nop
 80004aa:	e046      	b.n	800053a <main+0x366>
  				  }
  			  }

  		  }else {/* Ops: socket not in LISTEN mode. Something went wrong */
  	   		  PRINT_STR(CONNECT_ERR_MSG);
 80004ac:	2364      	movs	r3, #100	; 0x64
 80004ae:	2210      	movs	r2, #16
 80004b0:	4918      	ldr	r1, [pc, #96]	; (8000514 <main+0x340>)
 80004b2:	480a      	ldr	r0, [pc, #40]	; (80004dc <main+0x308>)
 80004b4:	f001 ff2d 	bl	8002312 <HAL_UART_Transmit>
  		retVal = recv(0, rcvBuf, sizeof(rcvBuf));
 80004b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004bc:	223c      	movs	r2, #60	; 0x3c
 80004be:	4619      	mov	r1, r3
 80004c0:	2000      	movs	r0, #0
 80004c2:	f002 fe05 	bl	80030d0 <recv>
 80004c6:	4603      	mov	r3, r0
 80004c8:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 80004cc:	e035      	b.n	800053a <main+0x366>
 80004ce:	bf00      	nop
 80004d0:	08004280 	.word	0x08004280
 80004d4:	08004288 	.word	0x08004288
 80004d8:	080040e4 	.word	0x080040e4
 80004dc:	20000124 	.word	0x20000124
 80004e0:	08004114 	.word	0x08004114
 80004e4:	08000175 	.word	0x08000175
 80004e8:	0800015d 	.word	0x0800015d
 80004ec:	080001b1 	.word	0x080001b1
 80004f0:	0800018d 	.word	0x0800018d
 80004f4:	08004144 	.word	0x08004144
 80004f8:	08004160 	.word	0x08004160
 80004fc:	200000e8 	.word	0x200000e8
 8000500:	08004184 	.word	0x08004184
 8000504:	080041a4 	.word	0x080041a4
 8000508:	080041c4 	.word	0x080041c4
 800050c:	080041e4 	.word	0x080041e4
 8000510:	0800421c 	.word	0x0800421c
 8000514:	08004240 	.word	0x08004240



  	  }
  	  else { /* Can't open the socket. This means something is wrong with W5100 configuration: maybe SPI issue? */
  	   	  sprintf(msg, WRONG_RETVAL_MSG, retVal);
 8000518:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800051c:	461a      	mov	r2, r3
 800051e:	490a      	ldr	r1, [pc, #40]	; (8000548 <main+0x374>)
 8000520:	480a      	ldr	r0, [pc, #40]	; (800054c <main+0x378>)
 8000522:	f003 fa81 	bl	8003a28 <siprintf>
  	   	  PRINT_STR(msg);
 8000526:	4809      	ldr	r0, [pc, #36]	; (800054c <main+0x378>)
 8000528:	f7ff fe10 	bl	800014c <strlen>
 800052c:	4603      	mov	r3, r0
 800052e:	b29a      	uxth	r2, r3
 8000530:	2364      	movs	r3, #100	; 0x64
 8000532:	4906      	ldr	r1, [pc, #24]	; (800054c <main+0x378>)
 8000534:	4806      	ldr	r0, [pc, #24]	; (8000550 <main+0x37c>)
 8000536:	f001 feec 	bl	8002312 <HAL_UART_Transmit>
  	  }

  disconnect(0);
 800053a:	2000      	movs	r0, #0
 800053c:	f002 fd52 	bl	8002fe4 <disconnect>
  close(0);
 8000540:	2000      	movs	r0, #0
 8000542:	f002 fc05 	bl	8002d50 <close>
  goto reconnect;
 8000546:	e71a      	b.n	800037e <main+0x1aa>
 8000548:	08004254 	.word	0x08004254
 800054c:	200000e8 	.word	0x200000e8
 8000550:	20000124 	.word	0x20000124

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b090      	sub	sp, #64	; 0x40
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0318 	add.w	r3, r7, #24
 800055e:	2228      	movs	r2, #40	; 0x28
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f003 f9a1 	bl	80038aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000576:	2301      	movs	r3, #1
 8000578:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800057a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800057e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000584:	2301      	movs	r3, #1
 8000586:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000588:	2302      	movs	r3, #2
 800058a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000590:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000592:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000596:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000598:	f107 0318 	add.w	r3, r7, #24
 800059c:	4618      	mov	r0, r3
 800059e:	f000 fd35 	bl	800100c <HAL_RCC_OscConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005a8:	f000 f8d8 	bl	800075c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ac:	230f      	movs	r3, #15
 80005ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b0:	2302      	movs	r3, #2
 80005b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80005b4:	2380      	movs	r3, #128	; 0x80
 80005b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	2102      	movs	r1, #2
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 ffa1 	bl	800150c <HAL_RCC_ClockConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005d0:	f000 f8c4 	bl	800075c <Error_Handler>
  }
}
 80005d4:	bf00      	nop
 80005d6:	3740      	adds	r7, #64	; 0x40
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005e0:	4b17      	ldr	r3, [pc, #92]	; (8000640 <MX_SPI1_Init+0x64>)
 80005e2:	4a18      	ldr	r2, [pc, #96]	; (8000644 <MX_SPI1_Init+0x68>)
 80005e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005e6:	4b16      	ldr	r3, [pc, #88]	; (8000640 <MX_SPI1_Init+0x64>)
 80005e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005ee:	4b14      	ldr	r3, [pc, #80]	; (8000640 <MX_SPI1_Init+0x64>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <MX_SPI1_Init+0x64>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005fa:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_SPI1_Init+0x64>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <MX_SPI1_Init+0x64>)
 8000602:	2200      	movs	r2, #0
 8000604:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <MX_SPI1_Init+0x64>)
 8000608:	f44f 7200 	mov.w	r2, #512	; 0x200
 800060c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800060e:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <MX_SPI1_Init+0x64>)
 8000610:	2208      	movs	r2, #8
 8000612:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000614:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <MX_SPI1_Init+0x64>)
 8000616:	2200      	movs	r2, #0
 8000618:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <MX_SPI1_Init+0x64>)
 800061c:	2200      	movs	r2, #0
 800061e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <MX_SPI1_Init+0x64>)
 8000622:	2200      	movs	r2, #0
 8000624:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <MX_SPI1_Init+0x64>)
 8000628:	220a      	movs	r2, #10
 800062a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800062c:	4804      	ldr	r0, [pc, #16]	; (8000640 <MX_SPI1_Init+0x64>)
 800062e:	f001 f909 	bl	8001844 <HAL_SPI_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000638:	f000 f890 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000164 	.word	0x20000164
 8000644:	40013000 	.word	0x40013000

08000648 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800064c:	4b11      	ldr	r3, [pc, #68]	; (8000694 <MX_USART1_UART_Init+0x4c>)
 800064e:	4a12      	ldr	r2, [pc, #72]	; (8000698 <MX_USART1_UART_Init+0x50>)
 8000650:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000652:	4b10      	ldr	r3, [pc, #64]	; (8000694 <MX_USART1_UART_Init+0x4c>)
 8000654:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000658:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <MX_USART1_UART_Init+0x4c>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <MX_USART1_UART_Init+0x4c>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000666:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <MX_USART1_UART_Init+0x4c>)
 8000668:	2200      	movs	r2, #0
 800066a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_USART1_UART_Init+0x4c>)
 800066e:	220c      	movs	r2, #12
 8000670:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000672:	4b08      	ldr	r3, [pc, #32]	; (8000694 <MX_USART1_UART_Init+0x4c>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_USART1_UART_Init+0x4c>)
 800067a:	2200      	movs	r2, #0
 800067c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800067e:	4805      	ldr	r0, [pc, #20]	; (8000694 <MX_USART1_UART_Init+0x4c>)
 8000680:	f001 fdfa 	bl	8002278 <HAL_UART_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800068a:	f000 f867 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000124 	.word	0x20000124
 8000698:	40013800 	.word	0x40013800

0800069c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b088      	sub	sp, #32
 80006a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a2:	f107 0310 	add.w	r3, r7, #16
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b0:	4b27      	ldr	r3, [pc, #156]	; (8000750 <MX_GPIO_Init+0xb4>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	4a26      	ldr	r2, [pc, #152]	; (8000750 <MX_GPIO_Init+0xb4>)
 80006b6:	f043 0310 	orr.w	r3, r3, #16
 80006ba:	6193      	str	r3, [r2, #24]
 80006bc:	4b24      	ldr	r3, [pc, #144]	; (8000750 <MX_GPIO_Init+0xb4>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	f003 0310 	and.w	r3, r3, #16
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006c8:	4b21      	ldr	r3, [pc, #132]	; (8000750 <MX_GPIO_Init+0xb4>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	4a20      	ldr	r2, [pc, #128]	; (8000750 <MX_GPIO_Init+0xb4>)
 80006ce:	f043 0320 	orr.w	r3, r3, #32
 80006d2:	6193      	str	r3, [r2, #24]
 80006d4:	4b1e      	ldr	r3, [pc, #120]	; (8000750 <MX_GPIO_Init+0xb4>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	f003 0320 	and.w	r3, r3, #32
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e0:	4b1b      	ldr	r3, [pc, #108]	; (8000750 <MX_GPIO_Init+0xb4>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	4a1a      	ldr	r2, [pc, #104]	; (8000750 <MX_GPIO_Init+0xb4>)
 80006e6:	f043 0304 	orr.w	r3, r3, #4
 80006ea:	6193      	str	r3, [r2, #24]
 80006ec:	4b18      	ldr	r3, [pc, #96]	; (8000750 <MX_GPIO_Init+0xb4>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	f003 0304 	and.w	r3, r3, #4
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006fe:	4815      	ldr	r0, [pc, #84]	; (8000754 <MX_GPIO_Init+0xb8>)
 8000700:	f000 fc6c 	bl	8000fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	2110      	movs	r1, #16
 8000708:	4813      	ldr	r0, [pc, #76]	; (8000758 <MX_GPIO_Init+0xbc>)
 800070a:	f000 fc67 	bl	8000fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800070e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000712:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000714:	2301      	movs	r3, #1
 8000716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071c:	2302      	movs	r3, #2
 800071e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000720:	f107 0310 	add.w	r3, r7, #16
 8000724:	4619      	mov	r1, r3
 8000726:	480b      	ldr	r0, [pc, #44]	; (8000754 <MX_GPIO_Init+0xb8>)
 8000728:	f000 fafe 	bl	8000d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800072c:	2310      	movs	r3, #16
 800072e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000730:	2301      	movs	r3, #1
 8000732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;	//GPIO_NOPULL
 8000734:	2301      	movs	r3, #1
 8000736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000738:	2302      	movs	r3, #2
 800073a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073c:	f107 0310 	add.w	r3, r7, #16
 8000740:	4619      	mov	r1, r3
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_GPIO_Init+0xbc>)
 8000744:	f000 faf0 	bl	8000d28 <HAL_GPIO_Init>

}
 8000748:	bf00      	nop
 800074a:	3720      	adds	r7, #32
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40021000 	.word	0x40021000
 8000754:	40011000 	.word	0x40011000
 8000758:	40010800 	.word	0x40010800

0800075c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr

08000768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <HAL_MspInit+0x5c>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	4a14      	ldr	r2, [pc, #80]	; (80007c4 <HAL_MspInit+0x5c>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6193      	str	r3, [r2, #24]
 800077a:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <HAL_MspInit+0x5c>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <HAL_MspInit+0x5c>)
 8000788:	69db      	ldr	r3, [r3, #28]
 800078a:	4a0e      	ldr	r2, [pc, #56]	; (80007c4 <HAL_MspInit+0x5c>)
 800078c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000790:	61d3      	str	r3, [r2, #28]
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <HAL_MspInit+0x5c>)
 8000794:	69db      	ldr	r3, [r3, #28]
 8000796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800079e:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <HAL_MspInit+0x60>)
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <HAL_MspInit+0x60>)
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ba:	bf00      	nop
 80007bc:	3714      	adds	r7, #20
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr
 80007c4:	40021000 	.word	0x40021000
 80007c8:	40010000 	.word	0x40010000

080007cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b088      	sub	sp, #32
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d4:	f107 0310 	add.w	r3, r7, #16
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a1b      	ldr	r2, [pc, #108]	; (8000854 <HAL_SPI_MspInit+0x88>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d12f      	bne.n	800084c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007ec:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <HAL_SPI_MspInit+0x8c>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	4a19      	ldr	r2, [pc, #100]	; (8000858 <HAL_SPI_MspInit+0x8c>)
 80007f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b17      	ldr	r3, [pc, #92]	; (8000858 <HAL_SPI_MspInit+0x8c>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000804:	4b14      	ldr	r3, [pc, #80]	; (8000858 <HAL_SPI_MspInit+0x8c>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a13      	ldr	r2, [pc, #76]	; (8000858 <HAL_SPI_MspInit+0x8c>)
 800080a:	f043 0304 	orr.w	r3, r3, #4
 800080e:	6193      	str	r3, [r2, #24]
 8000810:	4b11      	ldr	r3, [pc, #68]	; (8000858 <HAL_SPI_MspInit+0x8c>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f003 0304 	and.w	r3, r3, #4
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800081c:	23a0      	movs	r3, #160	; 0xa0
 800081e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000820:	2302      	movs	r3, #2
 8000822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000824:	2303      	movs	r3, #3
 8000826:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000828:	f107 0310 	add.w	r3, r7, #16
 800082c:	4619      	mov	r1, r3
 800082e:	480b      	ldr	r0, [pc, #44]	; (800085c <HAL_SPI_MspInit+0x90>)
 8000830:	f000 fa7a 	bl	8000d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000834:	2340      	movs	r3, #64	; 0x40
 8000836:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000840:	f107 0310 	add.w	r3, r7, #16
 8000844:	4619      	mov	r1, r3
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <HAL_SPI_MspInit+0x90>)
 8000848:	f000 fa6e 	bl	8000d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800084c:	bf00      	nop
 800084e:	3720      	adds	r7, #32
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40013000 	.word	0x40013000
 8000858:	40021000 	.word	0x40021000
 800085c:	40010800 	.word	0x40010800

08000860 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b088      	sub	sp, #32
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000868:	f107 0310 	add.w	r3, r7, #16
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a1c      	ldr	r2, [pc, #112]	; (80008ec <HAL_UART_MspInit+0x8c>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d131      	bne.n	80008e4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000880:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <HAL_UART_MspInit+0x90>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	4a1a      	ldr	r2, [pc, #104]	; (80008f0 <HAL_UART_MspInit+0x90>)
 8000886:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800088a:	6193      	str	r3, [r2, #24]
 800088c:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <HAL_UART_MspInit+0x90>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000898:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <HAL_UART_MspInit+0x90>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	4a14      	ldr	r2, [pc, #80]	; (80008f0 <HAL_UART_MspInit+0x90>)
 800089e:	f043 0304 	orr.w	r3, r3, #4
 80008a2:	6193      	str	r3, [r2, #24]
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <HAL_UART_MspInit+0x90>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	f003 0304 	and.w	r3, r3, #4
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	2302      	movs	r3, #2
 80008b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ba:	2303      	movs	r3, #3
 80008bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008be:	f107 0310 	add.w	r3, r7, #16
 80008c2:	4619      	mov	r1, r3
 80008c4:	480b      	ldr	r0, [pc, #44]	; (80008f4 <HAL_UART_MspInit+0x94>)
 80008c6:	f000 fa2f 	bl	8000d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d8:	f107 0310 	add.w	r3, r7, #16
 80008dc:	4619      	mov	r1, r3
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <HAL_UART_MspInit+0x94>)
 80008e0:	f000 fa22 	bl	8000d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008e4:	bf00      	nop
 80008e6:	3720      	adds	r7, #32
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40013800 	.word	0x40013800
 80008f0:	40021000 	.word	0x40021000
 80008f4:	40010800 	.word	0x40010800

080008f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr

08000904 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <HardFault_Handler+0x4>

0800090a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800090e:	e7fe      	b.n	800090e <MemManage_Handler+0x4>

08000910 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <BusFault_Handler+0x4>

08000916 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800091a:	e7fe      	b.n	800091a <UsageFault_Handler+0x4>

0800091c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr

08000928 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr

08000934 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr

08000940 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000944:	f000 f8ce 	bl	8000ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}

0800094c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <_sbrk+0x50>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d102      	bne.n	8000962 <_sbrk+0x16>
		heap_end = &end;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <_sbrk+0x50>)
 800095e:	4a10      	ldr	r2, [pc, #64]	; (80009a0 <_sbrk+0x54>)
 8000960:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <_sbrk+0x50>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <_sbrk+0x50>)
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4413      	add	r3, r2
 8000970:	466a      	mov	r2, sp
 8000972:	4293      	cmp	r3, r2
 8000974:	d907      	bls.n	8000986 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000976:	f002 ff63 	bl	8003840 <__errno>
 800097a:	4602      	mov	r2, r0
 800097c:	230c      	movs	r3, #12
 800097e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000980:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000984:	e006      	b.n	8000994 <_sbrk+0x48>
	}

	heap_end += incr;
 8000986:	4b05      	ldr	r3, [pc, #20]	; (800099c <_sbrk+0x50>)
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4413      	add	r3, r2
 800098e:	4a03      	ldr	r2, [pc, #12]	; (800099c <_sbrk+0x50>)
 8000990:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000992:	68fb      	ldr	r3, [r7, #12]
}
 8000994:	4618      	mov	r0, r3
 8000996:	3710      	adds	r7, #16
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	200000b8 	.word	0x200000b8
 80009a0:	200001c8 	.word	0x200001c8

080009a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80009a8:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <SystemInit+0x5c>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a14      	ldr	r2, [pc, #80]	; (8000a00 <SystemInit+0x5c>)
 80009ae:	f043 0301 	orr.w	r3, r3, #1
 80009b2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <SystemInit+0x5c>)
 80009b6:	685a      	ldr	r2, [r3, #4]
 80009b8:	4911      	ldr	r1, [pc, #68]	; (8000a00 <SystemInit+0x5c>)
 80009ba:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <SystemInit+0x60>)
 80009bc:	4013      	ands	r3, r2
 80009be:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80009c0:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <SystemInit+0x5c>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a0e      	ldr	r2, [pc, #56]	; (8000a00 <SystemInit+0x5c>)
 80009c6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80009ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009ce:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009d0:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <SystemInit+0x5c>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <SystemInit+0x5c>)
 80009d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009da:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <SystemInit+0x5c>)
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	4a07      	ldr	r2, [pc, #28]	; (8000a00 <SystemInit+0x5c>)
 80009e2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80009e6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <SystemInit+0x5c>)
 80009ea:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80009ee:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <SystemInit+0x64>)
 80009f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009f6:	609a      	str	r2, [r3, #8]
#endif 
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr
 8000a00:	40021000 	.word	0x40021000
 8000a04:	f8ff0000 	.word	0xf8ff0000
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000a0c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000a0e:	e003      	b.n	8000a18 <LoopCopyDataInit>

08000a10 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a10:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000a12:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000a14:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000a16:	3104      	adds	r1, #4

08000a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000a18:	480a      	ldr	r0, [pc, #40]	; (8000a44 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000a1c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000a1e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000a20:	d3f6      	bcc.n	8000a10 <CopyDataInit>
  ldr r2, =_sbss
 8000a22:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000a24:	e002      	b.n	8000a2c <LoopFillZerobss>

08000a26 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000a26:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000a28:	f842 3b04 	str.w	r3, [r2], #4

08000a2c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000a2e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a30:	d3f9      	bcc.n	8000a26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a32:	f7ff ffb7 	bl	80009a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a36:	f002 ff09 	bl	800384c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a3a:	f7ff fbcb 	bl	80001d4 <main>
  bx lr
 8000a3e:	4770      	bx	lr
  ldr r3, =_sidata
 8000a40:	08004354 	.word	0x08004354
  ldr r0, =_sdata
 8000a44:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a48:	2000009c 	.word	0x2000009c
  ldr r2, =_sbss
 8000a4c:	2000009c 	.word	0x2000009c
  ldr r3, = _ebss
 8000a50:	200001c4 	.word	0x200001c4

08000a54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a54:	e7fe      	b.n	8000a54 <ADC1_2_IRQHandler>
	...

08000a58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <HAL_Init+0x28>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a07      	ldr	r2, [pc, #28]	; (8000a80 <HAL_Init+0x28>)
 8000a62:	f043 0310 	orr.w	r3, r3, #16
 8000a66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a68:	2003      	movs	r0, #3
 8000a6a:	f000 f929 	bl	8000cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a6e:	2000      	movs	r0, #0
 8000a70:	f000 f808 	bl	8000a84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a74:	f7ff fe78 	bl	8000768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a78:	2300      	movs	r3, #0
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40022000 	.word	0x40022000

08000a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a8c:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <HAL_InitTick+0x54>)
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <HAL_InitTick+0x58>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	4619      	mov	r1, r3
 8000a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 f933 	bl	8000d0e <HAL_SYSTICK_Config>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e00e      	b.n	8000ad0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2b0f      	cmp	r3, #15
 8000ab6:	d80a      	bhi.n	8000ace <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	6879      	ldr	r1, [r7, #4]
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	f000 f909 	bl	8000cd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ac4:	4a06      	ldr	r2, [pc, #24]	; (8000ae0 <HAL_InitTick+0x5c>)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aca:	2300      	movs	r3, #0
 8000acc:	e000      	b.n	8000ad0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000000 	.word	0x20000000
 8000adc:	20000008 	.word	0x20000008
 8000ae0:	20000004 	.word	0x20000004

08000ae4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae8:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <HAL_IncTick+0x1c>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	461a      	mov	r2, r3
 8000aee:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <HAL_IncTick+0x20>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4413      	add	r3, r2
 8000af4:	4a03      	ldr	r2, [pc, #12]	; (8000b04 <HAL_IncTick+0x20>)
 8000af6:	6013      	str	r3, [r2, #0]
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr
 8000b00:	20000008 	.word	0x20000008
 8000b04:	200001bc 	.word	0x200001bc

08000b08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b0c:	4b02      	ldr	r3, [pc, #8]	; (8000b18 <HAL_GetTick+0x10>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr
 8000b18:	200001bc 	.word	0x200001bc

08000b1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b24:	f7ff fff0 	bl	8000b08 <HAL_GetTick>
 8000b28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b34:	d005      	beq.n	8000b42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b36:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <HAL_Delay+0x40>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	4413      	add	r3, r2
 8000b40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b42:	bf00      	nop
 8000b44:	f7ff ffe0 	bl	8000b08 <HAL_GetTick>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	68fa      	ldr	r2, [r7, #12]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d8f7      	bhi.n	8000b44 <HAL_Delay+0x28>
  {
  }
}
 8000b54:	bf00      	nop
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000008 	.word	0x20000008

08000b60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b76:	68ba      	ldr	r2, [r7, #8]
 8000b78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b92:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	60d3      	str	r3, [r2, #12]
}
 8000b98:	bf00      	nop
 8000b9a:	3714      	adds	r7, #20
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bac:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	0a1b      	lsrs	r3, r3, #8
 8000bb2:	f003 0307 	and.w	r3, r3, #7
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	6039      	str	r1, [r7, #0]
 8000bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	db0a      	blt.n	8000bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	490c      	ldr	r1, [pc, #48]	; (8000c10 <__NVIC_SetPriority+0x4c>)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	0112      	lsls	r2, r2, #4
 8000be4:	b2d2      	uxtb	r2, r2
 8000be6:	440b      	add	r3, r1
 8000be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bec:	e00a      	b.n	8000c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	4908      	ldr	r1, [pc, #32]	; (8000c14 <__NVIC_SetPriority+0x50>)
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	f003 030f 	and.w	r3, r3, #15
 8000bfa:	3b04      	subs	r3, #4
 8000bfc:	0112      	lsls	r2, r2, #4
 8000bfe:	b2d2      	uxtb	r2, r2
 8000c00:	440b      	add	r3, r1
 8000c02:	761a      	strb	r2, [r3, #24]
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc80      	pop	{r7}
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000e100 	.word	0xe000e100
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b089      	sub	sp, #36	; 0x24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	f1c3 0307 	rsb	r3, r3, #7
 8000c32:	2b04      	cmp	r3, #4
 8000c34:	bf28      	it	cs
 8000c36:	2304      	movcs	r3, #4
 8000c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	2b06      	cmp	r3, #6
 8000c40:	d902      	bls.n	8000c48 <NVIC_EncodePriority+0x30>
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3b03      	subs	r3, #3
 8000c46:	e000      	b.n	8000c4a <NVIC_EncodePriority+0x32>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	43da      	mvns	r2, r3
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	401a      	ands	r2, r3
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6a:	43d9      	mvns	r1, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c70:	4313      	orrs	r3, r2
         );
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3724      	adds	r7, #36	; 0x24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr

08000c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c8c:	d301      	bcc.n	8000c92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e00f      	b.n	8000cb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c92:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <SysTick_Config+0x40>)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c9a:	210f      	movs	r1, #15
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ca0:	f7ff ff90 	bl	8000bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca4:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <SysTick_Config+0x40>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000caa:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <SysTick_Config+0x40>)
 8000cac:	2207      	movs	r2, #7
 8000cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	e000e010 	.word	0xe000e010

08000cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f7ff ff49 	bl	8000b60 <__NVIC_SetPriorityGrouping>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b086      	sub	sp, #24
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	4603      	mov	r3, r0
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	607a      	str	r2, [r7, #4]
 8000ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce8:	f7ff ff5e 	bl	8000ba8 <__NVIC_GetPriorityGrouping>
 8000cec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	68b9      	ldr	r1, [r7, #8]
 8000cf2:	6978      	ldr	r0, [r7, #20]
 8000cf4:	f7ff ff90 	bl	8000c18 <NVIC_EncodePriority>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cfe:	4611      	mov	r1, r2
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff5f 	bl	8000bc4 <__NVIC_SetPriority>
}
 8000d06:	bf00      	nop
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff ffb0 	bl	8000c7c <SysTick_Config>
 8000d1c:	4603      	mov	r3, r0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
	...

08000d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b08b      	sub	sp, #44	; 0x2c
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d32:	2300      	movs	r3, #0
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d36:	2300      	movs	r3, #0
 8000d38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d3a:	e127      	b.n	8000f8c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	69fa      	ldr	r2, [r7, #28]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	f040 8116 	bne.w	8000f86 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	2b12      	cmp	r3, #18
 8000d60:	d034      	beq.n	8000dcc <HAL_GPIO_Init+0xa4>
 8000d62:	2b12      	cmp	r3, #18
 8000d64:	d80d      	bhi.n	8000d82 <HAL_GPIO_Init+0x5a>
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d02b      	beq.n	8000dc2 <HAL_GPIO_Init+0x9a>
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d804      	bhi.n	8000d78 <HAL_GPIO_Init+0x50>
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d031      	beq.n	8000dd6 <HAL_GPIO_Init+0xae>
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d01c      	beq.n	8000db0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d76:	e048      	b.n	8000e0a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d78:	2b03      	cmp	r3, #3
 8000d7a:	d043      	beq.n	8000e04 <HAL_GPIO_Init+0xdc>
 8000d7c:	2b11      	cmp	r3, #17
 8000d7e:	d01b      	beq.n	8000db8 <HAL_GPIO_Init+0x90>
          break;
 8000d80:	e043      	b.n	8000e0a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d82:	4a89      	ldr	r2, [pc, #548]	; (8000fa8 <HAL_GPIO_Init+0x280>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d026      	beq.n	8000dd6 <HAL_GPIO_Init+0xae>
 8000d88:	4a87      	ldr	r2, [pc, #540]	; (8000fa8 <HAL_GPIO_Init+0x280>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d806      	bhi.n	8000d9c <HAL_GPIO_Init+0x74>
 8000d8e:	4a87      	ldr	r2, [pc, #540]	; (8000fac <HAL_GPIO_Init+0x284>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d020      	beq.n	8000dd6 <HAL_GPIO_Init+0xae>
 8000d94:	4a86      	ldr	r2, [pc, #536]	; (8000fb0 <HAL_GPIO_Init+0x288>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d01d      	beq.n	8000dd6 <HAL_GPIO_Init+0xae>
          break;
 8000d9a:	e036      	b.n	8000e0a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d9c:	4a85      	ldr	r2, [pc, #532]	; (8000fb4 <HAL_GPIO_Init+0x28c>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d019      	beq.n	8000dd6 <HAL_GPIO_Init+0xae>
 8000da2:	4a85      	ldr	r2, [pc, #532]	; (8000fb8 <HAL_GPIO_Init+0x290>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d016      	beq.n	8000dd6 <HAL_GPIO_Init+0xae>
 8000da8:	4a84      	ldr	r2, [pc, #528]	; (8000fbc <HAL_GPIO_Init+0x294>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d013      	beq.n	8000dd6 <HAL_GPIO_Init+0xae>
          break;
 8000dae:	e02c      	b.n	8000e0a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	623b      	str	r3, [r7, #32]
          break;
 8000db6:	e028      	b.n	8000e0a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	3304      	adds	r3, #4
 8000dbe:	623b      	str	r3, [r7, #32]
          break;
 8000dc0:	e023      	b.n	8000e0a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	3308      	adds	r3, #8
 8000dc8:	623b      	str	r3, [r7, #32]
          break;
 8000dca:	e01e      	b.n	8000e0a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	330c      	adds	r3, #12
 8000dd2:	623b      	str	r3, [r7, #32]
          break;
 8000dd4:	e019      	b.n	8000e0a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d102      	bne.n	8000de4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dde:	2304      	movs	r3, #4
 8000de0:	623b      	str	r3, [r7, #32]
          break;
 8000de2:	e012      	b.n	8000e0a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d105      	bne.n	8000df8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dec:	2308      	movs	r3, #8
 8000dee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	69fa      	ldr	r2, [r7, #28]
 8000df4:	611a      	str	r2, [r3, #16]
          break;
 8000df6:	e008      	b.n	8000e0a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000df8:	2308      	movs	r3, #8
 8000dfa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	69fa      	ldr	r2, [r7, #28]
 8000e00:	615a      	str	r2, [r3, #20]
          break;
 8000e02:	e002      	b.n	8000e0a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e04:	2300      	movs	r3, #0
 8000e06:	623b      	str	r3, [r7, #32]
          break;
 8000e08:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	2bff      	cmp	r3, #255	; 0xff
 8000e0e:	d801      	bhi.n	8000e14 <HAL_GPIO_Init+0xec>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	e001      	b.n	8000e18 <HAL_GPIO_Init+0xf0>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3304      	adds	r3, #4
 8000e18:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	2bff      	cmp	r3, #255	; 0xff
 8000e1e:	d802      	bhi.n	8000e26 <HAL_GPIO_Init+0xfe>
 8000e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	e002      	b.n	8000e2c <HAL_GPIO_Init+0x104>
 8000e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e28:	3b08      	subs	r3, #8
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	210f      	movs	r1, #15
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	401a      	ands	r2, r3
 8000e3e:	6a39      	ldr	r1, [r7, #32]
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	fa01 f303 	lsl.w	r3, r1, r3
 8000e46:	431a      	orrs	r2, r3
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	f000 8096 	beq.w	8000f86 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e5a:	4b59      	ldr	r3, [pc, #356]	; (8000fc0 <HAL_GPIO_Init+0x298>)
 8000e5c:	699b      	ldr	r3, [r3, #24]
 8000e5e:	4a58      	ldr	r2, [pc, #352]	; (8000fc0 <HAL_GPIO_Init+0x298>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6193      	str	r3, [r2, #24]
 8000e66:	4b56      	ldr	r3, [pc, #344]	; (8000fc0 <HAL_GPIO_Init+0x298>)
 8000e68:	699b      	ldr	r3, [r3, #24]
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e72:	4a54      	ldr	r2, [pc, #336]	; (8000fc4 <HAL_GPIO_Init+0x29c>)
 8000e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e76:	089b      	lsrs	r3, r3, #2
 8000e78:	3302      	adds	r3, #2
 8000e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e7e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e82:	f003 0303 	and.w	r3, r3, #3
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	220f      	movs	r2, #15
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	68fa      	ldr	r2, [r7, #12]
 8000e92:	4013      	ands	r3, r2
 8000e94:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a4b      	ldr	r2, [pc, #300]	; (8000fc8 <HAL_GPIO_Init+0x2a0>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d013      	beq.n	8000ec6 <HAL_GPIO_Init+0x19e>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a4a      	ldr	r2, [pc, #296]	; (8000fcc <HAL_GPIO_Init+0x2a4>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d00d      	beq.n	8000ec2 <HAL_GPIO_Init+0x19a>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a49      	ldr	r2, [pc, #292]	; (8000fd0 <HAL_GPIO_Init+0x2a8>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d007      	beq.n	8000ebe <HAL_GPIO_Init+0x196>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a48      	ldr	r2, [pc, #288]	; (8000fd4 <HAL_GPIO_Init+0x2ac>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d101      	bne.n	8000eba <HAL_GPIO_Init+0x192>
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e006      	b.n	8000ec8 <HAL_GPIO_Init+0x1a0>
 8000eba:	2304      	movs	r3, #4
 8000ebc:	e004      	b.n	8000ec8 <HAL_GPIO_Init+0x1a0>
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	e002      	b.n	8000ec8 <HAL_GPIO_Init+0x1a0>
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e000      	b.n	8000ec8 <HAL_GPIO_Init+0x1a0>
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eca:	f002 0203 	and.w	r2, r2, #3
 8000ece:	0092      	lsls	r2, r2, #2
 8000ed0:	4093      	lsls	r3, r2
 8000ed2:	68fa      	ldr	r2, [r7, #12]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ed8:	493a      	ldr	r1, [pc, #232]	; (8000fc4 <HAL_GPIO_Init+0x29c>)
 8000eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000edc:	089b      	lsrs	r3, r3, #2
 8000ede:	3302      	adds	r3, #2
 8000ee0:	68fa      	ldr	r2, [r7, #12]
 8000ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d006      	beq.n	8000f00 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ef2:	4b39      	ldr	r3, [pc, #228]	; (8000fd8 <HAL_GPIO_Init+0x2b0>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	4938      	ldr	r1, [pc, #224]	; (8000fd8 <HAL_GPIO_Init+0x2b0>)
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	600b      	str	r3, [r1, #0]
 8000efe:	e006      	b.n	8000f0e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f00:	4b35      	ldr	r3, [pc, #212]	; (8000fd8 <HAL_GPIO_Init+0x2b0>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	43db      	mvns	r3, r3
 8000f08:	4933      	ldr	r1, [pc, #204]	; (8000fd8 <HAL_GPIO_Init+0x2b0>)
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d006      	beq.n	8000f28 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f1a:	4b2f      	ldr	r3, [pc, #188]	; (8000fd8 <HAL_GPIO_Init+0x2b0>)
 8000f1c:	685a      	ldr	r2, [r3, #4]
 8000f1e:	492e      	ldr	r1, [pc, #184]	; (8000fd8 <HAL_GPIO_Init+0x2b0>)
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	604b      	str	r3, [r1, #4]
 8000f26:	e006      	b.n	8000f36 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f28:	4b2b      	ldr	r3, [pc, #172]	; (8000fd8 <HAL_GPIO_Init+0x2b0>)
 8000f2a:	685a      	ldr	r2, [r3, #4]
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	4929      	ldr	r1, [pc, #164]	; (8000fd8 <HAL_GPIO_Init+0x2b0>)
 8000f32:	4013      	ands	r3, r2
 8000f34:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d006      	beq.n	8000f50 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f42:	4b25      	ldr	r3, [pc, #148]	; (8000fd8 <HAL_GPIO_Init+0x2b0>)
 8000f44:	689a      	ldr	r2, [r3, #8]
 8000f46:	4924      	ldr	r1, [pc, #144]	; (8000fd8 <HAL_GPIO_Init+0x2b0>)
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	608b      	str	r3, [r1, #8]
 8000f4e:	e006      	b.n	8000f5e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f50:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <HAL_GPIO_Init+0x2b0>)
 8000f52:	689a      	ldr	r2, [r3, #8]
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	43db      	mvns	r3, r3
 8000f58:	491f      	ldr	r1, [pc, #124]	; (8000fd8 <HAL_GPIO_Init+0x2b0>)
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d006      	beq.n	8000f78 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f6a:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <HAL_GPIO_Init+0x2b0>)
 8000f6c:	68da      	ldr	r2, [r3, #12]
 8000f6e:	491a      	ldr	r1, [pc, #104]	; (8000fd8 <HAL_GPIO_Init+0x2b0>)
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	60cb      	str	r3, [r1, #12]
 8000f76:	e006      	b.n	8000f86 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f78:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <HAL_GPIO_Init+0x2b0>)
 8000f7a:	68da      	ldr	r2, [r3, #12]
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	4915      	ldr	r1, [pc, #84]	; (8000fd8 <HAL_GPIO_Init+0x2b0>)
 8000f82:	4013      	ands	r3, r2
 8000f84:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f88:	3301      	adds	r3, #1
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f92:	fa22 f303 	lsr.w	r3, r2, r3
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f47f aed0 	bne.w	8000d3c <HAL_GPIO_Init+0x14>
  }
}
 8000f9c:	bf00      	nop
 8000f9e:	372c      	adds	r7, #44	; 0x2c
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	10210000 	.word	0x10210000
 8000fac:	10110000 	.word	0x10110000
 8000fb0:	10120000 	.word	0x10120000
 8000fb4:	10310000 	.word	0x10310000
 8000fb8:	10320000 	.word	0x10320000
 8000fbc:	10220000 	.word	0x10220000
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	40010000 	.word	0x40010000
 8000fc8:	40010800 	.word	0x40010800
 8000fcc:	40010c00 	.word	0x40010c00
 8000fd0:	40011000 	.word	0x40011000
 8000fd4:	40011400 	.word	0x40011400
 8000fd8:	40010400 	.word	0x40010400

08000fdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	807b      	strh	r3, [r7, #2]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fec:	787b      	ldrb	r3, [r7, #1]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ff2:	887a      	ldrh	r2, [r7, #2]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ff8:	e003      	b.n	8001002 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ffa:	887b      	ldrh	r3, [r7, #2]
 8000ffc:	041a      	lsls	r2, r3, #16
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	611a      	str	r2, [r3, #16]
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr

0800100c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d101      	bne.n	800101e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e26c      	b.n	80014f8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	2b00      	cmp	r3, #0
 8001028:	f000 8087 	beq.w	800113a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800102c:	4b92      	ldr	r3, [pc, #584]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 030c 	and.w	r3, r3, #12
 8001034:	2b04      	cmp	r3, #4
 8001036:	d00c      	beq.n	8001052 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001038:	4b8f      	ldr	r3, [pc, #572]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 030c 	and.w	r3, r3, #12
 8001040:	2b08      	cmp	r3, #8
 8001042:	d112      	bne.n	800106a <HAL_RCC_OscConfig+0x5e>
 8001044:	4b8c      	ldr	r3, [pc, #560]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800104c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001050:	d10b      	bne.n	800106a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001052:	4b89      	ldr	r3, [pc, #548]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d06c      	beq.n	8001138 <HAL_RCC_OscConfig+0x12c>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d168      	bne.n	8001138 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e246      	b.n	80014f8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001072:	d106      	bne.n	8001082 <HAL_RCC_OscConfig+0x76>
 8001074:	4b80      	ldr	r3, [pc, #512]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a7f      	ldr	r2, [pc, #508]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 800107a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800107e:	6013      	str	r3, [r2, #0]
 8001080:	e02e      	b.n	80010e0 <HAL_RCC_OscConfig+0xd4>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d10c      	bne.n	80010a4 <HAL_RCC_OscConfig+0x98>
 800108a:	4b7b      	ldr	r3, [pc, #492]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a7a      	ldr	r2, [pc, #488]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 8001090:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001094:	6013      	str	r3, [r2, #0]
 8001096:	4b78      	ldr	r3, [pc, #480]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a77      	ldr	r2, [pc, #476]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 800109c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010a0:	6013      	str	r3, [r2, #0]
 80010a2:	e01d      	b.n	80010e0 <HAL_RCC_OscConfig+0xd4>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010ac:	d10c      	bne.n	80010c8 <HAL_RCC_OscConfig+0xbc>
 80010ae:	4b72      	ldr	r3, [pc, #456]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a71      	ldr	r2, [pc, #452]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 80010b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b8:	6013      	str	r3, [r2, #0]
 80010ba:	4b6f      	ldr	r3, [pc, #444]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a6e      	ldr	r2, [pc, #440]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 80010c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	e00b      	b.n	80010e0 <HAL_RCC_OscConfig+0xd4>
 80010c8:	4b6b      	ldr	r3, [pc, #428]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a6a      	ldr	r2, [pc, #424]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 80010ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	4b68      	ldr	r3, [pc, #416]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a67      	ldr	r2, [pc, #412]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 80010da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d013      	beq.n	8001110 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e8:	f7ff fd0e 	bl	8000b08 <HAL_GetTick>
 80010ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ee:	e008      	b.n	8001102 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010f0:	f7ff fd0a 	bl	8000b08 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b64      	cmp	r3, #100	; 0x64
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e1fa      	b.n	80014f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001102:	4b5d      	ldr	r3, [pc, #372]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d0f0      	beq.n	80010f0 <HAL_RCC_OscConfig+0xe4>
 800110e:	e014      	b.n	800113a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001110:	f7ff fcfa 	bl	8000b08 <HAL_GetTick>
 8001114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001116:	e008      	b.n	800112a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001118:	f7ff fcf6 	bl	8000b08 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b64      	cmp	r3, #100	; 0x64
 8001124:	d901      	bls.n	800112a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e1e6      	b.n	80014f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800112a:	4b53      	ldr	r3, [pc, #332]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1f0      	bne.n	8001118 <HAL_RCC_OscConfig+0x10c>
 8001136:	e000      	b.n	800113a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	2b00      	cmp	r3, #0
 8001144:	d063      	beq.n	800120e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001146:	4b4c      	ldr	r3, [pc, #304]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f003 030c 	and.w	r3, r3, #12
 800114e:	2b00      	cmp	r3, #0
 8001150:	d00b      	beq.n	800116a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001152:	4b49      	ldr	r3, [pc, #292]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 030c 	and.w	r3, r3, #12
 800115a:	2b08      	cmp	r3, #8
 800115c:	d11c      	bne.n	8001198 <HAL_RCC_OscConfig+0x18c>
 800115e:	4b46      	ldr	r3, [pc, #280]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d116      	bne.n	8001198 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800116a:	4b43      	ldr	r3, [pc, #268]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d005      	beq.n	8001182 <HAL_RCC_OscConfig+0x176>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	691b      	ldr	r3, [r3, #16]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d001      	beq.n	8001182 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e1ba      	b.n	80014f8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001182:	4b3d      	ldr	r3, [pc, #244]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	4939      	ldr	r1, [pc, #228]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 8001192:	4313      	orrs	r3, r2
 8001194:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001196:	e03a      	b.n	800120e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	691b      	ldr	r3, [r3, #16]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d020      	beq.n	80011e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011a0:	4b36      	ldr	r3, [pc, #216]	; (800127c <HAL_RCC_OscConfig+0x270>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a6:	f7ff fcaf 	bl	8000b08 <HAL_GetTick>
 80011aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ac:	e008      	b.n	80011c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011ae:	f7ff fcab 	bl	8000b08 <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d901      	bls.n	80011c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e19b      	b.n	80014f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c0:	4b2d      	ldr	r3, [pc, #180]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d0f0      	beq.n	80011ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011cc:	4b2a      	ldr	r3, [pc, #168]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	695b      	ldr	r3, [r3, #20]
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	4927      	ldr	r1, [pc, #156]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	4313      	orrs	r3, r2
 80011de:	600b      	str	r3, [r1, #0]
 80011e0:	e015      	b.n	800120e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011e2:	4b26      	ldr	r3, [pc, #152]	; (800127c <HAL_RCC_OscConfig+0x270>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e8:	f7ff fc8e 	bl	8000b08 <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011f0:	f7ff fc8a 	bl	8000b08 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e17a      	b.n	80014f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001202:	4b1d      	ldr	r3, [pc, #116]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1f0      	bne.n	80011f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0308 	and.w	r3, r3, #8
 8001216:	2b00      	cmp	r3, #0
 8001218:	d03a      	beq.n	8001290 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	699b      	ldr	r3, [r3, #24]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d019      	beq.n	8001256 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001222:	4b17      	ldr	r3, [pc, #92]	; (8001280 <HAL_RCC_OscConfig+0x274>)
 8001224:	2201      	movs	r2, #1
 8001226:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001228:	f7ff fc6e 	bl	8000b08 <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001230:	f7ff fc6a 	bl	8000b08 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e15a      	b.n	80014f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001242:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 8001244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d0f0      	beq.n	8001230 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800124e:	2001      	movs	r0, #1
 8001250:	f000 fada 	bl	8001808 <RCC_Delay>
 8001254:	e01c      	b.n	8001290 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001256:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <HAL_RCC_OscConfig+0x274>)
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800125c:	f7ff fc54 	bl	8000b08 <HAL_GetTick>
 8001260:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001262:	e00f      	b.n	8001284 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001264:	f7ff fc50 	bl	8000b08 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d908      	bls.n	8001284 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e140      	b.n	80014f8 <HAL_RCC_OscConfig+0x4ec>
 8001276:	bf00      	nop
 8001278:	40021000 	.word	0x40021000
 800127c:	42420000 	.word	0x42420000
 8001280:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001284:	4b9e      	ldr	r3, [pc, #632]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 8001286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d1e9      	bne.n	8001264 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0304 	and.w	r3, r3, #4
 8001298:	2b00      	cmp	r3, #0
 800129a:	f000 80a6 	beq.w	80013ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800129e:	2300      	movs	r3, #0
 80012a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012a2:	4b97      	ldr	r3, [pc, #604]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d10d      	bne.n	80012ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ae:	4b94      	ldr	r3, [pc, #592]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	4a93      	ldr	r2, [pc, #588]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 80012b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b8:	61d3      	str	r3, [r2, #28]
 80012ba:	4b91      	ldr	r3, [pc, #580]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012c6:	2301      	movs	r3, #1
 80012c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ca:	4b8e      	ldr	r3, [pc, #568]	; (8001504 <HAL_RCC_OscConfig+0x4f8>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d118      	bne.n	8001308 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012d6:	4b8b      	ldr	r3, [pc, #556]	; (8001504 <HAL_RCC_OscConfig+0x4f8>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a8a      	ldr	r2, [pc, #552]	; (8001504 <HAL_RCC_OscConfig+0x4f8>)
 80012dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012e2:	f7ff fc11 	bl	8000b08 <HAL_GetTick>
 80012e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e8:	e008      	b.n	80012fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ea:	f7ff fc0d 	bl	8000b08 <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b64      	cmp	r3, #100	; 0x64
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e0fd      	b.n	80014f8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012fc:	4b81      	ldr	r3, [pc, #516]	; (8001504 <HAL_RCC_OscConfig+0x4f8>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001304:	2b00      	cmp	r3, #0
 8001306:	d0f0      	beq.n	80012ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d106      	bne.n	800131e <HAL_RCC_OscConfig+0x312>
 8001310:	4b7b      	ldr	r3, [pc, #492]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 8001312:	6a1b      	ldr	r3, [r3, #32]
 8001314:	4a7a      	ldr	r2, [pc, #488]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 8001316:	f043 0301 	orr.w	r3, r3, #1
 800131a:	6213      	str	r3, [r2, #32]
 800131c:	e02d      	b.n	800137a <HAL_RCC_OscConfig+0x36e>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d10c      	bne.n	8001340 <HAL_RCC_OscConfig+0x334>
 8001326:	4b76      	ldr	r3, [pc, #472]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 8001328:	6a1b      	ldr	r3, [r3, #32]
 800132a:	4a75      	ldr	r2, [pc, #468]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 800132c:	f023 0301 	bic.w	r3, r3, #1
 8001330:	6213      	str	r3, [r2, #32]
 8001332:	4b73      	ldr	r3, [pc, #460]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 8001334:	6a1b      	ldr	r3, [r3, #32]
 8001336:	4a72      	ldr	r2, [pc, #456]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 8001338:	f023 0304 	bic.w	r3, r3, #4
 800133c:	6213      	str	r3, [r2, #32]
 800133e:	e01c      	b.n	800137a <HAL_RCC_OscConfig+0x36e>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	2b05      	cmp	r3, #5
 8001346:	d10c      	bne.n	8001362 <HAL_RCC_OscConfig+0x356>
 8001348:	4b6d      	ldr	r3, [pc, #436]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 800134a:	6a1b      	ldr	r3, [r3, #32]
 800134c:	4a6c      	ldr	r2, [pc, #432]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 800134e:	f043 0304 	orr.w	r3, r3, #4
 8001352:	6213      	str	r3, [r2, #32]
 8001354:	4b6a      	ldr	r3, [pc, #424]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 8001356:	6a1b      	ldr	r3, [r3, #32]
 8001358:	4a69      	ldr	r2, [pc, #420]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	6213      	str	r3, [r2, #32]
 8001360:	e00b      	b.n	800137a <HAL_RCC_OscConfig+0x36e>
 8001362:	4b67      	ldr	r3, [pc, #412]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 8001364:	6a1b      	ldr	r3, [r3, #32]
 8001366:	4a66      	ldr	r2, [pc, #408]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 8001368:	f023 0301 	bic.w	r3, r3, #1
 800136c:	6213      	str	r3, [r2, #32]
 800136e:	4b64      	ldr	r3, [pc, #400]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 8001370:	6a1b      	ldr	r3, [r3, #32]
 8001372:	4a63      	ldr	r2, [pc, #396]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 8001374:	f023 0304 	bic.w	r3, r3, #4
 8001378:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d015      	beq.n	80013ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001382:	f7ff fbc1 	bl	8000b08 <HAL_GetTick>
 8001386:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001388:	e00a      	b.n	80013a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800138a:	f7ff fbbd 	bl	8000b08 <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	f241 3288 	movw	r2, #5000	; 0x1388
 8001398:	4293      	cmp	r3, r2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e0ab      	b.n	80014f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a0:	4b57      	ldr	r3, [pc, #348]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d0ee      	beq.n	800138a <HAL_RCC_OscConfig+0x37e>
 80013ac:	e014      	b.n	80013d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ae:	f7ff fbab 	bl	8000b08 <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013b4:	e00a      	b.n	80013cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013b6:	f7ff fba7 	bl	8000b08 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e095      	b.n	80014f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013cc:	4b4c      	ldr	r3, [pc, #304]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 80013ce:	6a1b      	ldr	r3, [r3, #32]
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1ee      	bne.n	80013b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013d8:	7dfb      	ldrb	r3, [r7, #23]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d105      	bne.n	80013ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013de:	4b48      	ldr	r3, [pc, #288]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	4a47      	ldr	r2, [pc, #284]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 80013e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f000 8081 	beq.w	80014f6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013f4:	4b42      	ldr	r3, [pc, #264]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 030c 	and.w	r3, r3, #12
 80013fc:	2b08      	cmp	r3, #8
 80013fe:	d061      	beq.n	80014c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	69db      	ldr	r3, [r3, #28]
 8001404:	2b02      	cmp	r3, #2
 8001406:	d146      	bne.n	8001496 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001408:	4b3f      	ldr	r3, [pc, #252]	; (8001508 <HAL_RCC_OscConfig+0x4fc>)
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140e:	f7ff fb7b 	bl	8000b08 <HAL_GetTick>
 8001412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001416:	f7ff fb77 	bl	8000b08 <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e067      	b.n	80014f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001428:	4b35      	ldr	r3, [pc, #212]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1f0      	bne.n	8001416 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a1b      	ldr	r3, [r3, #32]
 8001438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800143c:	d108      	bne.n	8001450 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800143e:	4b30      	ldr	r3, [pc, #192]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	492d      	ldr	r1, [pc, #180]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 800144c:	4313      	orrs	r3, r2
 800144e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001450:	4b2b      	ldr	r3, [pc, #172]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a19      	ldr	r1, [r3, #32]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001460:	430b      	orrs	r3, r1
 8001462:	4927      	ldr	r1, [pc, #156]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 8001464:	4313      	orrs	r3, r2
 8001466:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001468:	4b27      	ldr	r3, [pc, #156]	; (8001508 <HAL_RCC_OscConfig+0x4fc>)
 800146a:	2201      	movs	r2, #1
 800146c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146e:	f7ff fb4b 	bl	8000b08 <HAL_GetTick>
 8001472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001474:	e008      	b.n	8001488 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001476:	f7ff fb47 	bl	8000b08 <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e037      	b.n	80014f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001488:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d0f0      	beq.n	8001476 <HAL_RCC_OscConfig+0x46a>
 8001494:	e02f      	b.n	80014f6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001496:	4b1c      	ldr	r3, [pc, #112]	; (8001508 <HAL_RCC_OscConfig+0x4fc>)
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149c:	f7ff fb34 	bl	8000b08 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a4:	f7ff fb30 	bl	8000b08 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e020      	b.n	80014f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b6:	4b12      	ldr	r3, [pc, #72]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1f0      	bne.n	80014a4 <HAL_RCC_OscConfig+0x498>
 80014c2:	e018      	b.n	80014f6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	69db      	ldr	r3, [r3, #28]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d101      	bne.n	80014d0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e013      	b.n	80014f8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014d0:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a1b      	ldr	r3, [r3, #32]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d106      	bne.n	80014f2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d001      	beq.n	80014f6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e000      	b.n	80014f8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40021000 	.word	0x40021000
 8001504:	40007000 	.word	0x40007000
 8001508:	42420060 	.word	0x42420060

0800150c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e0d0      	b.n	80016c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001520:	4b6a      	ldr	r3, [pc, #424]	; (80016cc <HAL_RCC_ClockConfig+0x1c0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	429a      	cmp	r2, r3
 800152c:	d910      	bls.n	8001550 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800152e:	4b67      	ldr	r3, [pc, #412]	; (80016cc <HAL_RCC_ClockConfig+0x1c0>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f023 0207 	bic.w	r2, r3, #7
 8001536:	4965      	ldr	r1, [pc, #404]	; (80016cc <HAL_RCC_ClockConfig+0x1c0>)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	4313      	orrs	r3, r2
 800153c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800153e:	4b63      	ldr	r3, [pc, #396]	; (80016cc <HAL_RCC_ClockConfig+0x1c0>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	429a      	cmp	r2, r3
 800154a:	d001      	beq.n	8001550 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e0b8      	b.n	80016c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d020      	beq.n	800159e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	2b00      	cmp	r3, #0
 8001566:	d005      	beq.n	8001574 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001568:	4b59      	ldr	r3, [pc, #356]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	4a58      	ldr	r2, [pc, #352]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 800156e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001572:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0308 	and.w	r3, r3, #8
 800157c:	2b00      	cmp	r3, #0
 800157e:	d005      	beq.n	800158c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001580:	4b53      	ldr	r3, [pc, #332]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	4a52      	ldr	r2, [pc, #328]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001586:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800158a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800158c:	4b50      	ldr	r3, [pc, #320]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	494d      	ldr	r1, [pc, #308]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 800159a:	4313      	orrs	r3, r2
 800159c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d040      	beq.n	800162c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d107      	bne.n	80015c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b2:	4b47      	ldr	r3, [pc, #284]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d115      	bne.n	80015ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e07f      	b.n	80016c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d107      	bne.n	80015da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ca:	4b41      	ldr	r3, [pc, #260]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d109      	bne.n	80015ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e073      	b.n	80016c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015da:	4b3d      	ldr	r3, [pc, #244]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e06b      	b.n	80016c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015ea:	4b39      	ldr	r3, [pc, #228]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f023 0203 	bic.w	r2, r3, #3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	4936      	ldr	r1, [pc, #216]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 80015f8:	4313      	orrs	r3, r2
 80015fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015fc:	f7ff fa84 	bl	8000b08 <HAL_GetTick>
 8001600:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001602:	e00a      	b.n	800161a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001604:	f7ff fa80 	bl	8000b08 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001612:	4293      	cmp	r3, r2
 8001614:	d901      	bls.n	800161a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e053      	b.n	80016c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800161a:	4b2d      	ldr	r3, [pc, #180]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f003 020c 	and.w	r2, r3, #12
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	429a      	cmp	r2, r3
 800162a:	d1eb      	bne.n	8001604 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800162c:	4b27      	ldr	r3, [pc, #156]	; (80016cc <HAL_RCC_ClockConfig+0x1c0>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0307 	and.w	r3, r3, #7
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	429a      	cmp	r2, r3
 8001638:	d210      	bcs.n	800165c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800163a:	4b24      	ldr	r3, [pc, #144]	; (80016cc <HAL_RCC_ClockConfig+0x1c0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f023 0207 	bic.w	r2, r3, #7
 8001642:	4922      	ldr	r1, [pc, #136]	; (80016cc <HAL_RCC_ClockConfig+0x1c0>)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	4313      	orrs	r3, r2
 8001648:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800164a:	4b20      	ldr	r3, [pc, #128]	; (80016cc <HAL_RCC_ClockConfig+0x1c0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	429a      	cmp	r2, r3
 8001656:	d001      	beq.n	800165c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e032      	b.n	80016c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	2b00      	cmp	r3, #0
 8001666:	d008      	beq.n	800167a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001668:	4b19      	ldr	r3, [pc, #100]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	4916      	ldr	r1, [pc, #88]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001676:	4313      	orrs	r3, r2
 8001678:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0308 	and.w	r3, r3, #8
 8001682:	2b00      	cmp	r3, #0
 8001684:	d009      	beq.n	800169a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001686:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	490e      	ldr	r1, [pc, #56]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001696:	4313      	orrs	r3, r2
 8001698:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800169a:	f000 f821 	bl	80016e0 <HAL_RCC_GetSysClockFreq>
 800169e:	4601      	mov	r1, r0
 80016a0:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	091b      	lsrs	r3, r3, #4
 80016a6:	f003 030f 	and.w	r3, r3, #15
 80016aa:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <HAL_RCC_ClockConfig+0x1c8>)
 80016ac:	5cd3      	ldrb	r3, [r2, r3]
 80016ae:	fa21 f303 	lsr.w	r3, r1, r3
 80016b2:	4a09      	ldr	r2, [pc, #36]	; (80016d8 <HAL_RCC_ClockConfig+0x1cc>)
 80016b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <HAL_RCC_ClockConfig+0x1d0>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff f9e2 	bl	8000a84 <HAL_InitTick>

  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40022000 	.word	0x40022000
 80016d0:	40021000 	.word	0x40021000
 80016d4:	080042a0 	.word	0x080042a0
 80016d8:	20000000 	.word	0x20000000
 80016dc:	20000004 	.word	0x20000004

080016e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016e0:	b490      	push	{r4, r7}
 80016e2:	b08a      	sub	sp, #40	; 0x28
 80016e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80016e6:	4b2a      	ldr	r3, [pc, #168]	; (8001790 <HAL_RCC_GetSysClockFreq+0xb0>)
 80016e8:	1d3c      	adds	r4, r7, #4
 80016ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80016f0:	4b28      	ldr	r3, [pc, #160]	; (8001794 <HAL_RCC_GetSysClockFreq+0xb4>)
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
 80016fa:	2300      	movs	r3, #0
 80016fc:	61bb      	str	r3, [r7, #24]
 80016fe:	2300      	movs	r3, #0
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001706:	2300      	movs	r3, #0
 8001708:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800170a:	4b23      	ldr	r3, [pc, #140]	; (8001798 <HAL_RCC_GetSysClockFreq+0xb8>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f003 030c 	and.w	r3, r3, #12
 8001716:	2b04      	cmp	r3, #4
 8001718:	d002      	beq.n	8001720 <HAL_RCC_GetSysClockFreq+0x40>
 800171a:	2b08      	cmp	r3, #8
 800171c:	d003      	beq.n	8001726 <HAL_RCC_GetSysClockFreq+0x46>
 800171e:	e02d      	b.n	800177c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001720:	4b1e      	ldr	r3, [pc, #120]	; (800179c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001722:	623b      	str	r3, [r7, #32]
      break;
 8001724:	e02d      	b.n	8001782 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	0c9b      	lsrs	r3, r3, #18
 800172a:	f003 030f 	and.w	r3, r3, #15
 800172e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001732:	4413      	add	r3, r2
 8001734:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001738:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d013      	beq.n	800176c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001744:	4b14      	ldr	r3, [pc, #80]	; (8001798 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	0c5b      	lsrs	r3, r3, #17
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001752:	4413      	add	r3, r2
 8001754:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001758:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	4a0f      	ldr	r2, [pc, #60]	; (800179c <HAL_RCC_GetSysClockFreq+0xbc>)
 800175e:	fb02 f203 	mul.w	r2, r2, r3
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	fbb2 f3f3 	udiv	r3, r2, r3
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
 800176a:	e004      	b.n	8001776 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	4a0c      	ldr	r2, [pc, #48]	; (80017a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001770:	fb02 f303 	mul.w	r3, r2, r3
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001778:	623b      	str	r3, [r7, #32]
      break;
 800177a:	e002      	b.n	8001782 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800177c:	4b07      	ldr	r3, [pc, #28]	; (800179c <HAL_RCC_GetSysClockFreq+0xbc>)
 800177e:	623b      	str	r3, [r7, #32]
      break;
 8001780:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001782:	6a3b      	ldr	r3, [r7, #32]
}
 8001784:	4618      	mov	r0, r3
 8001786:	3728      	adds	r7, #40	; 0x28
 8001788:	46bd      	mov	sp, r7
 800178a:	bc90      	pop	{r4, r7}
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	0800428c 	.word	0x0800428c
 8001794:	0800429c 	.word	0x0800429c
 8001798:	40021000 	.word	0x40021000
 800179c:	007a1200 	.word	0x007a1200
 80017a0:	003d0900 	.word	0x003d0900

080017a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017a8:	4b02      	ldr	r3, [pc, #8]	; (80017b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80017aa:	681b      	ldr	r3, [r3, #0]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr
 80017b4:	20000000 	.word	0x20000000

080017b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017bc:	f7ff fff2 	bl	80017a4 <HAL_RCC_GetHCLKFreq>
 80017c0:	4601      	mov	r1, r0
 80017c2:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	0a1b      	lsrs	r3, r3, #8
 80017c8:	f003 0307 	and.w	r3, r3, #7
 80017cc:	4a03      	ldr	r2, [pc, #12]	; (80017dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80017ce:	5cd3      	ldrb	r3, [r2, r3]
 80017d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40021000 	.word	0x40021000
 80017dc:	080042b0 	.word	0x080042b0

080017e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017e4:	f7ff ffde 	bl	80017a4 <HAL_RCC_GetHCLKFreq>
 80017e8:	4601      	mov	r1, r0
 80017ea:	4b05      	ldr	r3, [pc, #20]	; (8001800 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	0adb      	lsrs	r3, r3, #11
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	4a03      	ldr	r2, [pc, #12]	; (8001804 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017f6:	5cd3      	ldrb	r3, [r2, r3]
 80017f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40021000 	.word	0x40021000
 8001804:	080042b0 	.word	0x080042b0

08001808 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001810:	4b0a      	ldr	r3, [pc, #40]	; (800183c <RCC_Delay+0x34>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <RCC_Delay+0x38>)
 8001816:	fba2 2303 	umull	r2, r3, r2, r3
 800181a:	0a5b      	lsrs	r3, r3, #9
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	fb02 f303 	mul.w	r3, r2, r3
 8001822:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001824:	bf00      	nop
  }
  while (Delay --);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	1e5a      	subs	r2, r3, #1
 800182a:	60fa      	str	r2, [r7, #12]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1f9      	bne.n	8001824 <RCC_Delay+0x1c>
}
 8001830:	bf00      	nop
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	20000000 	.word	0x20000000
 8001840:	10624dd3 	.word	0x10624dd3

08001844 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e053      	b.n	80018fe <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b00      	cmp	r3, #0
 8001866:	d106      	bne.n	8001876 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7fe ffab 	bl	80007cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2202      	movs	r2, #2
 800187a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800188c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	431a      	orrs	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	431a      	orrs	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	695b      	ldr	r3, [r3, #20]
 80018a8:	431a      	orrs	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018b2:	431a      	orrs	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	69db      	ldr	r3, [r3, #28]
 80018b8:	431a      	orrs	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a1b      	ldr	r3, [r3, #32]
 80018be:	ea42 0103 	orr.w	r1, r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	430a      	orrs	r2, r1
 80018cc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	0c1a      	lsrs	r2, r3, #16
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f002 0204 	and.w	r2, r2, #4
 80018dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	69da      	ldr	r2, [r3, #28]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b088      	sub	sp, #32
 800190a:	af00      	add	r7, sp, #0
 800190c:	60f8      	str	r0, [r7, #12]
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	603b      	str	r3, [r7, #0]
 8001912:	4613      	mov	r3, r2
 8001914:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001916:	2300      	movs	r3, #0
 8001918:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001920:	2b01      	cmp	r3, #1
 8001922:	d101      	bne.n	8001928 <HAL_SPI_Transmit+0x22>
 8001924:	2302      	movs	r3, #2
 8001926:	e11e      	b.n	8001b66 <HAL_SPI_Transmit+0x260>
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001930:	f7ff f8ea 	bl	8000b08 <HAL_GetTick>
 8001934:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001936:	88fb      	ldrh	r3, [r7, #6]
 8001938:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b01      	cmp	r3, #1
 8001944:	d002      	beq.n	800194c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001946:	2302      	movs	r3, #2
 8001948:	77fb      	strb	r3, [r7, #31]
    goto error;
 800194a:	e103      	b.n	8001b54 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d002      	beq.n	8001958 <HAL_SPI_Transmit+0x52>
 8001952:	88fb      	ldrh	r3, [r7, #6]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d102      	bne.n	800195e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800195c:	e0fa      	b.n	8001b54 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2203      	movs	r2, #3
 8001962:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2200      	movs	r2, #0
 800196a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	88fa      	ldrh	r2, [r7, #6]
 8001976:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	88fa      	ldrh	r2, [r7, #6]
 800197c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2200      	movs	r2, #0
 8001982:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2200      	movs	r2, #0
 8001988:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2200      	movs	r2, #0
 800198e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2200      	movs	r2, #0
 800199a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019a4:	d107      	bne.n	80019b6 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019c0:	2b40      	cmp	r3, #64	; 0x40
 80019c2:	d007      	beq.n	80019d4 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019dc:	d14b      	bne.n	8001a76 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d002      	beq.n	80019ec <HAL_SPI_Transmit+0xe6>
 80019e6:	8afb      	ldrh	r3, [r7, #22]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d13e      	bne.n	8001a6a <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f0:	881a      	ldrh	r2, [r3, #0]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fc:	1c9a      	adds	r2, r3, #2
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001a10:	e02b      	b.n	8001a6a <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d112      	bne.n	8001a46 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a24:	881a      	ldrh	r2, [r3, #0]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a30:	1c9a      	adds	r2, r3, #2
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	86da      	strh	r2, [r3, #54]	; 0x36
 8001a44:	e011      	b.n	8001a6a <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a46:	f7ff f85f 	bl	8000b08 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d803      	bhi.n	8001a5e <HAL_SPI_Transmit+0x158>
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a5c:	d102      	bne.n	8001a64 <HAL_SPI_Transmit+0x15e>
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d102      	bne.n	8001a6a <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001a68:	e074      	b.n	8001b54 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1ce      	bne.n	8001a12 <HAL_SPI_Transmit+0x10c>
 8001a74:	e04c      	b.n	8001b10 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d002      	beq.n	8001a84 <HAL_SPI_Transmit+0x17e>
 8001a7e:	8afb      	ldrh	r3, [r7, #22]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d140      	bne.n	8001b06 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	330c      	adds	r3, #12
 8001a8e:	7812      	ldrb	r2, [r2, #0]
 8001a90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	1c5a      	adds	r2, r3, #1
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001aaa:	e02c      	b.n	8001b06 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d113      	bne.n	8001ae2 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	330c      	adds	r3, #12
 8001ac4:	7812      	ldrb	r2, [r2, #0]
 8001ac6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001acc:	1c5a      	adds	r2, r3, #1
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	86da      	strh	r2, [r3, #54]	; 0x36
 8001ae0:	e011      	b.n	8001b06 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ae2:	f7ff f811 	bl	8000b08 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d803      	bhi.n	8001afa <HAL_SPI_Transmit+0x1f4>
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001af8:	d102      	bne.n	8001b00 <HAL_SPI_Transmit+0x1fa>
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d102      	bne.n	8001b06 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001b04:	e026      	b.n	8001b54 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1cd      	bne.n	8001aac <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	6839      	ldr	r1, [r7, #0]
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f000 fb91 	bl	800223c <SPI_EndRxTxTransaction>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d002      	beq.n	8001b26 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2220      	movs	r2, #32
 8001b24:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10a      	bne.n	8001b44 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b2e:	2300      	movs	r3, #0
 8001b30:	613b      	str	r3, [r7, #16]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	613b      	str	r3, [r7, #16]
 8001b42:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d002      	beq.n	8001b52 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	77fb      	strb	r3, [r7, #31]
 8001b50:	e000      	b.n	8001b54 <HAL_SPI_Transmit+0x24e>
  }

error:
 8001b52:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001b64:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3720      	adds	r7, #32
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b088      	sub	sp, #32
 8001b72:	af02      	add	r7, sp, #8
 8001b74:	60f8      	str	r0, [r7, #12]
 8001b76:	60b9      	str	r1, [r7, #8]
 8001b78:	603b      	str	r3, [r7, #0]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b8a:	d112      	bne.n	8001bb2 <HAL_SPI_Receive+0x44>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d10e      	bne.n	8001bb2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2204      	movs	r2, #4
 8001b98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001b9c:	88fa      	ldrh	r2, [r7, #6]
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	68ba      	ldr	r2, [r7, #8]
 8001ba6:	68b9      	ldr	r1, [r7, #8]
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	f000 f8e9 	bl	8001d80 <HAL_SPI_TransmitReceive>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	e0e2      	b.n	8001d78 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d101      	bne.n	8001bc0 <HAL_SPI_Receive+0x52>
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	e0db      	b.n	8001d78 <HAL_SPI_Receive+0x20a>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001bc8:	f7fe ff9e 	bl	8000b08 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d002      	beq.n	8001be0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001bde:	e0c2      	b.n	8001d66 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d002      	beq.n	8001bec <HAL_SPI_Receive+0x7e>
 8001be6:	88fb      	ldrh	r3, [r7, #6]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d102      	bne.n	8001bf2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001bf0:	e0b9      	b.n	8001d66 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2204      	movs	r2, #4
 8001bf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	88fa      	ldrh	r2, [r7, #6]
 8001c0a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	88fa      	ldrh	r2, [r7, #6]
 8001c10:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2200      	movs	r2, #0
 8001c22:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2200      	movs	r2, #0
 8001c28:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c38:	d107      	bne.n	8001c4a <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c48:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c54:	2b40      	cmp	r3, #64	; 0x40
 8001c56:	d007      	beq.n	8001c68 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c66:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d162      	bne.n	8001d36 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001c70:	e02e      	b.n	8001cd0 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d115      	bne.n	8001cac <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f103 020c 	add.w	r2, r3, #12
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c8c:	7812      	ldrb	r2, [r2, #0]
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001caa:	e011      	b.n	8001cd0 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001cac:	f7fe ff2c 	bl	8000b08 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d803      	bhi.n	8001cc4 <HAL_SPI_Receive+0x156>
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cc2:	d102      	bne.n	8001cca <HAL_SPI_Receive+0x15c>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d102      	bne.n	8001cd0 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001cce:	e04a      	b.n	8001d66 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1cb      	bne.n	8001c72 <HAL_SPI_Receive+0x104>
 8001cda:	e031      	b.n	8001d40 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d113      	bne.n	8001d12 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68da      	ldr	r2, [r3, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf4:	b292      	uxth	r2, r2
 8001cf6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cfc:	1c9a      	adds	r2, r3, #2
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d10:	e011      	b.n	8001d36 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d12:	f7fe fef9 	bl	8000b08 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d803      	bhi.n	8001d2a <HAL_SPI_Receive+0x1bc>
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d28:	d102      	bne.n	8001d30 <HAL_SPI_Receive+0x1c2>
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d102      	bne.n	8001d36 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001d34:	e017      	b.n	8001d66 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1cd      	bne.n	8001cdc <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	6839      	ldr	r1, [r7, #0]
 8001d44:	68f8      	ldr	r0, [r7, #12]
 8001d46:	f000 fa27 	bl	8002198 <SPI_EndRxTransaction>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d002      	beq.n	8001d56 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2220      	movs	r2, #32
 8001d54:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d002      	beq.n	8001d64 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	75fb      	strb	r3, [r7, #23]
 8001d62:	e000      	b.n	8001d66 <HAL_SPI_Receive+0x1f8>
  }

error :
 8001d64:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001d76:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3718      	adds	r7, #24
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08c      	sub	sp, #48	; 0x30
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
 8001d8c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001d92:	2300      	movs	r3, #0
 8001d94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d101      	bne.n	8001da6 <HAL_SPI_TransmitReceive+0x26>
 8001da2:	2302      	movs	r3, #2
 8001da4:	e18a      	b.n	80020bc <HAL_SPI_TransmitReceive+0x33c>
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001dae:	f7fe feab 	bl	8000b08 <HAL_GetTick>
 8001db2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001dba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001dc4:	887b      	ldrh	r3, [r7, #2]
 8001dc6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001dc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d00f      	beq.n	8001df0 <HAL_SPI_TransmitReceive+0x70>
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001dd6:	d107      	bne.n	8001de8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d103      	bne.n	8001de8 <HAL_SPI_TransmitReceive+0x68>
 8001de0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001de4:	2b04      	cmp	r3, #4
 8001de6:	d003      	beq.n	8001df0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001de8:	2302      	movs	r3, #2
 8001dea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001dee:	e15b      	b.n	80020a8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d005      	beq.n	8001e02 <HAL_SPI_TransmitReceive+0x82>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d002      	beq.n	8001e02 <HAL_SPI_TransmitReceive+0x82>
 8001dfc:	887b      	ldrh	r3, [r7, #2]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d103      	bne.n	8001e0a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001e08:	e14e      	b.n	80020a8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	d003      	beq.n	8001e1e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2205      	movs	r2, #5
 8001e1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	887a      	ldrh	r2, [r7, #2]
 8001e2e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	887a      	ldrh	r2, [r7, #2]
 8001e34:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	68ba      	ldr	r2, [r7, #8]
 8001e3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	887a      	ldrh	r2, [r7, #2]
 8001e40:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	887a      	ldrh	r2, [r7, #2]
 8001e46:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e5e:	2b40      	cmp	r3, #64	; 0x40
 8001e60:	d007      	beq.n	8001e72 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e7a:	d178      	bne.n	8001f6e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d002      	beq.n	8001e8a <HAL_SPI_TransmitReceive+0x10a>
 8001e84:	8b7b      	ldrh	r3, [r7, #26]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d166      	bne.n	8001f58 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	881a      	ldrh	r2, [r3, #0]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	1c9a      	adds	r2, r3, #2
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001eae:	e053      	b.n	8001f58 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d11b      	bne.n	8001ef6 <HAL_SPI_TransmitReceive+0x176>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d016      	beq.n	8001ef6 <HAL_SPI_TransmitReceive+0x176>
 8001ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d113      	bne.n	8001ef6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	881a      	ldrh	r2, [r3, #0]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	1c9a      	adds	r2, r3, #2
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	3b01      	subs	r3, #1
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d119      	bne.n	8001f38 <HAL_SPI_TransmitReceive+0x1b8>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d014      	beq.n	8001f38 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68da      	ldr	r2, [r3, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f18:	b292      	uxth	r2, r2
 8001f1a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f20:	1c9a      	adds	r2, r3, #2
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001f34:	2301      	movs	r3, #1
 8001f36:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001f38:	f7fe fde6 	bl	8000b08 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d807      	bhi.n	8001f58 <HAL_SPI_TransmitReceive+0x1d8>
 8001f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f4e:	d003      	beq.n	8001f58 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001f56:	e0a7      	b.n	80020a8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1a6      	bne.n	8001eb0 <HAL_SPI_TransmitReceive+0x130>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1a1      	bne.n	8001eb0 <HAL_SPI_TransmitReceive+0x130>
 8001f6c:	e07c      	b.n	8002068 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d002      	beq.n	8001f7c <HAL_SPI_TransmitReceive+0x1fc>
 8001f76:	8b7b      	ldrh	r3, [r7, #26]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d16b      	bne.n	8002054 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	330c      	adds	r3, #12
 8001f86:	7812      	ldrb	r2, [r2, #0]
 8001f88:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	1c5a      	adds	r2, r3, #1
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fa2:	e057      	b.n	8002054 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d11c      	bne.n	8001fec <HAL_SPI_TransmitReceive+0x26c>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d017      	beq.n	8001fec <HAL_SPI_TransmitReceive+0x26c>
 8001fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d114      	bne.n	8001fec <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	330c      	adds	r3, #12
 8001fcc:	7812      	ldrb	r2, [r2, #0]
 8001fce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd4:	1c5a      	adds	r2, r3, #1
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d119      	bne.n	800202e <HAL_SPI_TransmitReceive+0x2ae>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	2b00      	cmp	r3, #0
 8002002:	d014      	beq.n	800202e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002016:	1c5a      	adds	r2, r3, #1
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002020:	b29b      	uxth	r3, r3
 8002022:	3b01      	subs	r3, #1
 8002024:	b29a      	uxth	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800202a:	2301      	movs	r3, #1
 800202c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800202e:	f7fe fd6b 	bl	8000b08 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800203a:	429a      	cmp	r2, r3
 800203c:	d803      	bhi.n	8002046 <HAL_SPI_TransmitReceive+0x2c6>
 800203e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002040:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002044:	d102      	bne.n	800204c <HAL_SPI_TransmitReceive+0x2cc>
 8002046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002048:	2b00      	cmp	r3, #0
 800204a:	d103      	bne.n	8002054 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002052:	e029      	b.n	80020a8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002058:	b29b      	uxth	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1a2      	bne.n	8001fa4 <HAL_SPI_TransmitReceive+0x224>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002062:	b29b      	uxth	r3, r3
 8002064:	2b00      	cmp	r3, #0
 8002066:	d19d      	bne.n	8001fa4 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800206a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f000 f8e5 	bl	800223c <SPI_EndRxTxTransaction>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d006      	beq.n	8002086 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2220      	movs	r2, #32
 8002082:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002084:	e010      	b.n	80020a8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10b      	bne.n	80020a6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	617b      	str	r3, [r7, #20]
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	e000      	b.n	80020a8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80020a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80020b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3730      	adds	r7, #48	; 0x30
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	603b      	str	r3, [r7, #0]
 80020d0:	4613      	mov	r3, r2
 80020d2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020d4:	e04c      	b.n	8002170 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020dc:	d048      	beq.n	8002170 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80020de:	f7fe fd13 	bl	8000b08 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d902      	bls.n	80020f4 <SPI_WaitFlagStateUntilTimeout+0x30>
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d13d      	bne.n	8002170 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002102:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800210c:	d111      	bne.n	8002132 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002116:	d004      	beq.n	8002122 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002120:	d107      	bne.n	8002132 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002130:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002136:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800213a:	d10f      	bne.n	800215c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800215a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e00f      	b.n	8002190 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	4013      	ands	r3, r2
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	429a      	cmp	r2, r3
 800217e:	bf0c      	ite	eq
 8002180:	2301      	moveq	r3, #1
 8002182:	2300      	movne	r3, #0
 8002184:	b2db      	uxtb	r3, r3
 8002186:	461a      	mov	r2, r3
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	429a      	cmp	r2, r3
 800218c:	d1a3      	bne.n	80020d6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af02      	add	r7, sp, #8
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021ac:	d111      	bne.n	80021d2 <SPI_EndRxTransaction+0x3a>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021b6:	d004      	beq.n	80021c2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021c0:	d107      	bne.n	80021d2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021d0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021da:	d117      	bne.n	800220c <SPI_EndRxTransaction+0x74>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021e4:	d112      	bne.n	800220c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	2200      	movs	r2, #0
 80021ee:	2101      	movs	r1, #1
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f7ff ff67 	bl	80020c4 <SPI_WaitFlagStateUntilTimeout>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d01a      	beq.n	8002232 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002200:	f043 0220 	orr.w	r2, r3, #32
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e013      	b.n	8002234 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2200      	movs	r2, #0
 8002214:	2180      	movs	r1, #128	; 0x80
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f7ff ff54 	bl	80020c4 <SPI_WaitFlagStateUntilTimeout>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d007      	beq.n	8002232 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002226:	f043 0220 	orr.w	r2, r3, #32
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e000      	b.n	8002234 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af02      	add	r7, sp, #8
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	2200      	movs	r2, #0
 8002250:	2180      	movs	r1, #128	; 0x80
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f7ff ff36 	bl	80020c4 <SPI_WaitFlagStateUntilTimeout>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d007      	beq.n	800226e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002262:	f043 0220 	orr.w	r2, r3, #32
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e000      	b.n	8002270 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e03f      	b.n	800230a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d106      	bne.n	80022a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7fe fade 	bl	8000860 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2224      	movs	r2, #36	; 0x24
 80022a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68da      	ldr	r2, [r3, #12]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 f90b 	bl	80024d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	691a      	ldr	r2, [r3, #16]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	695a      	ldr	r2, [r3, #20]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68da      	ldr	r2, [r3, #12]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2220      	movs	r2, #32
 80022fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2220      	movs	r2, #32
 8002304:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b088      	sub	sp, #32
 8002316:	af02      	add	r7, sp, #8
 8002318:	60f8      	str	r0, [r7, #12]
 800231a:	60b9      	str	r1, [r7, #8]
 800231c:	603b      	str	r3, [r7, #0]
 800231e:	4613      	mov	r3, r2
 8002320:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002322:	2300      	movs	r3, #0
 8002324:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b20      	cmp	r3, #32
 8002330:	f040 8083 	bne.w	800243a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d002      	beq.n	8002340 <HAL_UART_Transmit+0x2e>
 800233a:	88fb      	ldrh	r3, [r7, #6]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e07b      	b.n	800243c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_UART_Transmit+0x40>
 800234e:	2302      	movs	r3, #2
 8002350:	e074      	b.n	800243c <HAL_UART_Transmit+0x12a>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2221      	movs	r2, #33	; 0x21
 8002364:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002368:	f7fe fbce 	bl	8000b08 <HAL_GetTick>
 800236c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	88fa      	ldrh	r2, [r7, #6]
 8002372:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	88fa      	ldrh	r2, [r7, #6]
 8002378:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800237a:	e042      	b.n	8002402 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002380:	b29b      	uxth	r3, r3
 8002382:	3b01      	subs	r3, #1
 8002384:	b29a      	uxth	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002392:	d122      	bne.n	80023da <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	2200      	movs	r2, #0
 800239c:	2180      	movs	r1, #128	; 0x80
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 f850 	bl	8002444 <UART_WaitOnFlagUntilTimeout>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e046      	b.n	800243c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	461a      	mov	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023c0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d103      	bne.n	80023d2 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	3302      	adds	r3, #2
 80023ce:	60bb      	str	r3, [r7, #8]
 80023d0:	e017      	b.n	8002402 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	3301      	adds	r3, #1
 80023d6:	60bb      	str	r3, [r7, #8]
 80023d8:	e013      	b.n	8002402 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	2200      	movs	r2, #0
 80023e2:	2180      	movs	r1, #128	; 0x80
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 f82d 	bl	8002444 <UART_WaitOnFlagUntilTimeout>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e023      	b.n	800243c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	1c5a      	adds	r2, r3, #1
 80023f8:	60ba      	str	r2, [r7, #8]
 80023fa:	781a      	ldrb	r2, [r3, #0]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002406:	b29b      	uxth	r3, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1b7      	bne.n	800237c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	2200      	movs	r2, #0
 8002414:	2140      	movs	r1, #64	; 0x40
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 f814 	bl	8002444 <UART_WaitOnFlagUntilTimeout>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e00a      	b.n	800243c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2220      	movs	r2, #32
 800242a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	e000      	b.n	800243c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800243a:	2302      	movs	r3, #2
  }
}
 800243c:	4618      	mov	r0, r3
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	603b      	str	r3, [r7, #0]
 8002450:	4613      	mov	r3, r2
 8002452:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002454:	e02c      	b.n	80024b0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800245c:	d028      	beq.n	80024b0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d007      	beq.n	8002474 <UART_WaitOnFlagUntilTimeout+0x30>
 8002464:	f7fe fb50 	bl	8000b08 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	429a      	cmp	r2, r3
 8002472:	d21d      	bcs.n	80024b0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68da      	ldr	r2, [r3, #12]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002482:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	695a      	ldr	r2, [r3, #20]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0201 	bic.w	r2, r2, #1
 8002492:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2220      	movs	r2, #32
 8002498:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2220      	movs	r2, #32
 80024a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e00f      	b.n	80024d0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	4013      	ands	r3, r2
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	429a      	cmp	r2, r3
 80024be:	bf0c      	ite	eq
 80024c0:	2301      	moveq	r3, #1
 80024c2:	2300      	movne	r3, #0
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	461a      	mov	r2, r3
 80024c8:	79fb      	ldrb	r3, [r7, #7]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d0c3      	beq.n	8002456 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689a      	ldr	r2, [r3, #8]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	431a      	orrs	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	4313      	orrs	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002512:	f023 030c 	bic.w	r3, r3, #12
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6812      	ldr	r2, [r2, #0]
 800251a:	68f9      	ldr	r1, [r7, #12]
 800251c:	430b      	orrs	r3, r1
 800251e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	699a      	ldr	r2, [r3, #24]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a52      	ldr	r2, [pc, #328]	; (8002684 <UART_SetConfig+0x1ac>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d14e      	bne.n	80025de <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002540:	f7ff f94e 	bl	80017e0 <HAL_RCC_GetPCLK2Freq>
 8002544:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	4613      	mov	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	009a      	lsls	r2, r3, #2
 8002550:	441a      	add	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	fbb2 f3f3 	udiv	r3, r2, r3
 800255c:	4a4a      	ldr	r2, [pc, #296]	; (8002688 <UART_SetConfig+0x1b0>)
 800255e:	fba2 2303 	umull	r2, r3, r2, r3
 8002562:	095b      	lsrs	r3, r3, #5
 8002564:	0119      	lsls	r1, r3, #4
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	4613      	mov	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	009a      	lsls	r2, r3, #2
 8002570:	441a      	add	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	fbb2 f2f3 	udiv	r2, r2, r3
 800257c:	4b42      	ldr	r3, [pc, #264]	; (8002688 <UART_SetConfig+0x1b0>)
 800257e:	fba3 0302 	umull	r0, r3, r3, r2
 8002582:	095b      	lsrs	r3, r3, #5
 8002584:	2064      	movs	r0, #100	; 0x64
 8002586:	fb00 f303 	mul.w	r3, r0, r3
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	011b      	lsls	r3, r3, #4
 800258e:	3332      	adds	r3, #50	; 0x32
 8002590:	4a3d      	ldr	r2, [pc, #244]	; (8002688 <UART_SetConfig+0x1b0>)
 8002592:	fba2 2303 	umull	r2, r3, r2, r3
 8002596:	095b      	lsrs	r3, r3, #5
 8002598:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800259c:	4419      	add	r1, r3
 800259e:	68ba      	ldr	r2, [r7, #8]
 80025a0:	4613      	mov	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	009a      	lsls	r2, r3, #2
 80025a8:	441a      	add	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80025b4:	4b34      	ldr	r3, [pc, #208]	; (8002688 <UART_SetConfig+0x1b0>)
 80025b6:	fba3 0302 	umull	r0, r3, r3, r2
 80025ba:	095b      	lsrs	r3, r3, #5
 80025bc:	2064      	movs	r0, #100	; 0x64
 80025be:	fb00 f303 	mul.w	r3, r0, r3
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	011b      	lsls	r3, r3, #4
 80025c6:	3332      	adds	r3, #50	; 0x32
 80025c8:	4a2f      	ldr	r2, [pc, #188]	; (8002688 <UART_SetConfig+0x1b0>)
 80025ca:	fba2 2303 	umull	r2, r3, r2, r3
 80025ce:	095b      	lsrs	r3, r3, #5
 80025d0:	f003 020f 	and.w	r2, r3, #15
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	440a      	add	r2, r1
 80025da:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80025dc:	e04d      	b.n	800267a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80025de:	f7ff f8eb 	bl	80017b8 <HAL_RCC_GetPCLK1Freq>
 80025e2:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025e4:	68ba      	ldr	r2, [r7, #8]
 80025e6:	4613      	mov	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4413      	add	r3, r2
 80025ec:	009a      	lsls	r2, r3, #2
 80025ee:	441a      	add	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fa:	4a23      	ldr	r2, [pc, #140]	; (8002688 <UART_SetConfig+0x1b0>)
 80025fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002600:	095b      	lsrs	r3, r3, #5
 8002602:	0119      	lsls	r1, r3, #4
 8002604:	68ba      	ldr	r2, [r7, #8]
 8002606:	4613      	mov	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4413      	add	r3, r2
 800260c:	009a      	lsls	r2, r3, #2
 800260e:	441a      	add	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	fbb2 f2f3 	udiv	r2, r2, r3
 800261a:	4b1b      	ldr	r3, [pc, #108]	; (8002688 <UART_SetConfig+0x1b0>)
 800261c:	fba3 0302 	umull	r0, r3, r3, r2
 8002620:	095b      	lsrs	r3, r3, #5
 8002622:	2064      	movs	r0, #100	; 0x64
 8002624:	fb00 f303 	mul.w	r3, r0, r3
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	011b      	lsls	r3, r3, #4
 800262c:	3332      	adds	r3, #50	; 0x32
 800262e:	4a16      	ldr	r2, [pc, #88]	; (8002688 <UART_SetConfig+0x1b0>)
 8002630:	fba2 2303 	umull	r2, r3, r2, r3
 8002634:	095b      	lsrs	r3, r3, #5
 8002636:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800263a:	4419      	add	r1, r3
 800263c:	68ba      	ldr	r2, [r7, #8]
 800263e:	4613      	mov	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	009a      	lsls	r2, r3, #2
 8002646:	441a      	add	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002652:	4b0d      	ldr	r3, [pc, #52]	; (8002688 <UART_SetConfig+0x1b0>)
 8002654:	fba3 0302 	umull	r0, r3, r3, r2
 8002658:	095b      	lsrs	r3, r3, #5
 800265a:	2064      	movs	r0, #100	; 0x64
 800265c:	fb00 f303 	mul.w	r3, r0, r3
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	3332      	adds	r3, #50	; 0x32
 8002666:	4a08      	ldr	r2, [pc, #32]	; (8002688 <UART_SetConfig+0x1b0>)
 8002668:	fba2 2303 	umull	r2, r3, r2, r3
 800266c:	095b      	lsrs	r3, r3, #5
 800266e:	f003 020f 	and.w	r2, r3, #15
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	440a      	add	r2, r1
 8002678:	609a      	str	r2, [r3, #8]
}
 800267a:	bf00      	nop
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40013800 	.word	0x40013800
 8002688:	51eb851f 	.word	0x51eb851f

0800268c <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8002694:	4b22      	ldr	r3, [pc, #136]	; (8002720 <WIZCHIP_READ+0x94>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	4798      	blx	r3
   WIZCHIP.CS._select();
 800269a:	4b21      	ldr	r3, [pc, #132]	; (8002720 <WIZCHIP_READ+0x94>)
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80026a0:	4b1f      	ldr	r3, [pc, #124]	; (8002720 <WIZCHIP_READ+0x94>)
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <WIZCHIP_READ+0x24>
 80026a8:	4b1d      	ldr	r3, [pc, #116]	; (8002720 <WIZCHIP_READ+0x94>)
 80026aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d114      	bne.n	80026da <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80026b0:	4b1b      	ldr	r3, [pc, #108]	; (8002720 <WIZCHIP_READ+0x94>)
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	0c12      	lsrs	r2, r2, #16
 80026b8:	b2d2      	uxtb	r2, r2
 80026ba:	4610      	mov	r0, r2
 80026bc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80026be:	4b18      	ldr	r3, [pc, #96]	; (8002720 <WIZCHIP_READ+0x94>)
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	0a12      	lsrs	r2, r2, #8
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	4610      	mov	r0, r2
 80026ca:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80026cc:	4b14      	ldr	r3, [pc, #80]	; (8002720 <WIZCHIP_READ+0x94>)
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	4610      	mov	r0, r2
 80026d6:	4798      	blx	r3
 80026d8:	e011      	b.n	80026fe <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	0c1b      	lsrs	r3, r3, #16
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	0a1b      	lsrs	r3, r3, #8
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80026f0:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <WIZCHIP_READ+0x94>)
 80026f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f4:	f107 020c 	add.w	r2, r7, #12
 80026f8:	2103      	movs	r1, #3
 80026fa:	4610      	mov	r0, r2
 80026fc:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80026fe:	4b08      	ldr	r3, [pc, #32]	; (8002720 <WIZCHIP_READ+0x94>)
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	4798      	blx	r3
 8002704:	4603      	mov	r3, r0
 8002706:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8002708:	4b05      	ldr	r3, [pc, #20]	; (8002720 <WIZCHIP_READ+0x94>)
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800270e:	4b04      	ldr	r3, [pc, #16]	; (8002720 <WIZCHIP_READ+0x94>)
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	4798      	blx	r3
   return ret;
 8002714:	7bfb      	ldrb	r3, [r7, #15]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	2000000c 	.word	0x2000000c

08002724 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8002730:	4b22      	ldr	r3, [pc, #136]	; (80027bc <WIZCHIP_WRITE+0x98>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002736:	4b21      	ldr	r3, [pc, #132]	; (80027bc <WIZCHIP_WRITE+0x98>)
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f043 0304 	orr.w	r3, r3, #4
 8002742:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002744:	4b1d      	ldr	r3, [pc, #116]	; (80027bc <WIZCHIP_WRITE+0x98>)
 8002746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002748:	2b00      	cmp	r3, #0
 800274a:	d119      	bne.n	8002780 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800274c:	4b1b      	ldr	r3, [pc, #108]	; (80027bc <WIZCHIP_WRITE+0x98>)
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	0c12      	lsrs	r2, r2, #16
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	4610      	mov	r0, r2
 8002758:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800275a:	4b18      	ldr	r3, [pc, #96]	; (80027bc <WIZCHIP_WRITE+0x98>)
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	0a12      	lsrs	r2, r2, #8
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	4610      	mov	r0, r2
 8002766:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002768:	4b14      	ldr	r3, [pc, #80]	; (80027bc <WIZCHIP_WRITE+0x98>)
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	4610      	mov	r0, r2
 8002772:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8002774:	4b11      	ldr	r3, [pc, #68]	; (80027bc <WIZCHIP_WRITE+0x98>)
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	78fa      	ldrb	r2, [r7, #3]
 800277a:	4610      	mov	r0, r2
 800277c:	4798      	blx	r3
 800277e:	e013      	b.n	80027a8 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	0c1b      	lsrs	r3, r3, #16
 8002784:	b2db      	uxtb	r3, r3
 8002786:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	0a1b      	lsrs	r3, r3, #8
 800278c:	b2db      	uxtb	r3, r3
 800278e:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	b2db      	uxtb	r3, r3
 8002794:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8002796:	78fb      	ldrb	r3, [r7, #3]
 8002798:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800279a:	4b08      	ldr	r3, [pc, #32]	; (80027bc <WIZCHIP_WRITE+0x98>)
 800279c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279e:	f107 020c 	add.w	r2, r7, #12
 80027a2:	2104      	movs	r1, #4
 80027a4:	4610      	mov	r0, r2
 80027a6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80027a8:	4b04      	ldr	r3, [pc, #16]	; (80027bc <WIZCHIP_WRITE+0x98>)
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80027ae:	4b03      	ldr	r3, [pc, #12]	; (80027bc <WIZCHIP_WRITE+0x98>)
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	4798      	blx	r3
}
 80027b4:	bf00      	nop
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	2000000c 	.word	0x2000000c

080027c0 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80027c0:	b590      	push	{r4, r7, lr}
 80027c2:	b087      	sub	sp, #28
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	4613      	mov	r3, r2
 80027cc:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80027ce:	4b2b      	ldr	r3, [pc, #172]	; (800287c <WIZCHIP_READ_BUF+0xbc>)
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	4798      	blx	r3
   WIZCHIP.CS._select();
 80027d4:	4b29      	ldr	r3, [pc, #164]	; (800287c <WIZCHIP_READ_BUF+0xbc>)
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80027da:	4b28      	ldr	r3, [pc, #160]	; (800287c <WIZCHIP_READ_BUF+0xbc>)
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <WIZCHIP_READ_BUF+0x2a>
 80027e2:	4b26      	ldr	r3, [pc, #152]	; (800287c <WIZCHIP_READ_BUF+0xbc>)
 80027e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d126      	bne.n	8002838 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80027ea:	4b24      	ldr	r3, [pc, #144]	; (800287c <WIZCHIP_READ_BUF+0xbc>)
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	0c12      	lsrs	r2, r2, #16
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	4610      	mov	r0, r2
 80027f6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80027f8:	4b20      	ldr	r3, [pc, #128]	; (800287c <WIZCHIP_READ_BUF+0xbc>)
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	0a12      	lsrs	r2, r2, #8
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	4610      	mov	r0, r2
 8002804:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002806:	4b1d      	ldr	r3, [pc, #116]	; (800287c <WIZCHIP_READ_BUF+0xbc>)
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	b2d2      	uxtb	r2, r2
 800280e:	4610      	mov	r0, r2
 8002810:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002812:	2300      	movs	r3, #0
 8002814:	82fb      	strh	r3, [r7, #22]
 8002816:	e00a      	b.n	800282e <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8002818:	4b18      	ldr	r3, [pc, #96]	; (800287c <WIZCHIP_READ_BUF+0xbc>)
 800281a:	69db      	ldr	r3, [r3, #28]
 800281c:	8afa      	ldrh	r2, [r7, #22]
 800281e:	68b9      	ldr	r1, [r7, #8]
 8002820:	188c      	adds	r4, r1, r2
 8002822:	4798      	blx	r3
 8002824:	4603      	mov	r3, r0
 8002826:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8002828:	8afb      	ldrh	r3, [r7, #22]
 800282a:	3301      	adds	r3, #1
 800282c:	82fb      	strh	r3, [r7, #22]
 800282e:	8afa      	ldrh	r2, [r7, #22]
 8002830:	88fb      	ldrh	r3, [r7, #6]
 8002832:	429a      	cmp	r2, r3
 8002834:	d3f0      	bcc.n	8002818 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002836:	e017      	b.n	8002868 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	0c1b      	lsrs	r3, r3, #16
 800283c:	b2db      	uxtb	r3, r3
 800283e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	0a1b      	lsrs	r3, r3, #8
 8002844:	b2db      	uxtb	r3, r3
 8002846:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	b2db      	uxtb	r3, r3
 800284c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800284e:	4b0b      	ldr	r3, [pc, #44]	; (800287c <WIZCHIP_READ_BUF+0xbc>)
 8002850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002852:	f107 0210 	add.w	r2, r7, #16
 8002856:	2103      	movs	r1, #3
 8002858:	4610      	mov	r0, r2
 800285a:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 800285c:	4b07      	ldr	r3, [pc, #28]	; (800287c <WIZCHIP_READ_BUF+0xbc>)
 800285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002860:	88fa      	ldrh	r2, [r7, #6]
 8002862:	4611      	mov	r1, r2
 8002864:	68b8      	ldr	r0, [r7, #8]
 8002866:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002868:	4b04      	ldr	r3, [pc, #16]	; (800287c <WIZCHIP_READ_BUF+0xbc>)
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800286e:	4b03      	ldr	r3, [pc, #12]	; (800287c <WIZCHIP_READ_BUF+0xbc>)
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	4798      	blx	r3
}
 8002874:	bf00      	nop
 8002876:	371c      	adds	r7, #28
 8002878:	46bd      	mov	sp, r7
 800287a:	bd90      	pop	{r4, r7, pc}
 800287c:	2000000c 	.word	0x2000000c

08002880 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	4613      	mov	r3, r2
 800288c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800288e:	4b2b      	ldr	r3, [pc, #172]	; (800293c <WIZCHIP_WRITE_BUF+0xbc>)
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002894:	4b29      	ldr	r3, [pc, #164]	; (800293c <WIZCHIP_WRITE_BUF+0xbc>)
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f043 0304 	orr.w	r3, r3, #4
 80028a0:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80028a2:	4b26      	ldr	r3, [pc, #152]	; (800293c <WIZCHIP_WRITE_BUF+0xbc>)
 80028a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d126      	bne.n	80028f8 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80028aa:	4b24      	ldr	r3, [pc, #144]	; (800293c <WIZCHIP_WRITE_BUF+0xbc>)
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	0c12      	lsrs	r2, r2, #16
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	4610      	mov	r0, r2
 80028b6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80028b8:	4b20      	ldr	r3, [pc, #128]	; (800293c <WIZCHIP_WRITE_BUF+0xbc>)
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	0a12      	lsrs	r2, r2, #8
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	4610      	mov	r0, r2
 80028c4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80028c6:	4b1d      	ldr	r3, [pc, #116]	; (800293c <WIZCHIP_WRITE_BUF+0xbc>)
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	4610      	mov	r0, r2
 80028d0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80028d2:	2300      	movs	r3, #0
 80028d4:	82fb      	strh	r3, [r7, #22]
 80028d6:	e00a      	b.n	80028ee <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80028d8:	4b18      	ldr	r3, [pc, #96]	; (800293c <WIZCHIP_WRITE_BUF+0xbc>)
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	8afa      	ldrh	r2, [r7, #22]
 80028de:	68b9      	ldr	r1, [r7, #8]
 80028e0:	440a      	add	r2, r1
 80028e2:	7812      	ldrb	r2, [r2, #0]
 80028e4:	4610      	mov	r0, r2
 80028e6:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80028e8:	8afb      	ldrh	r3, [r7, #22]
 80028ea:	3301      	adds	r3, #1
 80028ec:	82fb      	strh	r3, [r7, #22]
 80028ee:	8afa      	ldrh	r2, [r7, #22]
 80028f0:	88fb      	ldrh	r3, [r7, #6]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d3f0      	bcc.n	80028d8 <WIZCHIP_WRITE_BUF+0x58>
 80028f6:	e017      	b.n	8002928 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	0c1b      	lsrs	r3, r3, #16
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	0a1b      	lsrs	r3, r3, #8
 8002904:	b2db      	uxtb	r3, r3
 8002906:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	b2db      	uxtb	r3, r3
 800290c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800290e:	4b0b      	ldr	r3, [pc, #44]	; (800293c <WIZCHIP_WRITE_BUF+0xbc>)
 8002910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002912:	f107 0210 	add.w	r2, r7, #16
 8002916:	2103      	movs	r1, #3
 8002918:	4610      	mov	r0, r2
 800291a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 800291c:	4b07      	ldr	r3, [pc, #28]	; (800293c <WIZCHIP_WRITE_BUF+0xbc>)
 800291e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002920:	88fa      	ldrh	r2, [r7, #6]
 8002922:	4611      	mov	r1, r2
 8002924:	68b8      	ldr	r0, [r7, #8]
 8002926:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002928:	4b04      	ldr	r3, [pc, #16]	; (800293c <WIZCHIP_WRITE_BUF+0xbc>)
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800292e:	4b03      	ldr	r3, [pc, #12]	; (800293c <WIZCHIP_WRITE_BUF+0xbc>)
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	4798      	blx	r3
}
 8002934:	bf00      	nop
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	2000000c 	.word	0x2000000c

08002940 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8002940:	b590      	push	{r4, r7, lr}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800294a:	2300      	movs	r3, #0
 800294c:	81fb      	strh	r3, [r7, #14]
 800294e:	2300      	movs	r3, #0
 8002950:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002952:	79fb      	ldrb	r3, [r7, #7]
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	3301      	adds	r3, #1
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff fe94 	bl	800268c <WIZCHIP_READ>
 8002964:	4603      	mov	r3, r0
 8002966:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002968:	89bb      	ldrh	r3, [r7, #12]
 800296a:	021b      	lsls	r3, r3, #8
 800296c:	b29c      	uxth	r4, r3
 800296e:	79fb      	ldrb	r3, [r7, #7]
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	3301      	adds	r3, #1
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff fe86 	bl	800268c <WIZCHIP_READ>
 8002980:	4603      	mov	r3, r0
 8002982:	b29b      	uxth	r3, r3
 8002984:	4423      	add	r3, r4
 8002986:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002988:	89bb      	ldrh	r3, [r7, #12]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d01a      	beq.n	80029c4 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800298e:	79fb      	ldrb	r3, [r7, #7]
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	3301      	adds	r3, #1
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff fe76 	bl	800268c <WIZCHIP_READ>
 80029a0:	4603      	mov	r3, r0
 80029a2:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80029a4:	89fb      	ldrh	r3, [r7, #14]
 80029a6:	021b      	lsls	r3, r3, #8
 80029a8:	b29c      	uxth	r4, r3
 80029aa:	79fb      	ldrb	r3, [r7, #7]
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	3301      	adds	r3, #1
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff fe68 	bl	800268c <WIZCHIP_READ>
 80029bc:	4603      	mov	r3, r0
 80029be:	b29b      	uxth	r3, r3
 80029c0:	4423      	add	r3, r4
 80029c2:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80029c4:	89fa      	ldrh	r2, [r7, #14]
 80029c6:	89bb      	ldrh	r3, [r7, #12]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d1c2      	bne.n	8002952 <getSn_TX_FSR+0x12>
   return val;
 80029cc:	89fb      	ldrh	r3, [r7, #14]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd90      	pop	{r4, r7, pc}

080029d6 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80029d6:	b590      	push	{r4, r7, lr}
 80029d8:	b085      	sub	sp, #20
 80029da:	af00      	add	r7, sp, #0
 80029dc:	4603      	mov	r3, r0
 80029de:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80029e0:	2300      	movs	r3, #0
 80029e2:	81fb      	strh	r3, [r7, #14]
 80029e4:	2300      	movs	r3, #0
 80029e6:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80029e8:	79fb      	ldrb	r3, [r7, #7]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	3301      	adds	r3, #1
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff fe49 	bl	800268c <WIZCHIP_READ>
 80029fa:	4603      	mov	r3, r0
 80029fc:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80029fe:	89bb      	ldrh	r3, [r7, #12]
 8002a00:	021b      	lsls	r3, r3, #8
 8002a02:	b29c      	uxth	r4, r3
 8002a04:	79fb      	ldrb	r3, [r7, #7]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	3301      	adds	r3, #1
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff fe3b 	bl	800268c <WIZCHIP_READ>
 8002a16:	4603      	mov	r3, r0
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	4423      	add	r3, r4
 8002a1c:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002a1e:	89bb      	ldrh	r3, [r7, #12]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d01a      	beq.n	8002a5a <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8002a24:	79fb      	ldrb	r3, [r7, #7]
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	3301      	adds	r3, #1
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff fe2b 	bl	800268c <WIZCHIP_READ>
 8002a36:	4603      	mov	r3, r0
 8002a38:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8002a3a:	89fb      	ldrh	r3, [r7, #14]
 8002a3c:	021b      	lsls	r3, r3, #8
 8002a3e:	b29c      	uxth	r4, r3
 8002a40:	79fb      	ldrb	r3, [r7, #7]
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	3301      	adds	r3, #1
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff fe1d 	bl	800268c <WIZCHIP_READ>
 8002a52:	4603      	mov	r3, r0
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	4423      	add	r3, r4
 8002a58:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8002a5a:	89fa      	ldrh	r2, [r7, #14]
 8002a5c:	89bb      	ldrh	r3, [r7, #12]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d1c2      	bne.n	80029e8 <getSn_RX_RSR+0x12>
   return val;
 8002a62:	89fb      	ldrh	r3, [r7, #14]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd90      	pop	{r4, r7, pc}

08002a6c <wiz_recv_data>:
   ptr += len;
   setSn_TX_WR(sn,ptr);
}

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002a6c:	b590      	push	{r4, r7, lr}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	4603      	mov	r3, r0
 8002a74:	6039      	str	r1, [r7, #0]
 8002a76:	71fb      	strb	r3, [r7, #7]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002a80:	2300      	movs	r3, #0
 8002a82:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8002a84:	88bb      	ldrh	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d048      	beq.n	8002b1c <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8002a8a:	79fb      	ldrb	r3, [r7, #7]
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	3301      	adds	r3, #1
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff fdf8 	bl	800268c <WIZCHIP_READ>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	021b      	lsls	r3, r3, #8
 8002aa2:	b29c      	uxth	r4, r3
 8002aa4:	79fb      	ldrb	r3, [r7, #7]
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff fdeb 	bl	800268c <WIZCHIP_READ>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	4423      	add	r3, r4
 8002abc:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8002abe:	89fb      	ldrh	r3, [r7, #14]
 8002ac0:	021b      	lsls	r3, r3, #8
 8002ac2:	79fa      	ldrb	r2, [r7, #7]
 8002ac4:	0092      	lsls	r2, r2, #2
 8002ac6:	3203      	adds	r2, #3
 8002ac8:	00d2      	lsls	r2, r2, #3
 8002aca:	4413      	add	r3, r2
 8002acc:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8002ace:	88bb      	ldrh	r3, [r7, #4]
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	6839      	ldr	r1, [r7, #0]
 8002ad4:	68b8      	ldr	r0, [r7, #8]
 8002ad6:	f7ff fe73 	bl	80027c0 <WIZCHIP_READ_BUF>
   ptr += len;
 8002ada:	89fa      	ldrh	r2, [r7, #14]
 8002adc:	88bb      	ldrh	r3, [r7, #4]
 8002ade:	4413      	add	r3, r2
 8002ae0:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8002ae2:	79fb      	ldrb	r3, [r7, #7]
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002aee:	461a      	mov	r2, r3
 8002af0:	89fb      	ldrh	r3, [r7, #14]
 8002af2:	0a1b      	lsrs	r3, r3, #8
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	4619      	mov	r1, r3
 8002afa:	4610      	mov	r0, r2
 8002afc:	f7ff fe12 	bl	8002724 <WIZCHIP_WRITE>
 8002b00:	79fb      	ldrb	r3, [r7, #7]
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	3301      	adds	r3, #1
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	89fb      	ldrh	r3, [r7, #14]
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	4619      	mov	r1, r3
 8002b14:	4610      	mov	r0, r2
 8002b16:	f7ff fe05 	bl	8002724 <WIZCHIP_WRITE>
 8002b1a:	e000      	b.n	8002b1e <wiz_recv_data+0xb2>
   if(len == 0) return;
 8002b1c:	bf00      	nop
}
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd90      	pop	{r4, r7, pc}

08002b24 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8002b24:	b590      	push	{r4, r7, lr}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4604      	mov	r4, r0
 8002b2c:	4608      	mov	r0, r1
 8002b2e:	4611      	mov	r1, r2
 8002b30:	461a      	mov	r2, r3
 8002b32:	4623      	mov	r3, r4
 8002b34:	71fb      	strb	r3, [r7, #7]
 8002b36:	4603      	mov	r3, r0
 8002b38:	71bb      	strb	r3, [r7, #6]
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	80bb      	strh	r3, [r7, #4]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8002b42:	79fb      	ldrb	r3, [r7, #7]
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	d902      	bls.n	8002b4e <socket+0x2a>
 8002b48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b4c:	e0f1      	b.n	8002d32 <socket+0x20e>
	switch(protocol)
 8002b4e:	79bb      	ldrb	r3, [r7, #6]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d004      	beq.n	8002b5e <socket+0x3a>
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	db10      	blt.n	8002b7a <socket+0x56>
 8002b58:	2b04      	cmp	r3, #4
 8002b5a:	dc0e      	bgt.n	8002b7a <socket+0x56>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8002b5c:	e011      	b.n	8002b82 <socket+0x5e>
            getSIPR((uint8_t*)&taddr);
 8002b5e:	f107 030c 	add.w	r3, r7, #12
 8002b62:	2204      	movs	r2, #4
 8002b64:	4619      	mov	r1, r3
 8002b66:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002b6a:	f7ff fe29 	bl	80027c0 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d105      	bne.n	8002b80 <socket+0x5c>
 8002b74:	f06f 0302 	mvn.w	r3, #2
 8002b78:	e0db      	b.n	8002d32 <socket+0x20e>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8002b7a:	f06f 0304 	mvn.w	r3, #4
 8002b7e:	e0d8      	b.n	8002d32 <socket+0x20e>
	    break;
 8002b80:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8002b82:	78fb      	ldrb	r3, [r7, #3]
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d002      	beq.n	8002b92 <socket+0x6e>
 8002b8c:	f06f 0305 	mvn.w	r3, #5
 8002b90:	e0cf      	b.n	8002d32 <socket+0x20e>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8002b92:	78fb      	ldrb	r3, [r7, #3]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d025      	beq.n	8002be4 <socket+0xc0>
	{
   	switch(protocol)
 8002b98:	79bb      	ldrb	r3, [r7, #6]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d002      	beq.n	8002ba4 <socket+0x80>
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d008      	beq.n	8002bb4 <socket+0x90>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8002ba2:	e024      	b.n	8002bee <socket+0xca>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8002ba4:	78fb      	ldrb	r3, [r7, #3]
 8002ba6:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d11c      	bne.n	8002be8 <socket+0xc4>
 8002bae:	f06f 0305 	mvn.w	r3, #5
 8002bb2:	e0be      	b.n	8002d32 <socket+0x20e>
   	      if(flag & SF_IGMP_VER2)
 8002bb4:	78fb      	ldrb	r3, [r7, #3]
 8002bb6:	f003 0320 	and.w	r3, r3, #32
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d006      	beq.n	8002bcc <socket+0xa8>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8002bbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	db02      	blt.n	8002bcc <socket+0xa8>
 8002bc6:	f06f 0305 	mvn.w	r3, #5
 8002bca:	e0b2      	b.n	8002d32 <socket+0x20e>
      	      if(flag & SF_UNI_BLOCK)
 8002bcc:	78fb      	ldrb	r3, [r7, #3]
 8002bce:	f003 0310 	and.w	r3, r3, #16
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00a      	beq.n	8002bec <socket+0xc8>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8002bd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	db06      	blt.n	8002bec <socket+0xc8>
 8002bde:	f06f 0305 	mvn.w	r3, #5
 8002be2:	e0a6      	b.n	8002d32 <socket+0x20e>
   	}
   }
 8002be4:	bf00      	nop
 8002be6:	e002      	b.n	8002bee <socket+0xca>
   	      break;
 8002be8:	bf00      	nop
 8002bea:	e000      	b.n	8002bee <socket+0xca>
   	      break;
 8002bec:	bf00      	nop
	close(sn);
 8002bee:	79fb      	ldrb	r3, [r7, #7]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f000 f8ad 	bl	8002d50 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8002bf6:	79fb      	ldrb	r3, [r7, #7]
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c04:	f023 030f 	bic.w	r3, r3, #15
 8002c08:	b25a      	sxtb	r2, r3
 8002c0a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	b25b      	sxtb	r3, r3
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	4619      	mov	r1, r3
 8002c16:	f7ff fd85 	bl	8002724 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8002c1a:	88bb      	ldrh	r3, [r7, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d110      	bne.n	8002c42 <socket+0x11e>
	{
	   port = sock_any_port++;
 8002c20:	4b46      	ldr	r3, [pc, #280]	; (8002d3c <socket+0x218>)
 8002c22:	881b      	ldrh	r3, [r3, #0]
 8002c24:	1c5a      	adds	r2, r3, #1
 8002c26:	b291      	uxth	r1, r2
 8002c28:	4a44      	ldr	r2, [pc, #272]	; (8002d3c <socket+0x218>)
 8002c2a:	8011      	strh	r1, [r2, #0]
 8002c2c:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8002c2e:	4b43      	ldr	r3, [pc, #268]	; (8002d3c <socket+0x218>)
 8002c30:	881b      	ldrh	r3, [r3, #0]
 8002c32:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d103      	bne.n	8002c42 <socket+0x11e>
 8002c3a:	4b40      	ldr	r3, [pc, #256]	; (8002d3c <socket+0x218>)
 8002c3c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8002c40:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8002c42:	79fb      	ldrb	r3, [r7, #7]
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	3301      	adds	r3, #1
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c4e:	461a      	mov	r2, r3
 8002c50:	88bb      	ldrh	r3, [r7, #4]
 8002c52:	0a1b      	lsrs	r3, r3, #8
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4610      	mov	r0, r2
 8002c5c:	f7ff fd62 	bl	8002724 <WIZCHIP_WRITE>
 8002c60:	79fb      	ldrb	r3, [r7, #7]
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	3301      	adds	r3, #1
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	88bb      	ldrh	r3, [r7, #4]
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	4619      	mov	r1, r3
 8002c74:	4610      	mov	r0, r2
 8002c76:	f7ff fd55 	bl	8002724 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	3301      	adds	r3, #1
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002c86:	2101      	movs	r1, #1
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff fd4b 	bl	8002724 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002c8e:	bf00      	nop
 8002c90:	79fb      	ldrb	r3, [r7, #7]
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	3301      	adds	r3, #1
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff fcf5 	bl	800268c <WIZCHIP_READ>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1f3      	bne.n	8002c90 <socket+0x16c>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8002ca8:	79fb      	ldrb	r3, [r7, #7]
 8002caa:	2201      	movs	r2, #1
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	b21b      	sxth	r3, r3
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	b21a      	sxth	r2, r3
 8002cb6:	4b22      	ldr	r3, [pc, #136]	; (8002d40 <socket+0x21c>)
 8002cb8:	881b      	ldrh	r3, [r3, #0]
 8002cba:	b21b      	sxth	r3, r3
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	b21b      	sxth	r3, r3
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	4b1f      	ldr	r3, [pc, #124]	; (8002d40 <socket+0x21c>)
 8002cc4:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8002cc6:	78fb      	ldrb	r3, [r7, #3]
 8002cc8:	f003 0201 	and.w	r2, r3, #1
 8002ccc:	79fb      	ldrb	r3, [r7, #7]
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	b21a      	sxth	r2, r3
 8002cd4:	4b1a      	ldr	r3, [pc, #104]	; (8002d40 <socket+0x21c>)
 8002cd6:	881b      	ldrh	r3, [r3, #0]
 8002cd8:	b21b      	sxth	r3, r3
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	b21b      	sxth	r3, r3
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	4b17      	ldr	r3, [pc, #92]	; (8002d40 <socket+0x21c>)
 8002ce2:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8002ce4:	79fb      	ldrb	r3, [r7, #7]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	b21b      	sxth	r3, r3
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	b21a      	sxth	r2, r3
 8002cf2:	4b14      	ldr	r3, [pc, #80]	; (8002d44 <socket+0x220>)
 8002cf4:	881b      	ldrh	r3, [r3, #0]
 8002cf6:	b21b      	sxth	r3, r3
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	b21b      	sxth	r3, r3
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	4b11      	ldr	r3, [pc, #68]	; (8002d44 <socket+0x220>)
 8002d00:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8002d02:	79fb      	ldrb	r3, [r7, #7]
 8002d04:	4a10      	ldr	r2, [pc, #64]	; (8002d48 <socket+0x224>)
 8002d06:	2100      	movs	r1, #0
 8002d08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8002d0c:	79fb      	ldrb	r3, [r7, #7]
 8002d0e:	4a0f      	ldr	r2, [pc, #60]	; (8002d4c <socket+0x228>)
 8002d10:	2100      	movs	r1, #0
 8002d12:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8002d14:	bf00      	nop
 8002d16:	79fb      	ldrb	r3, [r7, #7]
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff fcb2 	bl	800268c <WIZCHIP_READ>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d0f3      	beq.n	8002d16 <socket+0x1f2>
   return (int8_t)sn;
 8002d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8002d32:	4618      	mov	r0, r3
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd90      	pop	{r4, r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	2000000a 	.word	0x2000000a
 8002d40:	200000bc 	.word	0x200000bc
 8002d44:	200000be 	.word	0x200000be
 8002d48:	200000c0 	.word	0x200000c0
 8002d4c:	200000d0 	.word	0x200000d0

08002d50 <close>:

int8_t close(uint8_t sn)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	4603      	mov	r3, r0
 8002d58:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8002d5a:	79fb      	ldrb	r3, [r7, #7]
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d902      	bls.n	8002d66 <close+0x16>
 8002d60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d64:	e055      	b.n	8002e12 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8002d66:	79fb      	ldrb	r3, [r7, #7]
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002d72:	2110      	movs	r1, #16
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff fcd5 	bl	8002724 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8002d7a:	bf00      	nop
 8002d7c:	79fb      	ldrb	r3, [r7, #7]
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	3301      	adds	r3, #1
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff fc7f 	bl	800268c <WIZCHIP_READ>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1f3      	bne.n	8002d7c <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	3301      	adds	r3, #1
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002da0:	211f      	movs	r1, #31
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff fcbe 	bl	8002724 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8002da8:	79fb      	ldrb	r3, [r7, #7]
 8002daa:	2201      	movs	r2, #1
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	b21b      	sxth	r3, r3
 8002db2:	43db      	mvns	r3, r3
 8002db4:	b21a      	sxth	r2, r3
 8002db6:	4b19      	ldr	r3, [pc, #100]	; (8002e1c <close+0xcc>)
 8002db8:	881b      	ldrh	r3, [r3, #0]
 8002dba:	b21b      	sxth	r3, r3
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	b21b      	sxth	r3, r3
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	4b16      	ldr	r3, [pc, #88]	; (8002e1c <close+0xcc>)
 8002dc4:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8002dc6:	79fb      	ldrb	r3, [r7, #7]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	b21b      	sxth	r3, r3
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	b21a      	sxth	r2, r3
 8002dd4:	4b12      	ldr	r3, [pc, #72]	; (8002e20 <close+0xd0>)
 8002dd6:	881b      	ldrh	r3, [r3, #0]
 8002dd8:	b21b      	sxth	r3, r3
 8002dda:	4013      	ands	r3, r2
 8002ddc:	b21b      	sxth	r3, r3
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	4b0f      	ldr	r3, [pc, #60]	; (8002e20 <close+0xd0>)
 8002de2:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8002de4:	79fb      	ldrb	r3, [r7, #7]
 8002de6:	4a0f      	ldr	r2, [pc, #60]	; (8002e24 <close+0xd4>)
 8002de8:	2100      	movs	r1, #0
 8002dea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8002dee:	79fb      	ldrb	r3, [r7, #7]
 8002df0:	4a0d      	ldr	r2, [pc, #52]	; (8002e28 <close+0xd8>)
 8002df2:	2100      	movs	r1, #0
 8002df4:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8002df6:	bf00      	nop
 8002df8:	79fb      	ldrb	r3, [r7, #7]
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff fc41 	bl	800268c <WIZCHIP_READ>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1f3      	bne.n	8002df8 <close+0xa8>
	return SOCK_OK;
 8002e10:	2301      	movs	r3, #1
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	200000bc 	.word	0x200000bc
 8002e20:	200000be 	.word	0x200000be
 8002e24:	200000c0 	.word	0x200000c0
 8002e28:	200000d0 	.word	0x200000d0

08002e2c <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	6039      	str	r1, [r7, #0]
 8002e36:	71fb      	strb	r3, [r7, #7]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8002e3c:	79fb      	ldrb	r3, [r7, #7]
 8002e3e:	2b08      	cmp	r3, #8
 8002e40:	d902      	bls.n	8002e48 <connect+0x1c>
 8002e42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e46:	e0c6      	b.n	8002fd6 <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002e48:	79fb      	ldrb	r3, [r7, #7]
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff fc1b 	bl	800268c <WIZCHIP_READ>
 8002e56:	4603      	mov	r3, r0
 8002e58:	f003 030f 	and.w	r3, r3, #15
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d002      	beq.n	8002e66 <connect+0x3a>
 8002e60:	f06f 0304 	mvn.w	r3, #4
 8002e64:	e0b7      	b.n	8002fd6 <connect+0x1aa>
   CHECK_SOCKINIT();
 8002e66:	79fb      	ldrb	r3, [r7, #7]
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff fc0a 	bl	800268c <WIZCHIP_READ>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b13      	cmp	r3, #19
 8002e7c:	d002      	beq.n	8002e84 <connect+0x58>
 8002e7e:	f06f 0302 	mvn.w	r3, #2
 8002e82:	e0a8      	b.n	8002fd6 <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	021b      	lsls	r3, r3, #8
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	3201      	adds	r2, #1
 8002e92:	7812      	ldrb	r2, [r2, #0]
 8002e94:	4413      	add	r3, r2
 8002e96:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	021b      	lsls	r3, r3, #8
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	3202      	adds	r2, #2
 8002ea0:	7812      	ldrb	r2, [r2, #0]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	021b      	lsls	r3, r3, #8
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	3203      	adds	r2, #3
 8002eae:	7812      	ldrb	r2, [r2, #0]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002eba:	d002      	beq.n	8002ec2 <connect+0x96>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d102      	bne.n	8002ec8 <connect+0x9c>
 8002ec2:	f06f 030b 	mvn.w	r3, #11
 8002ec6:	e086      	b.n	8002fd6 <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8002ec8:	88bb      	ldrh	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d102      	bne.n	8002ed4 <connect+0xa8>
 8002ece:	f06f 030a 	mvn.w	r3, #10
 8002ed2:	e080      	b.n	8002fd6 <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8002ed4:	79fb      	ldrb	r3, [r7, #7]
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	3301      	adds	r3, #1
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8002ee0:	2204      	movs	r2, #4
 8002ee2:	6839      	ldr	r1, [r7, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff fccb 	bl	8002880 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8002eea:	79fb      	ldrb	r3, [r7, #7]
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	3301      	adds	r3, #1
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	88bb      	ldrh	r3, [r7, #4]
 8002efa:	0a1b      	lsrs	r3, r3, #8
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	4619      	mov	r1, r3
 8002f02:	4610      	mov	r0, r2
 8002f04:	f7ff fc0e 	bl	8002724 <WIZCHIP_WRITE>
 8002f08:	79fb      	ldrb	r3, [r7, #7]
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002f14:	461a      	mov	r2, r3
 8002f16:	88bb      	ldrh	r3, [r7, #4]
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4610      	mov	r0, r2
 8002f1e:	f7ff fc01 	bl	8002724 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8002f22:	79fb      	ldrb	r3, [r7, #7]
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	3301      	adds	r3, #1
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002f2e:	2104      	movs	r1, #4
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff fbf7 	bl	8002724 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002f36:	bf00      	nop
 8002f38:	79fb      	ldrb	r3, [r7, #7]
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff fba1 	bl	800268c <WIZCHIP_READ>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1f3      	bne.n	8002f38 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8002f50:	4b23      	ldr	r3, [pc, #140]	; (8002fe0 <connect+0x1b4>)
 8002f52:	881b      	ldrh	r3, [r3, #0]
 8002f54:	461a      	mov	r2, r3
 8002f56:	79fb      	ldrb	r3, [r7, #7]
 8002f58:	fa42 f303 	asr.w	r3, r2, r3
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d02b      	beq.n	8002fbc <connect+0x190>
 8002f64:	2300      	movs	r3, #0
 8002f66:	e036      	b.n	8002fd6 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8002f68:	79fb      	ldrb	r3, [r7, #7]
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff fb89 	bl	800268c <WIZCHIP_READ>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	f003 0308 	and.w	r3, r3, #8
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00c      	beq.n	8002f9e <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8002f84:	79fb      	ldrb	r3, [r7, #7]
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	3301      	adds	r3, #1
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002f90:	2108      	movs	r1, #8
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff fbc6 	bl	8002724 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 8002f98:	f06f 030c 	mvn.w	r3, #12
 8002f9c:	e01b      	b.n	8002fd6 <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8002f9e:	79fb      	ldrb	r3, [r7, #7]
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff fb6e 	bl	800268c <WIZCHIP_READ>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d102      	bne.n	8002fbc <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 8002fb6:	f06f 0303 	mvn.w	r3, #3
 8002fba:	e00c      	b.n	8002fd6 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8002fbc:	79fb      	ldrb	r3, [r7, #7]
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff fb5f 	bl	800268c <WIZCHIP_READ>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b17      	cmp	r3, #23
 8002fd2:	d1c9      	bne.n	8002f68 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8002fd4:	2301      	movs	r3, #1
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	200000bc 	.word	0x200000bc

08002fe4 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	4603      	mov	r3, r0
 8002fec:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8002fee:	79fb      	ldrb	r3, [r7, #7]
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	d902      	bls.n	8002ffa <disconnect+0x16>
 8002ff4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ff8:	e062      	b.n	80030c0 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002ffa:	79fb      	ldrb	r3, [r7, #7]
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	3301      	adds	r3, #1
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff fb42 	bl	800268c <WIZCHIP_READ>
 8003008:	4603      	mov	r3, r0
 800300a:	f003 030f 	and.w	r3, r3, #15
 800300e:	2b01      	cmp	r3, #1
 8003010:	d002      	beq.n	8003018 <disconnect+0x34>
 8003012:	f06f 0304 	mvn.w	r3, #4
 8003016:	e053      	b.n	80030c0 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8003018:	79fb      	ldrb	r3, [r7, #7]
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	3301      	adds	r3, #1
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003024:	2108      	movs	r1, #8
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff fb7c 	bl	8002724 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 800302c:	bf00      	nop
 800302e:	79fb      	ldrb	r3, [r7, #7]
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	3301      	adds	r3, #1
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff fb26 	bl	800268c <WIZCHIP_READ>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1f3      	bne.n	800302e <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8003046:	79fb      	ldrb	r3, [r7, #7]
 8003048:	2201      	movs	r2, #1
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	b21b      	sxth	r3, r3
 8003050:	43db      	mvns	r3, r3
 8003052:	b21a      	sxth	r2, r3
 8003054:	4b1c      	ldr	r3, [pc, #112]	; (80030c8 <disconnect+0xe4>)
 8003056:	881b      	ldrh	r3, [r3, #0]
 8003058:	b21b      	sxth	r3, r3
 800305a:	4013      	ands	r3, r2
 800305c:	b21b      	sxth	r3, r3
 800305e:	b29a      	uxth	r2, r3
 8003060:	4b19      	ldr	r3, [pc, #100]	; (80030c8 <disconnect+0xe4>)
 8003062:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8003064:	4b19      	ldr	r3, [pc, #100]	; (80030cc <disconnect+0xe8>)
 8003066:	881b      	ldrh	r3, [r3, #0]
 8003068:	461a      	mov	r2, r3
 800306a:	79fb      	ldrb	r3, [r7, #7]
 800306c:	fa42 f303 	asr.w	r3, r2, r3
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b00      	cmp	r3, #0
 8003076:	d016      	beq.n	80030a6 <disconnect+0xc2>
 8003078:	2300      	movs	r3, #0
 800307a:	e021      	b.n	80030c0 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 800307c:	79fb      	ldrb	r3, [r7, #7]
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	3301      	adds	r3, #1
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff faff 	bl	800268c <WIZCHIP_READ>
 800308e:	4603      	mov	r3, r0
 8003090:	f003 0308 	and.w	r3, r3, #8
 8003094:	2b00      	cmp	r3, #0
 8003096:	d006      	beq.n	80030a6 <disconnect+0xc2>
	   {
	      close(sn);
 8003098:	79fb      	ldrb	r3, [r7, #7]
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff fe58 	bl	8002d50 <close>
	      return SOCKERR_TIMEOUT;
 80030a0:	f06f 030c 	mvn.w	r3, #12
 80030a4:	e00c      	b.n	80030c0 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 80030a6:	79fb      	ldrb	r3, [r7, #7]
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	3301      	adds	r3, #1
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff faea 	bl	800268c <WIZCHIP_READ>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1de      	bne.n	800307c <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 80030be:	2301      	movs	r3, #1
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	200000be 	.word	0x200000be
 80030cc:	200000bc 	.word	0x200000bc

080030d0 <recv>:
   return (int32_t)len;
}


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80030d0:	b590      	push	{r4, r7, lr}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	4603      	mov	r3, r0
 80030d8:	6039      	str	r1, [r7, #0]
 80030da:	71fb      	strb	r3, [r7, #7]
 80030dc:	4613      	mov	r3, r2
 80030de:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 80030e0:	2300      	movs	r3, #0
 80030e2:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 80030e4:	2300      	movs	r3, #0
 80030e6:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 80030e8:	79fb      	ldrb	r3, [r7, #7]
 80030ea:	2b08      	cmp	r3, #8
 80030ec:	d902      	bls.n	80030f4 <recv+0x24>
 80030ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030f2:	e09c      	b.n	800322e <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80030f4:	79fb      	ldrb	r3, [r7, #7]
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	3301      	adds	r3, #1
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff fac5 	bl	800268c <WIZCHIP_READ>
 8003102:	4603      	mov	r3, r0
 8003104:	f003 030f 	and.w	r3, r3, #15
 8003108:	2b01      	cmp	r3, #1
 800310a:	d002      	beq.n	8003112 <recv+0x42>
 800310c:	f06f 0304 	mvn.w	r3, #4
 8003110:	e08d      	b.n	800322e <recv+0x15e>
   CHECK_SOCKDATA();
 8003112:	88bb      	ldrh	r3, [r7, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d102      	bne.n	800311e <recv+0x4e>
 8003118:	f06f 030d 	mvn.w	r3, #13
 800311c:	e087      	b.n	800322e <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 800311e:	79fb      	ldrb	r3, [r7, #7]
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	3301      	adds	r3, #1
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff faae 	bl	800268c <WIZCHIP_READ>
 8003130:	4603      	mov	r3, r0
 8003132:	b29b      	uxth	r3, r3
 8003134:	029b      	lsls	r3, r3, #10
 8003136:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8003138:	89ba      	ldrh	r2, [r7, #12]
 800313a:	88bb      	ldrh	r3, [r7, #4]
 800313c:	429a      	cmp	r2, r3
 800313e:	d201      	bcs.n	8003144 <recv+0x74>
 8003140:	89bb      	ldrh	r3, [r7, #12]
 8003142:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8003144:	79fb      	ldrb	r3, [r7, #7]
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff fc45 	bl	80029d6 <getSn_RX_RSR>
 800314c:	4603      	mov	r3, r0
 800314e:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8003150:	79fb      	ldrb	r3, [r7, #7]
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	3301      	adds	r3, #1
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff fa95 	bl	800268c <WIZCHIP_READ>
 8003162:	4603      	mov	r3, r0
 8003164:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8003166:	7bfb      	ldrb	r3, [r7, #15]
 8003168:	2b17      	cmp	r3, #23
 800316a:	d026      	beq.n	80031ba <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 800316c:	7bfb      	ldrb	r3, [r7, #15]
 800316e:	2b1c      	cmp	r3, #28
 8003170:	d11c      	bne.n	80031ac <recv+0xdc>
            {
               if(recvsize != 0) break;
 8003172:	89bb      	ldrh	r3, [r7, #12]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d133      	bne.n	80031e0 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8003178:	79fb      	ldrb	r3, [r7, #7]
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff fbe0 	bl	8002940 <getSn_TX_FSR>
 8003180:	4603      	mov	r3, r0
 8003182:	461c      	mov	r4, r3
 8003184:	79fb      	ldrb	r3, [r7, #7]
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	3301      	adds	r3, #1
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff fa7b 	bl	800268c <WIZCHIP_READ>
 8003196:	4603      	mov	r3, r0
 8003198:	029b      	lsls	r3, r3, #10
 800319a:	429c      	cmp	r4, r3
 800319c:	d10d      	bne.n	80031ba <recv+0xea>
               {
                  close(sn);
 800319e:	79fb      	ldrb	r3, [r7, #7]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff fdd5 	bl	8002d50 <close>
                  return SOCKERR_SOCKSTATUS;
 80031a6:	f06f 0306 	mvn.w	r3, #6
 80031aa:	e040      	b.n	800322e <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 80031ac:	79fb      	ldrb	r3, [r7, #7]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7ff fdce 	bl	8002d50 <close>
               return SOCKERR_SOCKSTATUS;
 80031b4:	f06f 0306 	mvn.w	r3, #6
 80031b8:	e039      	b.n	800322e <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80031ba:	4b1f      	ldr	r3, [pc, #124]	; (8003238 <recv+0x168>)
 80031bc:	881b      	ldrh	r3, [r3, #0]
 80031be:	461a      	mov	r2, r3
 80031c0:	79fb      	ldrb	r3, [r7, #7]
 80031c2:	fa42 f303 	asr.w	r3, r2, r3
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d004      	beq.n	80031d8 <recv+0x108>
 80031ce:	89bb      	ldrh	r3, [r7, #12]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <recv+0x108>
 80031d4:	2300      	movs	r3, #0
 80031d6:	e02a      	b.n	800322e <recv+0x15e>
         if(recvsize != 0) break;
 80031d8:	89bb      	ldrh	r3, [r7, #12]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d102      	bne.n	80031e4 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 80031de:	e7b1      	b.n	8003144 <recv+0x74>
               if(recvsize != 0) break;
 80031e0:	bf00      	nop
 80031e2:	e000      	b.n	80031e6 <recv+0x116>
         if(recvsize != 0) break;
 80031e4:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 80031e6:	89ba      	ldrh	r2, [r7, #12]
 80031e8:	88bb      	ldrh	r3, [r7, #4]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d201      	bcs.n	80031f2 <recv+0x122>
 80031ee:	89bb      	ldrh	r3, [r7, #12]
 80031f0:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 80031f2:	88ba      	ldrh	r2, [r7, #4]
 80031f4:	79fb      	ldrb	r3, [r7, #7]
 80031f6:	6839      	ldr	r1, [r7, #0]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff fc37 	bl	8002a6c <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 80031fe:	79fb      	ldrb	r3, [r7, #7]
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	3301      	adds	r3, #1
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800320a:	2140      	movs	r1, #64	; 0x40
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff fa89 	bl	8002724 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8003212:	bf00      	nop
 8003214:	79fb      	ldrb	r3, [r7, #7]
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	3301      	adds	r3, #1
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff fa33 	bl	800268c <WIZCHIP_READ>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1f3      	bne.n	8003214 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800322c:	88bb      	ldrh	r3, [r7, #4]
}
 800322e:	4618      	mov	r0, r3
 8003230:	3714      	adds	r7, #20
 8003232:	46bd      	mov	sp, r7
 8003234:	bd90      	pop	{r4, r7, pc}
 8003236:	bf00      	nop
 8003238:	200000bc 	.word	0x200000bc

0800323c <getsockopt>:
   }   
   return SOCK_OK;
}

int8_t  getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
 800323c:	b590      	push	{r4, r7, lr}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	4603      	mov	r3, r0
 8003244:	603a      	str	r2, [r7, #0]
 8003246:	71fb      	strb	r3, [r7, #7]
 8003248:	460b      	mov	r3, r1
 800324a:	71bb      	strb	r3, [r7, #6]
   CHECK_SOCKNUM();
 800324c:	79fb      	ldrb	r3, [r7, #7]
 800324e:	2b08      	cmp	r3, #8
 8003250:	d902      	bls.n	8003258 <getsockopt+0x1c>
 8003252:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003256:	e101      	b.n	800345c <getsockopt+0x220>
   switch(sotype)
 8003258:	79bb      	ldrb	r3, [r7, #6]
 800325a:	2b0c      	cmp	r3, #12
 800325c:	f200 80fa 	bhi.w	8003454 <getsockopt+0x218>
 8003260:	a201      	add	r2, pc, #4	; (adr r2, 8003268 <getsockopt+0x2c>)
 8003262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003266:	bf00      	nop
 8003268:	0800329d 	.word	0x0800329d
 800326c:	080032b9 	.word	0x080032b9
 8003270:	080032d5 	.word	0x080032d5
 8003274:	080032f1 	.word	0x080032f1
 8003278:	0800332b 	.word	0x0800332b
 800327c:	08003343 	.word	0x08003343
 8003280:	08003455 	.word	0x08003455
 8003284:	0800337d 	.word	0x0800337d
 8003288:	080033b7 	.word	0x080033b7
 800328c:	080033c9 	.word	0x080033c9
 8003290:	080033db 	.word	0x080033db
 8003294:	080033f7 	.word	0x080033f7
 8003298:	0800342f 	.word	0x0800342f
   {
      case SO_FLAG:
         *(uint8_t*)arg = getSn_MR(sn) & 0xF0;
 800329c:	79fb      	ldrb	r3, [r7, #7]
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	3301      	adds	r3, #1
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff f9f1 	bl	800268c <WIZCHIP_READ>
 80032aa:	4603      	mov	r3, r0
 80032ac:	f023 030f 	bic.w	r3, r3, #15
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	701a      	strb	r2, [r3, #0]
         break;
 80032b6:	e0d0      	b.n	800345a <getsockopt+0x21e>
      case SO_TTL:
         *(uint8_t*) arg = getSn_TTL(sn);
 80032b8:	79fb      	ldrb	r3, [r7, #7]
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	3301      	adds	r3, #1
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff f9e1 	bl	800268c <WIZCHIP_READ>
 80032ca:	4603      	mov	r3, r0
 80032cc:	461a      	mov	r2, r3
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	701a      	strb	r2, [r3, #0]
         break;
 80032d2:	e0c2      	b.n	800345a <getsockopt+0x21e>
      case SO_TOS:
         *(uint8_t*) arg = getSn_TOS(sn);
 80032d4:	79fb      	ldrb	r3, [r7, #7]
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	3301      	adds	r3, #1
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff f9d3 	bl	800268c <WIZCHIP_READ>
 80032e6:	4603      	mov	r3, r0
 80032e8:	461a      	mov	r2, r3
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	701a      	strb	r2, [r3, #0]
         break;
 80032ee:	e0b4      	b.n	800345a <getsockopt+0x21e>
      case SO_MSS:   
         *(uint16_t*) arg = getSn_MSSR(sn);
 80032f0:	79fb      	ldrb	r3, [r7, #7]
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	3301      	adds	r3, #1
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff f9c5 	bl	800268c <WIZCHIP_READ>
 8003302:	4603      	mov	r3, r0
 8003304:	b29b      	uxth	r3, r3
 8003306:	021b      	lsls	r3, r3, #8
 8003308:	b29c      	uxth	r4, r3
 800330a:	79fb      	ldrb	r3, [r7, #7]
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	3301      	adds	r3, #1
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff f9b8 	bl	800268c <WIZCHIP_READ>
 800331c:	4603      	mov	r3, r0
 800331e:	b29b      	uxth	r3, r3
 8003320:	4423      	add	r3, r4
 8003322:	b29a      	uxth	r2, r3
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	801a      	strh	r2, [r3, #0]
         break;
 8003328:	e097      	b.n	800345a <getsockopt+0x21e>
      case SO_DESTIP:
         getSn_DIPR(sn, (uint8_t*)arg);
 800332a:	79fb      	ldrb	r3, [r7, #7]
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	3301      	adds	r3, #1
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8003336:	2204      	movs	r2, #4
 8003338:	6839      	ldr	r1, [r7, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff fa40 	bl	80027c0 <WIZCHIP_READ_BUF>
         break;
 8003340:	e08b      	b.n	800345a <getsockopt+0x21e>
      case SO_DESTPORT:  
         *(uint16_t*) arg = getSn_DPORT(sn);
 8003342:	79fb      	ldrb	r3, [r7, #7]
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	3301      	adds	r3, #1
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800334e:	4618      	mov	r0, r3
 8003350:	f7ff f99c 	bl	800268c <WIZCHIP_READ>
 8003354:	4603      	mov	r3, r0
 8003356:	b29b      	uxth	r3, r3
 8003358:	021b      	lsls	r3, r3, #8
 800335a:	b29c      	uxth	r4, r3
 800335c:	79fb      	ldrb	r3, [r7, #7]
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	3301      	adds	r3, #1
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff f98f 	bl	800268c <WIZCHIP_READ>
 800336e:	4603      	mov	r3, r0
 8003370:	b29b      	uxth	r3, r3
 8003372:	4423      	add	r3, r4
 8003374:	b29a      	uxth	r2, r3
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	801a      	strh	r2, [r3, #0]
         break;
 800337a:	e06e      	b.n	800345a <getsockopt+0x21e>
   #if _WIZCHIP_ > 5200   
      case SO_KEEPALIVEAUTO:
         CHECK_SOCKMODE(Sn_MR_TCP);
 800337c:	79fb      	ldrb	r3, [r7, #7]
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	3301      	adds	r3, #1
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff f981 	bl	800268c <WIZCHIP_READ>
 800338a:	4603      	mov	r3, r0
 800338c:	f003 030f 	and.w	r3, r3, #15
 8003390:	2b01      	cmp	r3, #1
 8003392:	d002      	beq.n	800339a <getsockopt+0x15e>
 8003394:	f06f 0304 	mvn.w	r3, #4
 8003398:	e060      	b.n	800345c <getsockopt+0x220>
         *(uint16_t*) arg = getSn_KPALVTR(sn);
 800339a:	79fb      	ldrb	r3, [r7, #7]
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	3301      	adds	r3, #1
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff f970 	bl	800268c <WIZCHIP_READ>
 80033ac:	4603      	mov	r3, r0
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	801a      	strh	r2, [r3, #0]
         break;
 80033b4:	e051      	b.n	800345a <getsockopt+0x21e>
   #endif      
      case SO_SENDBUF:
         *(uint16_t*) arg = getSn_TX_FSR(sn);
 80033b6:	79fb      	ldrb	r3, [r7, #7]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff fac1 	bl	8002940 <getSn_TX_FSR>
 80033be:	4603      	mov	r3, r0
 80033c0:	461a      	mov	r2, r3
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	801a      	strh	r2, [r3, #0]
         break;
 80033c6:	e048      	b.n	800345a <getsockopt+0x21e>
      case SO_RECVBUF:
         *(uint16_t*) arg = getSn_RX_RSR(sn);
 80033c8:	79fb      	ldrb	r3, [r7, #7]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff fb03 	bl	80029d6 <getSn_RX_RSR>
 80033d0:	4603      	mov	r3, r0
 80033d2:	461a      	mov	r2, r3
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	801a      	strh	r2, [r3, #0]
         break;
 80033d8:	e03f      	b.n	800345a <getsockopt+0x21e>
      case SO_STATUS:
         *(uint8_t*) arg = getSn_SR(sn);
 80033da:	79fb      	ldrb	r3, [r7, #7]
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	3301      	adds	r3, #1
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff f950 	bl	800268c <WIZCHIP_READ>
 80033ec:	4603      	mov	r3, r0
 80033ee:	461a      	mov	r2, r3
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	701a      	strb	r2, [r3, #0]
         break;
 80033f4:	e031      	b.n	800345a <getsockopt+0x21e>
      case SO_REMAINSIZE:
         if(getSn_MR(sn) & Sn_MR_TCP)
 80033f6:	79fb      	ldrb	r3, [r7, #7]
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	3301      	adds	r3, #1
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	4618      	mov	r0, r3
 8003400:	f7ff f944 	bl	800268c <WIZCHIP_READ>
 8003404:	4603      	mov	r3, r0
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b00      	cmp	r3, #0
 800340c:	d008      	beq.n	8003420 <getsockopt+0x1e4>
            *(uint16_t*)arg = getSn_RX_RSR(sn);
 800340e:	79fb      	ldrb	r3, [r7, #7]
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff fae0 	bl	80029d6 <getSn_RX_RSR>
 8003416:	4603      	mov	r3, r0
 8003418:	461a      	mov	r2, r3
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	801a      	strh	r2, [r3, #0]
         else
            *(uint16_t*)arg = sock_remained_size[sn];
         break;
 800341e:	e01c      	b.n	800345a <getsockopt+0x21e>
            *(uint16_t*)arg = sock_remained_size[sn];
 8003420:	79fb      	ldrb	r3, [r7, #7]
 8003422:	4a10      	ldr	r2, [pc, #64]	; (8003464 <getsockopt+0x228>)
 8003424:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	801a      	strh	r2, [r3, #0]
         break;
 800342c:	e015      	b.n	800345a <getsockopt+0x21e>
      case SO_PACKINFO:
         //CHECK_SOCKMODE(Sn_MR_TCP);
#if _WIZCHIP_ != 5300
         if((getSn_MR(sn) == Sn_MR_TCP))
 800342e:	79fb      	ldrb	r3, [r7, #7]
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	3301      	adds	r3, #1
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	4618      	mov	r0, r3
 8003438:	f7ff f928 	bl	800268c <WIZCHIP_READ>
 800343c:	4603      	mov	r3, r0
 800343e:	2b01      	cmp	r3, #1
 8003440:	d102      	bne.n	8003448 <getsockopt+0x20c>
             return SOCKERR_SOCKMODE;
 8003442:	f06f 0304 	mvn.w	r3, #4
 8003446:	e009      	b.n	800345c <getsockopt+0x220>
#endif
         *(uint8_t*)arg = sock_pack_info[sn];
 8003448:	79fb      	ldrb	r3, [r7, #7]
 800344a:	4a07      	ldr	r2, [pc, #28]	; (8003468 <getsockopt+0x22c>)
 800344c:	5cd2      	ldrb	r2, [r2, r3]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	701a      	strb	r2, [r3, #0]
         break;
 8003452:	e002      	b.n	800345a <getsockopt+0x21e>
      default:
         return SOCKERR_SOCKOPT;
 8003454:	f06f 0301 	mvn.w	r3, #1
 8003458:	e000      	b.n	800345c <getsockopt+0x220>
   }
   return SOCK_OK;
 800345a:	2301      	movs	r3, #1
}
 800345c:	4618      	mov	r0, r3
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	bd90      	pop	{r4, r7, pc}
 8003464:	200000c0 	.word	0x200000c0
 8003468:	200000d0 	.word	0x200000d0

0800346c <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
 8003470:	bf00      	nop
 8003472:	46bd      	mov	sp, r7
 8003474:	bc80      	pop	{r7}
 8003476:	4770      	bx	lr

08003478 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
 800347c:	bf00      	nop
 800347e:	46bd      	mov	sp, r7
 8003480:	bc80      	pop	{r7}
 8003482:	4770      	bx	lr

08003484 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0
 8003488:	bf00      	nop
 800348a:	46bd      	mov	sp, r7
 800348c:	bc80      	pop	{r7}
 800348e:	4770      	bx	lr

08003490 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
 8003494:	bf00      	nop
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr

0800349c <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	4618      	mov	r0, r3
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bc80      	pop	{r7}
 80034b2:	4770      	bx	lr

080034b4 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	460b      	mov	r3, r1
 80034be:	70fb      	strb	r3, [r7, #3]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	78fa      	ldrb	r2, [r7, #3]
 80034c4:	701a      	strb	r2, [r3, #0]
 80034c6:	bf00      	nop
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bc80      	pop	{r7}
 80034ce:	4770      	bx	lr

080034d0 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	2300      	movs	r3, #0
 80034d6:	4618      	mov	r0, r3
 80034d8:	46bd      	mov	sp, r7
 80034da:	bc80      	pop	{r7}
 80034dc:	4770      	bx	lr

080034de <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 80034de:	b480      	push	{r7}
 80034e0:	b083      	sub	sp, #12
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	4603      	mov	r3, r0
 80034e6:	71fb      	strb	r3, [r7, #7]
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bc80      	pop	{r7}
 80034f0:	4770      	bx	lr
	...

080034f4 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d002      	beq.n	800350a <reg_wizchip_cs_cbfunc+0x16>
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d106      	bne.n	8003518 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800350a:	4b09      	ldr	r3, [pc, #36]	; (8003530 <reg_wizchip_cs_cbfunc+0x3c>)
 800350c:	4a09      	ldr	r2, [pc, #36]	; (8003534 <reg_wizchip_cs_cbfunc+0x40>)
 800350e:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8003510:	4b07      	ldr	r3, [pc, #28]	; (8003530 <reg_wizchip_cs_cbfunc+0x3c>)
 8003512:	4a09      	ldr	r2, [pc, #36]	; (8003538 <reg_wizchip_cs_cbfunc+0x44>)
 8003514:	619a      	str	r2, [r3, #24]
 8003516:	e005      	b.n	8003524 <reg_wizchip_cs_cbfunc+0x30>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8003518:	4a05      	ldr	r2, [pc, #20]	; (8003530 <reg_wizchip_cs_cbfunc+0x3c>)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 800351e:	4a04      	ldr	r2, [pc, #16]	; (8003530 <reg_wizchip_cs_cbfunc+0x3c>)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	6193      	str	r3, [r2, #24]
   }
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	bc80      	pop	{r7}
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	2000000c 	.word	0x2000000c
 8003534:	08003485 	.word	0x08003485
 8003538:	08003491 	.word	0x08003491

0800353c <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8003546:	bf00      	nop
 8003548:	4b0e      	ldr	r3, [pc, #56]	; (8003584 <reg_wizchip_spi_cbfunc+0x48>)
 800354a:	881b      	ldrh	r3, [r3, #0]
 800354c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003550:	2b00      	cmp	r3, #0
 8003552:	d0f9      	beq.n	8003548 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d002      	beq.n	8003560 <reg_wizchip_spi_cbfunc+0x24>
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d106      	bne.n	800356e <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8003560:	4b08      	ldr	r3, [pc, #32]	; (8003584 <reg_wizchip_spi_cbfunc+0x48>)
 8003562:	4a09      	ldr	r2, [pc, #36]	; (8003588 <reg_wizchip_spi_cbfunc+0x4c>)
 8003564:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8003566:	4b07      	ldr	r3, [pc, #28]	; (8003584 <reg_wizchip_spi_cbfunc+0x48>)
 8003568:	4a08      	ldr	r2, [pc, #32]	; (800358c <reg_wizchip_spi_cbfunc+0x50>)
 800356a:	621a      	str	r2, [r3, #32]
 800356c:	e005      	b.n	800357a <reg_wizchip_spi_cbfunc+0x3e>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 800356e:	4a05      	ldr	r2, [pc, #20]	; (8003584 <reg_wizchip_spi_cbfunc+0x48>)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8003574:	4a03      	ldr	r2, [pc, #12]	; (8003584 <reg_wizchip_spi_cbfunc+0x48>)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	6213      	str	r3, [r2, #32]
   }
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	bc80      	pop	{r7}
 8003582:	4770      	bx	lr
 8003584:	2000000c 	.word	0x2000000c
 8003588:	080034d1 	.word	0x080034d1
 800358c:	080034df 	.word	0x080034df

08003590 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8003596:	1d3b      	adds	r3, r7, #4
 8003598:	2206      	movs	r2, #6
 800359a:	4619      	mov	r1, r3
 800359c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80035a0:	f7ff f90e 	bl	80027c0 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80035a4:	f107 0314 	add.w	r3, r7, #20
 80035a8:	2204      	movs	r2, #4
 80035aa:	4619      	mov	r1, r3
 80035ac:	f44f 7080 	mov.w	r0, #256	; 0x100
 80035b0:	f7ff f906 	bl	80027c0 <WIZCHIP_READ_BUF>
 80035b4:	f107 0310 	add.w	r3, r7, #16
 80035b8:	2204      	movs	r2, #4
 80035ba:	4619      	mov	r1, r3
 80035bc:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80035c0:	f7ff f8fe 	bl	80027c0 <WIZCHIP_READ_BUF>
 80035c4:	f107 030c 	add.w	r3, r7, #12
 80035c8:	2204      	movs	r2, #4
 80035ca:	4619      	mov	r1, r3
 80035cc:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80035d0:	f7ff f8f6 	bl	80027c0 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80035d4:	2180      	movs	r1, #128	; 0x80
 80035d6:	2000      	movs	r0, #0
 80035d8:	f7ff f8a4 	bl	8002724 <WIZCHIP_WRITE>
   getMR(); // for delay
 80035dc:	2000      	movs	r0, #0
 80035de:	f7ff f855 	bl	800268c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80035e2:	1d3b      	adds	r3, r7, #4
 80035e4:	2206      	movs	r2, #6
 80035e6:	4619      	mov	r1, r3
 80035e8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80035ec:	f7ff f948 	bl	8002880 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80035f0:	f107 0314 	add.w	r3, r7, #20
 80035f4:	2204      	movs	r2, #4
 80035f6:	4619      	mov	r1, r3
 80035f8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80035fc:	f7ff f940 	bl	8002880 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8003600:	f107 0310 	add.w	r3, r7, #16
 8003604:	2204      	movs	r2, #4
 8003606:	4619      	mov	r1, r3
 8003608:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800360c:	f7ff f938 	bl	8002880 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8003610:	f107 030c 	add.w	r3, r7, #12
 8003614:	2204      	movs	r2, #4
 8003616:	4619      	mov	r1, r3
 8003618:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800361c:	f7ff f930 	bl	8002880 <WIZCHIP_WRITE_BUF>
}
 8003620:	bf00      	nop
 8003622:	3718      	adds	r7, #24
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8003632:	2300      	movs	r3, #0
 8003634:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8003636:	f7ff ffab 	bl	8003590 <wizchip_sw_reset>
   if(txsize)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d03b      	beq.n	80036b8 <wizchip_init+0x90>
   {
      tmp = 0;
 8003640:	2300      	movs	r3, #0
 8003642:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003644:	2300      	movs	r3, #0
 8003646:	73fb      	strb	r3, [r7, #15]
 8003648:	e015      	b.n	8003676 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 800364a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	4413      	add	r3, r2
 8003652:	781a      	ldrb	r2, [r3, #0]
 8003654:	7bbb      	ldrb	r3, [r7, #14]
 8003656:	4413      	add	r3, r2
 8003658:	b2db      	uxtb	r3, r3
 800365a:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 800365c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003660:	2b10      	cmp	r3, #16
 8003662:	dd02      	ble.n	800366a <wizchip_init+0x42>
 8003664:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003668:	e066      	b.n	8003738 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800366a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800366e:	b2db      	uxtb	r3, r3
 8003670:	3301      	adds	r3, #1
 8003672:	b2db      	uxtb	r3, r3
 8003674:	73fb      	strb	r3, [r7, #15]
 8003676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800367a:	2b07      	cmp	r3, #7
 800367c:	dde5      	ble.n	800364a <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800367e:	2300      	movs	r3, #0
 8003680:	73fb      	strb	r3, [r7, #15]
 8003682:	e015      	b.n	80036b0 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8003684:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	3301      	adds	r3, #1
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8003692:	4618      	mov	r0, r3
 8003694:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	4413      	add	r3, r2
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	4619      	mov	r1, r3
 80036a0:	f7ff f840 	bl	8002724 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80036a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	3301      	adds	r3, #1
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	73fb      	strb	r3, [r7, #15]
 80036b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036b4:	2b07      	cmp	r3, #7
 80036b6:	dde5      	ble.n	8003684 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d03b      	beq.n	8003736 <wizchip_init+0x10e>
   {
      tmp = 0;
 80036be:	2300      	movs	r3, #0
 80036c0:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80036c2:	2300      	movs	r3, #0
 80036c4:	73fb      	strb	r3, [r7, #15]
 80036c6:	e015      	b.n	80036f4 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 80036c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	4413      	add	r3, r2
 80036d0:	781a      	ldrb	r2, [r3, #0]
 80036d2:	7bbb      	ldrb	r3, [r7, #14]
 80036d4:	4413      	add	r3, r2
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 80036da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80036de:	2b10      	cmp	r3, #16
 80036e0:	dd02      	ble.n	80036e8 <wizchip_init+0xc0>
 80036e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036e6:	e027      	b.n	8003738 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80036e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	3301      	adds	r3, #1
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	73fb      	strb	r3, [r7, #15]
 80036f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036f8:	2b07      	cmp	r3, #7
 80036fa:	dde5      	ble.n	80036c8 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80036fc:	2300      	movs	r3, #0
 80036fe:	73fb      	strb	r3, [r7, #15]
 8003700:	e015      	b.n	800372e <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8003702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	3301      	adds	r3, #1
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8003710:	4618      	mov	r0, r3
 8003712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	4413      	add	r3, r2
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	4619      	mov	r1, r3
 800371e:	f7ff f801 	bl	8002724 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003726:	b2db      	uxtb	r3, r3
 8003728:	3301      	adds	r3, #1
 800372a:	b2db      	uxtb	r3, r3
 800372c:	73fb      	strb	r3, [r7, #15]
 800372e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003732:	2b07      	cmp	r3, #7
 8003734:	dde5      	ble.n	8003702 <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2206      	movs	r2, #6
 800374c:	4619      	mov	r1, r3
 800374e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003752:	f7ff f895 	bl	8002880 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	330e      	adds	r3, #14
 800375a:	2204      	movs	r2, #4
 800375c:	4619      	mov	r1, r3
 800375e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003762:	f7ff f88d 	bl	8002880 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	330a      	adds	r3, #10
 800376a:	2204      	movs	r2, #4
 800376c:	4619      	mov	r1, r3
 800376e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003772:	f7ff f885 	bl	8002880 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	3306      	adds	r3, #6
 800377a:	2204      	movs	r2, #4
 800377c:	4619      	mov	r1, r3
 800377e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003782:	f7ff f87d 	bl	8002880 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	7c9a      	ldrb	r2, [r3, #18]
 800378a:	4b0b      	ldr	r3, [pc, #44]	; (80037b8 <wizchip_setnetinfo+0x78>)
 800378c:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	7cda      	ldrb	r2, [r3, #19]
 8003792:	4b09      	ldr	r3, [pc, #36]	; (80037b8 <wizchip_setnetinfo+0x78>)
 8003794:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	7d1a      	ldrb	r2, [r3, #20]
 800379a:	4b07      	ldr	r3, [pc, #28]	; (80037b8 <wizchip_setnetinfo+0x78>)
 800379c:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	7d5a      	ldrb	r2, [r3, #21]
 80037a2:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <wizchip_setnetinfo+0x78>)
 80037a4:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	7d9a      	ldrb	r2, [r3, #22]
 80037aa:	4b04      	ldr	r3, [pc, #16]	; (80037bc <wizchip_setnetinfo+0x7c>)
 80037ac:	701a      	strb	r2, [r3, #0]
}
 80037ae:	bf00      	nop
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	200000d8 	.word	0x200000d8
 80037bc:	200000dc 	.word	0x200000dc

080037c0 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2206      	movs	r2, #6
 80037cc:	4619      	mov	r1, r3
 80037ce:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80037d2:	f7fe fff5 	bl	80027c0 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	330e      	adds	r3, #14
 80037da:	2204      	movs	r2, #4
 80037dc:	4619      	mov	r1, r3
 80037de:	f44f 7080 	mov.w	r0, #256	; 0x100
 80037e2:	f7fe ffed 	bl	80027c0 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	330a      	adds	r3, #10
 80037ea:	2204      	movs	r2, #4
 80037ec:	4619      	mov	r1, r3
 80037ee:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80037f2:	f7fe ffe5 	bl	80027c0 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	3306      	adds	r3, #6
 80037fa:	2204      	movs	r2, #4
 80037fc:	4619      	mov	r1, r3
 80037fe:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003802:	f7fe ffdd 	bl	80027c0 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8003806:	4b0c      	ldr	r3, [pc, #48]	; (8003838 <wizchip_getnetinfo+0x78>)
 8003808:	781a      	ldrb	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 800380e:	4b0a      	ldr	r3, [pc, #40]	; (8003838 <wizchip_getnetinfo+0x78>)
 8003810:	785a      	ldrb	r2, [r3, #1]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8003816:	4b08      	ldr	r3, [pc, #32]	; (8003838 <wizchip_getnetinfo+0x78>)
 8003818:	789a      	ldrb	r2, [r3, #2]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 800381e:	4b06      	ldr	r3, [pc, #24]	; (8003838 <wizchip_getnetinfo+0x78>)
 8003820:	78da      	ldrb	r2, [r3, #3]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8003826:	4b05      	ldr	r3, [pc, #20]	; (800383c <wizchip_getnetinfo+0x7c>)
 8003828:	781a      	ldrb	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	759a      	strb	r2, [r3, #22]
}
 800382e:	bf00      	nop
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	200000d8 	.word	0x200000d8
 800383c:	200000dc 	.word	0x200000dc

08003840 <__errno>:
 8003840:	4b01      	ldr	r3, [pc, #4]	; (8003848 <__errno+0x8>)
 8003842:	6818      	ldr	r0, [r3, #0]
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	20000038 	.word	0x20000038

0800384c <__libc_init_array>:
 800384c:	b570      	push	{r4, r5, r6, lr}
 800384e:	2500      	movs	r5, #0
 8003850:	4e0c      	ldr	r6, [pc, #48]	; (8003884 <__libc_init_array+0x38>)
 8003852:	4c0d      	ldr	r4, [pc, #52]	; (8003888 <__libc_init_array+0x3c>)
 8003854:	1ba4      	subs	r4, r4, r6
 8003856:	10a4      	asrs	r4, r4, #2
 8003858:	42a5      	cmp	r5, r4
 800385a:	d109      	bne.n	8003870 <__libc_init_array+0x24>
 800385c:	f000 fc36 	bl	80040cc <_init>
 8003860:	2500      	movs	r5, #0
 8003862:	4e0a      	ldr	r6, [pc, #40]	; (800388c <__libc_init_array+0x40>)
 8003864:	4c0a      	ldr	r4, [pc, #40]	; (8003890 <__libc_init_array+0x44>)
 8003866:	1ba4      	subs	r4, r4, r6
 8003868:	10a4      	asrs	r4, r4, #2
 800386a:	42a5      	cmp	r5, r4
 800386c:	d105      	bne.n	800387a <__libc_init_array+0x2e>
 800386e:	bd70      	pop	{r4, r5, r6, pc}
 8003870:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003874:	4798      	blx	r3
 8003876:	3501      	adds	r5, #1
 8003878:	e7ee      	b.n	8003858 <__libc_init_array+0xc>
 800387a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800387e:	4798      	blx	r3
 8003880:	3501      	adds	r5, #1
 8003882:	e7f2      	b.n	800386a <__libc_init_array+0x1e>
 8003884:	0800434c 	.word	0x0800434c
 8003888:	0800434c 	.word	0x0800434c
 800388c:	0800434c 	.word	0x0800434c
 8003890:	08004350 	.word	0x08004350

08003894 <memcpy>:
 8003894:	b510      	push	{r4, lr}
 8003896:	1e43      	subs	r3, r0, #1
 8003898:	440a      	add	r2, r1
 800389a:	4291      	cmp	r1, r2
 800389c:	d100      	bne.n	80038a0 <memcpy+0xc>
 800389e:	bd10      	pop	{r4, pc}
 80038a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038a8:	e7f7      	b.n	800389a <memcpy+0x6>

080038aa <memset>:
 80038aa:	4603      	mov	r3, r0
 80038ac:	4402      	add	r2, r0
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d100      	bne.n	80038b4 <memset+0xa>
 80038b2:	4770      	bx	lr
 80038b4:	f803 1b01 	strb.w	r1, [r3], #1
 80038b8:	e7f9      	b.n	80038ae <memset+0x4>
	...

080038bc <_free_r>:
 80038bc:	b538      	push	{r3, r4, r5, lr}
 80038be:	4605      	mov	r5, r0
 80038c0:	2900      	cmp	r1, #0
 80038c2:	d043      	beq.n	800394c <_free_r+0x90>
 80038c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038c8:	1f0c      	subs	r4, r1, #4
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	bfb8      	it	lt
 80038ce:	18e4      	addlt	r4, r4, r3
 80038d0:	f000 f8ca 	bl	8003a68 <__malloc_lock>
 80038d4:	4a1e      	ldr	r2, [pc, #120]	; (8003950 <_free_r+0x94>)
 80038d6:	6813      	ldr	r3, [r2, #0]
 80038d8:	4610      	mov	r0, r2
 80038da:	b933      	cbnz	r3, 80038ea <_free_r+0x2e>
 80038dc:	6063      	str	r3, [r4, #4]
 80038de:	6014      	str	r4, [r2, #0]
 80038e0:	4628      	mov	r0, r5
 80038e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038e6:	f000 b8c0 	b.w	8003a6a <__malloc_unlock>
 80038ea:	42a3      	cmp	r3, r4
 80038ec:	d90b      	bls.n	8003906 <_free_r+0x4a>
 80038ee:	6821      	ldr	r1, [r4, #0]
 80038f0:	1862      	adds	r2, r4, r1
 80038f2:	4293      	cmp	r3, r2
 80038f4:	bf01      	itttt	eq
 80038f6:	681a      	ldreq	r2, [r3, #0]
 80038f8:	685b      	ldreq	r3, [r3, #4]
 80038fa:	1852      	addeq	r2, r2, r1
 80038fc:	6022      	streq	r2, [r4, #0]
 80038fe:	6063      	str	r3, [r4, #4]
 8003900:	6004      	str	r4, [r0, #0]
 8003902:	e7ed      	b.n	80038e0 <_free_r+0x24>
 8003904:	4613      	mov	r3, r2
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	b10a      	cbz	r2, 800390e <_free_r+0x52>
 800390a:	42a2      	cmp	r2, r4
 800390c:	d9fa      	bls.n	8003904 <_free_r+0x48>
 800390e:	6819      	ldr	r1, [r3, #0]
 8003910:	1858      	adds	r0, r3, r1
 8003912:	42a0      	cmp	r0, r4
 8003914:	d10b      	bne.n	800392e <_free_r+0x72>
 8003916:	6820      	ldr	r0, [r4, #0]
 8003918:	4401      	add	r1, r0
 800391a:	1858      	adds	r0, r3, r1
 800391c:	4282      	cmp	r2, r0
 800391e:	6019      	str	r1, [r3, #0]
 8003920:	d1de      	bne.n	80038e0 <_free_r+0x24>
 8003922:	6810      	ldr	r0, [r2, #0]
 8003924:	6852      	ldr	r2, [r2, #4]
 8003926:	4401      	add	r1, r0
 8003928:	6019      	str	r1, [r3, #0]
 800392a:	605a      	str	r2, [r3, #4]
 800392c:	e7d8      	b.n	80038e0 <_free_r+0x24>
 800392e:	d902      	bls.n	8003936 <_free_r+0x7a>
 8003930:	230c      	movs	r3, #12
 8003932:	602b      	str	r3, [r5, #0]
 8003934:	e7d4      	b.n	80038e0 <_free_r+0x24>
 8003936:	6820      	ldr	r0, [r4, #0]
 8003938:	1821      	adds	r1, r4, r0
 800393a:	428a      	cmp	r2, r1
 800393c:	bf01      	itttt	eq
 800393e:	6811      	ldreq	r1, [r2, #0]
 8003940:	6852      	ldreq	r2, [r2, #4]
 8003942:	1809      	addeq	r1, r1, r0
 8003944:	6021      	streq	r1, [r4, #0]
 8003946:	6062      	str	r2, [r4, #4]
 8003948:	605c      	str	r4, [r3, #4]
 800394a:	e7c9      	b.n	80038e0 <_free_r+0x24>
 800394c:	bd38      	pop	{r3, r4, r5, pc}
 800394e:	bf00      	nop
 8003950:	200000e0 	.word	0x200000e0

08003954 <_malloc_r>:
 8003954:	b570      	push	{r4, r5, r6, lr}
 8003956:	1ccd      	adds	r5, r1, #3
 8003958:	f025 0503 	bic.w	r5, r5, #3
 800395c:	3508      	adds	r5, #8
 800395e:	2d0c      	cmp	r5, #12
 8003960:	bf38      	it	cc
 8003962:	250c      	movcc	r5, #12
 8003964:	2d00      	cmp	r5, #0
 8003966:	4606      	mov	r6, r0
 8003968:	db01      	blt.n	800396e <_malloc_r+0x1a>
 800396a:	42a9      	cmp	r1, r5
 800396c:	d903      	bls.n	8003976 <_malloc_r+0x22>
 800396e:	230c      	movs	r3, #12
 8003970:	6033      	str	r3, [r6, #0]
 8003972:	2000      	movs	r0, #0
 8003974:	bd70      	pop	{r4, r5, r6, pc}
 8003976:	f000 f877 	bl	8003a68 <__malloc_lock>
 800397a:	4a21      	ldr	r2, [pc, #132]	; (8003a00 <_malloc_r+0xac>)
 800397c:	6814      	ldr	r4, [r2, #0]
 800397e:	4621      	mov	r1, r4
 8003980:	b991      	cbnz	r1, 80039a8 <_malloc_r+0x54>
 8003982:	4c20      	ldr	r4, [pc, #128]	; (8003a04 <_malloc_r+0xb0>)
 8003984:	6823      	ldr	r3, [r4, #0]
 8003986:	b91b      	cbnz	r3, 8003990 <_malloc_r+0x3c>
 8003988:	4630      	mov	r0, r6
 800398a:	f000 f83d 	bl	8003a08 <_sbrk_r>
 800398e:	6020      	str	r0, [r4, #0]
 8003990:	4629      	mov	r1, r5
 8003992:	4630      	mov	r0, r6
 8003994:	f000 f838 	bl	8003a08 <_sbrk_r>
 8003998:	1c43      	adds	r3, r0, #1
 800399a:	d124      	bne.n	80039e6 <_malloc_r+0x92>
 800399c:	230c      	movs	r3, #12
 800399e:	4630      	mov	r0, r6
 80039a0:	6033      	str	r3, [r6, #0]
 80039a2:	f000 f862 	bl	8003a6a <__malloc_unlock>
 80039a6:	e7e4      	b.n	8003972 <_malloc_r+0x1e>
 80039a8:	680b      	ldr	r3, [r1, #0]
 80039aa:	1b5b      	subs	r3, r3, r5
 80039ac:	d418      	bmi.n	80039e0 <_malloc_r+0x8c>
 80039ae:	2b0b      	cmp	r3, #11
 80039b0:	d90f      	bls.n	80039d2 <_malloc_r+0x7e>
 80039b2:	600b      	str	r3, [r1, #0]
 80039b4:	18cc      	adds	r4, r1, r3
 80039b6:	50cd      	str	r5, [r1, r3]
 80039b8:	4630      	mov	r0, r6
 80039ba:	f000 f856 	bl	8003a6a <__malloc_unlock>
 80039be:	f104 000b 	add.w	r0, r4, #11
 80039c2:	1d23      	adds	r3, r4, #4
 80039c4:	f020 0007 	bic.w	r0, r0, #7
 80039c8:	1ac3      	subs	r3, r0, r3
 80039ca:	d0d3      	beq.n	8003974 <_malloc_r+0x20>
 80039cc:	425a      	negs	r2, r3
 80039ce:	50e2      	str	r2, [r4, r3]
 80039d0:	e7d0      	b.n	8003974 <_malloc_r+0x20>
 80039d2:	684b      	ldr	r3, [r1, #4]
 80039d4:	428c      	cmp	r4, r1
 80039d6:	bf16      	itet	ne
 80039d8:	6063      	strne	r3, [r4, #4]
 80039da:	6013      	streq	r3, [r2, #0]
 80039dc:	460c      	movne	r4, r1
 80039de:	e7eb      	b.n	80039b8 <_malloc_r+0x64>
 80039e0:	460c      	mov	r4, r1
 80039e2:	6849      	ldr	r1, [r1, #4]
 80039e4:	e7cc      	b.n	8003980 <_malloc_r+0x2c>
 80039e6:	1cc4      	adds	r4, r0, #3
 80039e8:	f024 0403 	bic.w	r4, r4, #3
 80039ec:	42a0      	cmp	r0, r4
 80039ee:	d005      	beq.n	80039fc <_malloc_r+0xa8>
 80039f0:	1a21      	subs	r1, r4, r0
 80039f2:	4630      	mov	r0, r6
 80039f4:	f000 f808 	bl	8003a08 <_sbrk_r>
 80039f8:	3001      	adds	r0, #1
 80039fa:	d0cf      	beq.n	800399c <_malloc_r+0x48>
 80039fc:	6025      	str	r5, [r4, #0]
 80039fe:	e7db      	b.n	80039b8 <_malloc_r+0x64>
 8003a00:	200000e0 	.word	0x200000e0
 8003a04:	200000e4 	.word	0x200000e4

08003a08 <_sbrk_r>:
 8003a08:	b538      	push	{r3, r4, r5, lr}
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	4c05      	ldr	r4, [pc, #20]	; (8003a24 <_sbrk_r+0x1c>)
 8003a0e:	4605      	mov	r5, r0
 8003a10:	4608      	mov	r0, r1
 8003a12:	6023      	str	r3, [r4, #0]
 8003a14:	f7fc ff9a 	bl	800094c <_sbrk>
 8003a18:	1c43      	adds	r3, r0, #1
 8003a1a:	d102      	bne.n	8003a22 <_sbrk_r+0x1a>
 8003a1c:	6823      	ldr	r3, [r4, #0]
 8003a1e:	b103      	cbz	r3, 8003a22 <_sbrk_r+0x1a>
 8003a20:	602b      	str	r3, [r5, #0]
 8003a22:	bd38      	pop	{r3, r4, r5, pc}
 8003a24:	200001c0 	.word	0x200001c0

08003a28 <siprintf>:
 8003a28:	b40e      	push	{r1, r2, r3}
 8003a2a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a2e:	b500      	push	{lr}
 8003a30:	b09c      	sub	sp, #112	; 0x70
 8003a32:	ab1d      	add	r3, sp, #116	; 0x74
 8003a34:	9002      	str	r0, [sp, #8]
 8003a36:	9006      	str	r0, [sp, #24]
 8003a38:	9107      	str	r1, [sp, #28]
 8003a3a:	9104      	str	r1, [sp, #16]
 8003a3c:	4808      	ldr	r0, [pc, #32]	; (8003a60 <siprintf+0x38>)
 8003a3e:	4909      	ldr	r1, [pc, #36]	; (8003a64 <siprintf+0x3c>)
 8003a40:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a44:	9105      	str	r1, [sp, #20]
 8003a46:	6800      	ldr	r0, [r0, #0]
 8003a48:	a902      	add	r1, sp, #8
 8003a4a:	9301      	str	r3, [sp, #4]
 8003a4c:	f000 f868 	bl	8003b20 <_svfiprintf_r>
 8003a50:	2200      	movs	r2, #0
 8003a52:	9b02      	ldr	r3, [sp, #8]
 8003a54:	701a      	strb	r2, [r3, #0]
 8003a56:	b01c      	add	sp, #112	; 0x70
 8003a58:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a5c:	b003      	add	sp, #12
 8003a5e:	4770      	bx	lr
 8003a60:	20000038 	.word	0x20000038
 8003a64:	ffff0208 	.word	0xffff0208

08003a68 <__malloc_lock>:
 8003a68:	4770      	bx	lr

08003a6a <__malloc_unlock>:
 8003a6a:	4770      	bx	lr

08003a6c <__ssputs_r>:
 8003a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a70:	688e      	ldr	r6, [r1, #8]
 8003a72:	4682      	mov	sl, r0
 8003a74:	429e      	cmp	r6, r3
 8003a76:	460c      	mov	r4, r1
 8003a78:	4690      	mov	r8, r2
 8003a7a:	4699      	mov	r9, r3
 8003a7c:	d837      	bhi.n	8003aee <__ssputs_r+0x82>
 8003a7e:	898a      	ldrh	r2, [r1, #12]
 8003a80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a84:	d031      	beq.n	8003aea <__ssputs_r+0x7e>
 8003a86:	2302      	movs	r3, #2
 8003a88:	6825      	ldr	r5, [r4, #0]
 8003a8a:	6909      	ldr	r1, [r1, #16]
 8003a8c:	1a6f      	subs	r7, r5, r1
 8003a8e:	6965      	ldr	r5, [r4, #20]
 8003a90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a94:	fb95 f5f3 	sdiv	r5, r5, r3
 8003a98:	f109 0301 	add.w	r3, r9, #1
 8003a9c:	443b      	add	r3, r7
 8003a9e:	429d      	cmp	r5, r3
 8003aa0:	bf38      	it	cc
 8003aa2:	461d      	movcc	r5, r3
 8003aa4:	0553      	lsls	r3, r2, #21
 8003aa6:	d530      	bpl.n	8003b0a <__ssputs_r+0x9e>
 8003aa8:	4629      	mov	r1, r5
 8003aaa:	f7ff ff53 	bl	8003954 <_malloc_r>
 8003aae:	4606      	mov	r6, r0
 8003ab0:	b950      	cbnz	r0, 8003ac8 <__ssputs_r+0x5c>
 8003ab2:	230c      	movs	r3, #12
 8003ab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ab8:	f8ca 3000 	str.w	r3, [sl]
 8003abc:	89a3      	ldrh	r3, [r4, #12]
 8003abe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ac2:	81a3      	strh	r3, [r4, #12]
 8003ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ac8:	463a      	mov	r2, r7
 8003aca:	6921      	ldr	r1, [r4, #16]
 8003acc:	f7ff fee2 	bl	8003894 <memcpy>
 8003ad0:	89a3      	ldrh	r3, [r4, #12]
 8003ad2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ada:	81a3      	strh	r3, [r4, #12]
 8003adc:	6126      	str	r6, [r4, #16]
 8003ade:	443e      	add	r6, r7
 8003ae0:	6026      	str	r6, [r4, #0]
 8003ae2:	464e      	mov	r6, r9
 8003ae4:	6165      	str	r5, [r4, #20]
 8003ae6:	1bed      	subs	r5, r5, r7
 8003ae8:	60a5      	str	r5, [r4, #8]
 8003aea:	454e      	cmp	r6, r9
 8003aec:	d900      	bls.n	8003af0 <__ssputs_r+0x84>
 8003aee:	464e      	mov	r6, r9
 8003af0:	4632      	mov	r2, r6
 8003af2:	4641      	mov	r1, r8
 8003af4:	6820      	ldr	r0, [r4, #0]
 8003af6:	f000 faa1 	bl	800403c <memmove>
 8003afa:	68a3      	ldr	r3, [r4, #8]
 8003afc:	2000      	movs	r0, #0
 8003afe:	1b9b      	subs	r3, r3, r6
 8003b00:	60a3      	str	r3, [r4, #8]
 8003b02:	6823      	ldr	r3, [r4, #0]
 8003b04:	441e      	add	r6, r3
 8003b06:	6026      	str	r6, [r4, #0]
 8003b08:	e7dc      	b.n	8003ac4 <__ssputs_r+0x58>
 8003b0a:	462a      	mov	r2, r5
 8003b0c:	f000 faaf 	bl	800406e <_realloc_r>
 8003b10:	4606      	mov	r6, r0
 8003b12:	2800      	cmp	r0, #0
 8003b14:	d1e2      	bne.n	8003adc <__ssputs_r+0x70>
 8003b16:	6921      	ldr	r1, [r4, #16]
 8003b18:	4650      	mov	r0, sl
 8003b1a:	f7ff fecf 	bl	80038bc <_free_r>
 8003b1e:	e7c8      	b.n	8003ab2 <__ssputs_r+0x46>

08003b20 <_svfiprintf_r>:
 8003b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b24:	461d      	mov	r5, r3
 8003b26:	898b      	ldrh	r3, [r1, #12]
 8003b28:	b09d      	sub	sp, #116	; 0x74
 8003b2a:	061f      	lsls	r7, r3, #24
 8003b2c:	4680      	mov	r8, r0
 8003b2e:	460c      	mov	r4, r1
 8003b30:	4616      	mov	r6, r2
 8003b32:	d50f      	bpl.n	8003b54 <_svfiprintf_r+0x34>
 8003b34:	690b      	ldr	r3, [r1, #16]
 8003b36:	b96b      	cbnz	r3, 8003b54 <_svfiprintf_r+0x34>
 8003b38:	2140      	movs	r1, #64	; 0x40
 8003b3a:	f7ff ff0b 	bl	8003954 <_malloc_r>
 8003b3e:	6020      	str	r0, [r4, #0]
 8003b40:	6120      	str	r0, [r4, #16]
 8003b42:	b928      	cbnz	r0, 8003b50 <_svfiprintf_r+0x30>
 8003b44:	230c      	movs	r3, #12
 8003b46:	f8c8 3000 	str.w	r3, [r8]
 8003b4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b4e:	e0c8      	b.n	8003ce2 <_svfiprintf_r+0x1c2>
 8003b50:	2340      	movs	r3, #64	; 0x40
 8003b52:	6163      	str	r3, [r4, #20]
 8003b54:	2300      	movs	r3, #0
 8003b56:	9309      	str	r3, [sp, #36]	; 0x24
 8003b58:	2320      	movs	r3, #32
 8003b5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b5e:	2330      	movs	r3, #48	; 0x30
 8003b60:	f04f 0b01 	mov.w	fp, #1
 8003b64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b68:	9503      	str	r5, [sp, #12]
 8003b6a:	4637      	mov	r7, r6
 8003b6c:	463d      	mov	r5, r7
 8003b6e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003b72:	b10b      	cbz	r3, 8003b78 <_svfiprintf_r+0x58>
 8003b74:	2b25      	cmp	r3, #37	; 0x25
 8003b76:	d13e      	bne.n	8003bf6 <_svfiprintf_r+0xd6>
 8003b78:	ebb7 0a06 	subs.w	sl, r7, r6
 8003b7c:	d00b      	beq.n	8003b96 <_svfiprintf_r+0x76>
 8003b7e:	4653      	mov	r3, sl
 8003b80:	4632      	mov	r2, r6
 8003b82:	4621      	mov	r1, r4
 8003b84:	4640      	mov	r0, r8
 8003b86:	f7ff ff71 	bl	8003a6c <__ssputs_r>
 8003b8a:	3001      	adds	r0, #1
 8003b8c:	f000 80a4 	beq.w	8003cd8 <_svfiprintf_r+0x1b8>
 8003b90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b92:	4453      	add	r3, sl
 8003b94:	9309      	str	r3, [sp, #36]	; 0x24
 8003b96:	783b      	ldrb	r3, [r7, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 809d 	beq.w	8003cd8 <_svfiprintf_r+0x1b8>
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ba4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ba8:	9304      	str	r3, [sp, #16]
 8003baa:	9307      	str	r3, [sp, #28]
 8003bac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003bb0:	931a      	str	r3, [sp, #104]	; 0x68
 8003bb2:	462f      	mov	r7, r5
 8003bb4:	2205      	movs	r2, #5
 8003bb6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003bba:	4850      	ldr	r0, [pc, #320]	; (8003cfc <_svfiprintf_r+0x1dc>)
 8003bbc:	f000 fa30 	bl	8004020 <memchr>
 8003bc0:	9b04      	ldr	r3, [sp, #16]
 8003bc2:	b9d0      	cbnz	r0, 8003bfa <_svfiprintf_r+0xda>
 8003bc4:	06d9      	lsls	r1, r3, #27
 8003bc6:	bf44      	itt	mi
 8003bc8:	2220      	movmi	r2, #32
 8003bca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003bce:	071a      	lsls	r2, r3, #28
 8003bd0:	bf44      	itt	mi
 8003bd2:	222b      	movmi	r2, #43	; 0x2b
 8003bd4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003bd8:	782a      	ldrb	r2, [r5, #0]
 8003bda:	2a2a      	cmp	r2, #42	; 0x2a
 8003bdc:	d015      	beq.n	8003c0a <_svfiprintf_r+0xea>
 8003bde:	462f      	mov	r7, r5
 8003be0:	2000      	movs	r0, #0
 8003be2:	250a      	movs	r5, #10
 8003be4:	9a07      	ldr	r2, [sp, #28]
 8003be6:	4639      	mov	r1, r7
 8003be8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003bec:	3b30      	subs	r3, #48	; 0x30
 8003bee:	2b09      	cmp	r3, #9
 8003bf0:	d94d      	bls.n	8003c8e <_svfiprintf_r+0x16e>
 8003bf2:	b1b8      	cbz	r0, 8003c24 <_svfiprintf_r+0x104>
 8003bf4:	e00f      	b.n	8003c16 <_svfiprintf_r+0xf6>
 8003bf6:	462f      	mov	r7, r5
 8003bf8:	e7b8      	b.n	8003b6c <_svfiprintf_r+0x4c>
 8003bfa:	4a40      	ldr	r2, [pc, #256]	; (8003cfc <_svfiprintf_r+0x1dc>)
 8003bfc:	463d      	mov	r5, r7
 8003bfe:	1a80      	subs	r0, r0, r2
 8003c00:	fa0b f000 	lsl.w	r0, fp, r0
 8003c04:	4318      	orrs	r0, r3
 8003c06:	9004      	str	r0, [sp, #16]
 8003c08:	e7d3      	b.n	8003bb2 <_svfiprintf_r+0x92>
 8003c0a:	9a03      	ldr	r2, [sp, #12]
 8003c0c:	1d11      	adds	r1, r2, #4
 8003c0e:	6812      	ldr	r2, [r2, #0]
 8003c10:	9103      	str	r1, [sp, #12]
 8003c12:	2a00      	cmp	r2, #0
 8003c14:	db01      	blt.n	8003c1a <_svfiprintf_r+0xfa>
 8003c16:	9207      	str	r2, [sp, #28]
 8003c18:	e004      	b.n	8003c24 <_svfiprintf_r+0x104>
 8003c1a:	4252      	negs	r2, r2
 8003c1c:	f043 0302 	orr.w	r3, r3, #2
 8003c20:	9207      	str	r2, [sp, #28]
 8003c22:	9304      	str	r3, [sp, #16]
 8003c24:	783b      	ldrb	r3, [r7, #0]
 8003c26:	2b2e      	cmp	r3, #46	; 0x2e
 8003c28:	d10c      	bne.n	8003c44 <_svfiprintf_r+0x124>
 8003c2a:	787b      	ldrb	r3, [r7, #1]
 8003c2c:	2b2a      	cmp	r3, #42	; 0x2a
 8003c2e:	d133      	bne.n	8003c98 <_svfiprintf_r+0x178>
 8003c30:	9b03      	ldr	r3, [sp, #12]
 8003c32:	3702      	adds	r7, #2
 8003c34:	1d1a      	adds	r2, r3, #4
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	9203      	str	r2, [sp, #12]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	bfb8      	it	lt
 8003c3e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003c42:	9305      	str	r3, [sp, #20]
 8003c44:	4d2e      	ldr	r5, [pc, #184]	; (8003d00 <_svfiprintf_r+0x1e0>)
 8003c46:	2203      	movs	r2, #3
 8003c48:	7839      	ldrb	r1, [r7, #0]
 8003c4a:	4628      	mov	r0, r5
 8003c4c:	f000 f9e8 	bl	8004020 <memchr>
 8003c50:	b138      	cbz	r0, 8003c62 <_svfiprintf_r+0x142>
 8003c52:	2340      	movs	r3, #64	; 0x40
 8003c54:	1b40      	subs	r0, r0, r5
 8003c56:	fa03 f000 	lsl.w	r0, r3, r0
 8003c5a:	9b04      	ldr	r3, [sp, #16]
 8003c5c:	3701      	adds	r7, #1
 8003c5e:	4303      	orrs	r3, r0
 8003c60:	9304      	str	r3, [sp, #16]
 8003c62:	7839      	ldrb	r1, [r7, #0]
 8003c64:	2206      	movs	r2, #6
 8003c66:	4827      	ldr	r0, [pc, #156]	; (8003d04 <_svfiprintf_r+0x1e4>)
 8003c68:	1c7e      	adds	r6, r7, #1
 8003c6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c6e:	f000 f9d7 	bl	8004020 <memchr>
 8003c72:	2800      	cmp	r0, #0
 8003c74:	d038      	beq.n	8003ce8 <_svfiprintf_r+0x1c8>
 8003c76:	4b24      	ldr	r3, [pc, #144]	; (8003d08 <_svfiprintf_r+0x1e8>)
 8003c78:	bb13      	cbnz	r3, 8003cc0 <_svfiprintf_r+0x1a0>
 8003c7a:	9b03      	ldr	r3, [sp, #12]
 8003c7c:	3307      	adds	r3, #7
 8003c7e:	f023 0307 	bic.w	r3, r3, #7
 8003c82:	3308      	adds	r3, #8
 8003c84:	9303      	str	r3, [sp, #12]
 8003c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c88:	444b      	add	r3, r9
 8003c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8003c8c:	e76d      	b.n	8003b6a <_svfiprintf_r+0x4a>
 8003c8e:	fb05 3202 	mla	r2, r5, r2, r3
 8003c92:	2001      	movs	r0, #1
 8003c94:	460f      	mov	r7, r1
 8003c96:	e7a6      	b.n	8003be6 <_svfiprintf_r+0xc6>
 8003c98:	2300      	movs	r3, #0
 8003c9a:	250a      	movs	r5, #10
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	3701      	adds	r7, #1
 8003ca0:	9305      	str	r3, [sp, #20]
 8003ca2:	4638      	mov	r0, r7
 8003ca4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ca8:	3a30      	subs	r2, #48	; 0x30
 8003caa:	2a09      	cmp	r2, #9
 8003cac:	d903      	bls.n	8003cb6 <_svfiprintf_r+0x196>
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d0c8      	beq.n	8003c44 <_svfiprintf_r+0x124>
 8003cb2:	9105      	str	r1, [sp, #20]
 8003cb4:	e7c6      	b.n	8003c44 <_svfiprintf_r+0x124>
 8003cb6:	fb05 2101 	mla	r1, r5, r1, r2
 8003cba:	2301      	movs	r3, #1
 8003cbc:	4607      	mov	r7, r0
 8003cbe:	e7f0      	b.n	8003ca2 <_svfiprintf_r+0x182>
 8003cc0:	ab03      	add	r3, sp, #12
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	4622      	mov	r2, r4
 8003cc6:	4b11      	ldr	r3, [pc, #68]	; (8003d0c <_svfiprintf_r+0x1ec>)
 8003cc8:	a904      	add	r1, sp, #16
 8003cca:	4640      	mov	r0, r8
 8003ccc:	f3af 8000 	nop.w
 8003cd0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003cd4:	4681      	mov	r9, r0
 8003cd6:	d1d6      	bne.n	8003c86 <_svfiprintf_r+0x166>
 8003cd8:	89a3      	ldrh	r3, [r4, #12]
 8003cda:	065b      	lsls	r3, r3, #25
 8003cdc:	f53f af35 	bmi.w	8003b4a <_svfiprintf_r+0x2a>
 8003ce0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ce2:	b01d      	add	sp, #116	; 0x74
 8003ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ce8:	ab03      	add	r3, sp, #12
 8003cea:	9300      	str	r3, [sp, #0]
 8003cec:	4622      	mov	r2, r4
 8003cee:	4b07      	ldr	r3, [pc, #28]	; (8003d0c <_svfiprintf_r+0x1ec>)
 8003cf0:	a904      	add	r1, sp, #16
 8003cf2:	4640      	mov	r0, r8
 8003cf4:	f000 f882 	bl	8003dfc <_printf_i>
 8003cf8:	e7ea      	b.n	8003cd0 <_svfiprintf_r+0x1b0>
 8003cfa:	bf00      	nop
 8003cfc:	08004318 	.word	0x08004318
 8003d00:	0800431e 	.word	0x0800431e
 8003d04:	08004322 	.word	0x08004322
 8003d08:	00000000 	.word	0x00000000
 8003d0c:	08003a6d 	.word	0x08003a6d

08003d10 <_printf_common>:
 8003d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d14:	4691      	mov	r9, r2
 8003d16:	461f      	mov	r7, r3
 8003d18:	688a      	ldr	r2, [r1, #8]
 8003d1a:	690b      	ldr	r3, [r1, #16]
 8003d1c:	4606      	mov	r6, r0
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	bfb8      	it	lt
 8003d22:	4613      	movlt	r3, r2
 8003d24:	f8c9 3000 	str.w	r3, [r9]
 8003d28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d2c:	460c      	mov	r4, r1
 8003d2e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d32:	b112      	cbz	r2, 8003d3a <_printf_common+0x2a>
 8003d34:	3301      	adds	r3, #1
 8003d36:	f8c9 3000 	str.w	r3, [r9]
 8003d3a:	6823      	ldr	r3, [r4, #0]
 8003d3c:	0699      	lsls	r1, r3, #26
 8003d3e:	bf42      	ittt	mi
 8003d40:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003d44:	3302      	addmi	r3, #2
 8003d46:	f8c9 3000 	strmi.w	r3, [r9]
 8003d4a:	6825      	ldr	r5, [r4, #0]
 8003d4c:	f015 0506 	ands.w	r5, r5, #6
 8003d50:	d107      	bne.n	8003d62 <_printf_common+0x52>
 8003d52:	f104 0a19 	add.w	sl, r4, #25
 8003d56:	68e3      	ldr	r3, [r4, #12]
 8003d58:	f8d9 2000 	ldr.w	r2, [r9]
 8003d5c:	1a9b      	subs	r3, r3, r2
 8003d5e:	42ab      	cmp	r3, r5
 8003d60:	dc29      	bgt.n	8003db6 <_printf_common+0xa6>
 8003d62:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003d66:	6822      	ldr	r2, [r4, #0]
 8003d68:	3300      	adds	r3, #0
 8003d6a:	bf18      	it	ne
 8003d6c:	2301      	movne	r3, #1
 8003d6e:	0692      	lsls	r2, r2, #26
 8003d70:	d42e      	bmi.n	8003dd0 <_printf_common+0xc0>
 8003d72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d76:	4639      	mov	r1, r7
 8003d78:	4630      	mov	r0, r6
 8003d7a:	47c0      	blx	r8
 8003d7c:	3001      	adds	r0, #1
 8003d7e:	d021      	beq.n	8003dc4 <_printf_common+0xb4>
 8003d80:	6823      	ldr	r3, [r4, #0]
 8003d82:	68e5      	ldr	r5, [r4, #12]
 8003d84:	f003 0306 	and.w	r3, r3, #6
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	bf18      	it	ne
 8003d8c:	2500      	movne	r5, #0
 8003d8e:	f8d9 2000 	ldr.w	r2, [r9]
 8003d92:	f04f 0900 	mov.w	r9, #0
 8003d96:	bf08      	it	eq
 8003d98:	1aad      	subeq	r5, r5, r2
 8003d9a:	68a3      	ldr	r3, [r4, #8]
 8003d9c:	6922      	ldr	r2, [r4, #16]
 8003d9e:	bf08      	it	eq
 8003da0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003da4:	4293      	cmp	r3, r2
 8003da6:	bfc4      	itt	gt
 8003da8:	1a9b      	subgt	r3, r3, r2
 8003daa:	18ed      	addgt	r5, r5, r3
 8003dac:	341a      	adds	r4, #26
 8003dae:	454d      	cmp	r5, r9
 8003db0:	d11a      	bne.n	8003de8 <_printf_common+0xd8>
 8003db2:	2000      	movs	r0, #0
 8003db4:	e008      	b.n	8003dc8 <_printf_common+0xb8>
 8003db6:	2301      	movs	r3, #1
 8003db8:	4652      	mov	r2, sl
 8003dba:	4639      	mov	r1, r7
 8003dbc:	4630      	mov	r0, r6
 8003dbe:	47c0      	blx	r8
 8003dc0:	3001      	adds	r0, #1
 8003dc2:	d103      	bne.n	8003dcc <_printf_common+0xbc>
 8003dc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dcc:	3501      	adds	r5, #1
 8003dce:	e7c2      	b.n	8003d56 <_printf_common+0x46>
 8003dd0:	2030      	movs	r0, #48	; 0x30
 8003dd2:	18e1      	adds	r1, r4, r3
 8003dd4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003dd8:	1c5a      	adds	r2, r3, #1
 8003dda:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003dde:	4422      	add	r2, r4
 8003de0:	3302      	adds	r3, #2
 8003de2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003de6:	e7c4      	b.n	8003d72 <_printf_common+0x62>
 8003de8:	2301      	movs	r3, #1
 8003dea:	4622      	mov	r2, r4
 8003dec:	4639      	mov	r1, r7
 8003dee:	4630      	mov	r0, r6
 8003df0:	47c0      	blx	r8
 8003df2:	3001      	adds	r0, #1
 8003df4:	d0e6      	beq.n	8003dc4 <_printf_common+0xb4>
 8003df6:	f109 0901 	add.w	r9, r9, #1
 8003dfa:	e7d8      	b.n	8003dae <_printf_common+0x9e>

08003dfc <_printf_i>:
 8003dfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e00:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003e04:	460c      	mov	r4, r1
 8003e06:	7e09      	ldrb	r1, [r1, #24]
 8003e08:	b085      	sub	sp, #20
 8003e0a:	296e      	cmp	r1, #110	; 0x6e
 8003e0c:	4617      	mov	r7, r2
 8003e0e:	4606      	mov	r6, r0
 8003e10:	4698      	mov	r8, r3
 8003e12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003e14:	f000 80b3 	beq.w	8003f7e <_printf_i+0x182>
 8003e18:	d822      	bhi.n	8003e60 <_printf_i+0x64>
 8003e1a:	2963      	cmp	r1, #99	; 0x63
 8003e1c:	d036      	beq.n	8003e8c <_printf_i+0x90>
 8003e1e:	d80a      	bhi.n	8003e36 <_printf_i+0x3a>
 8003e20:	2900      	cmp	r1, #0
 8003e22:	f000 80b9 	beq.w	8003f98 <_printf_i+0x19c>
 8003e26:	2958      	cmp	r1, #88	; 0x58
 8003e28:	f000 8083 	beq.w	8003f32 <_printf_i+0x136>
 8003e2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e30:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003e34:	e032      	b.n	8003e9c <_printf_i+0xa0>
 8003e36:	2964      	cmp	r1, #100	; 0x64
 8003e38:	d001      	beq.n	8003e3e <_printf_i+0x42>
 8003e3a:	2969      	cmp	r1, #105	; 0x69
 8003e3c:	d1f6      	bne.n	8003e2c <_printf_i+0x30>
 8003e3e:	6820      	ldr	r0, [r4, #0]
 8003e40:	6813      	ldr	r3, [r2, #0]
 8003e42:	0605      	lsls	r5, r0, #24
 8003e44:	f103 0104 	add.w	r1, r3, #4
 8003e48:	d52a      	bpl.n	8003ea0 <_printf_i+0xa4>
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6011      	str	r1, [r2, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	da03      	bge.n	8003e5a <_printf_i+0x5e>
 8003e52:	222d      	movs	r2, #45	; 0x2d
 8003e54:	425b      	negs	r3, r3
 8003e56:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003e5a:	486f      	ldr	r0, [pc, #444]	; (8004018 <_printf_i+0x21c>)
 8003e5c:	220a      	movs	r2, #10
 8003e5e:	e039      	b.n	8003ed4 <_printf_i+0xd8>
 8003e60:	2973      	cmp	r1, #115	; 0x73
 8003e62:	f000 809d 	beq.w	8003fa0 <_printf_i+0x1a4>
 8003e66:	d808      	bhi.n	8003e7a <_printf_i+0x7e>
 8003e68:	296f      	cmp	r1, #111	; 0x6f
 8003e6a:	d020      	beq.n	8003eae <_printf_i+0xb2>
 8003e6c:	2970      	cmp	r1, #112	; 0x70
 8003e6e:	d1dd      	bne.n	8003e2c <_printf_i+0x30>
 8003e70:	6823      	ldr	r3, [r4, #0]
 8003e72:	f043 0320 	orr.w	r3, r3, #32
 8003e76:	6023      	str	r3, [r4, #0]
 8003e78:	e003      	b.n	8003e82 <_printf_i+0x86>
 8003e7a:	2975      	cmp	r1, #117	; 0x75
 8003e7c:	d017      	beq.n	8003eae <_printf_i+0xb2>
 8003e7e:	2978      	cmp	r1, #120	; 0x78
 8003e80:	d1d4      	bne.n	8003e2c <_printf_i+0x30>
 8003e82:	2378      	movs	r3, #120	; 0x78
 8003e84:	4865      	ldr	r0, [pc, #404]	; (800401c <_printf_i+0x220>)
 8003e86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e8a:	e055      	b.n	8003f38 <_printf_i+0x13c>
 8003e8c:	6813      	ldr	r3, [r2, #0]
 8003e8e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e92:	1d19      	adds	r1, r3, #4
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6011      	str	r1, [r2, #0]
 8003e98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e08c      	b.n	8003fba <_printf_i+0x1be>
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ea6:	6011      	str	r1, [r2, #0]
 8003ea8:	bf18      	it	ne
 8003eaa:	b21b      	sxthne	r3, r3
 8003eac:	e7cf      	b.n	8003e4e <_printf_i+0x52>
 8003eae:	6813      	ldr	r3, [r2, #0]
 8003eb0:	6825      	ldr	r5, [r4, #0]
 8003eb2:	1d18      	adds	r0, r3, #4
 8003eb4:	6010      	str	r0, [r2, #0]
 8003eb6:	0628      	lsls	r0, r5, #24
 8003eb8:	d501      	bpl.n	8003ebe <_printf_i+0xc2>
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	e002      	b.n	8003ec4 <_printf_i+0xc8>
 8003ebe:	0668      	lsls	r0, r5, #25
 8003ec0:	d5fb      	bpl.n	8003eba <_printf_i+0xbe>
 8003ec2:	881b      	ldrh	r3, [r3, #0]
 8003ec4:	296f      	cmp	r1, #111	; 0x6f
 8003ec6:	bf14      	ite	ne
 8003ec8:	220a      	movne	r2, #10
 8003eca:	2208      	moveq	r2, #8
 8003ecc:	4852      	ldr	r0, [pc, #328]	; (8004018 <_printf_i+0x21c>)
 8003ece:	2100      	movs	r1, #0
 8003ed0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ed4:	6865      	ldr	r5, [r4, #4]
 8003ed6:	2d00      	cmp	r5, #0
 8003ed8:	60a5      	str	r5, [r4, #8]
 8003eda:	f2c0 8095 	blt.w	8004008 <_printf_i+0x20c>
 8003ede:	6821      	ldr	r1, [r4, #0]
 8003ee0:	f021 0104 	bic.w	r1, r1, #4
 8003ee4:	6021      	str	r1, [r4, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d13d      	bne.n	8003f66 <_printf_i+0x16a>
 8003eea:	2d00      	cmp	r5, #0
 8003eec:	f040 808e 	bne.w	800400c <_printf_i+0x210>
 8003ef0:	4665      	mov	r5, ip
 8003ef2:	2a08      	cmp	r2, #8
 8003ef4:	d10b      	bne.n	8003f0e <_printf_i+0x112>
 8003ef6:	6823      	ldr	r3, [r4, #0]
 8003ef8:	07db      	lsls	r3, r3, #31
 8003efa:	d508      	bpl.n	8003f0e <_printf_i+0x112>
 8003efc:	6923      	ldr	r3, [r4, #16]
 8003efe:	6862      	ldr	r2, [r4, #4]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	bfde      	ittt	le
 8003f04:	2330      	movle	r3, #48	; 0x30
 8003f06:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f0a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003f0e:	ebac 0305 	sub.w	r3, ip, r5
 8003f12:	6123      	str	r3, [r4, #16]
 8003f14:	f8cd 8000 	str.w	r8, [sp]
 8003f18:	463b      	mov	r3, r7
 8003f1a:	aa03      	add	r2, sp, #12
 8003f1c:	4621      	mov	r1, r4
 8003f1e:	4630      	mov	r0, r6
 8003f20:	f7ff fef6 	bl	8003d10 <_printf_common>
 8003f24:	3001      	adds	r0, #1
 8003f26:	d14d      	bne.n	8003fc4 <_printf_i+0x1c8>
 8003f28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f2c:	b005      	add	sp, #20
 8003f2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f32:	4839      	ldr	r0, [pc, #228]	; (8004018 <_printf_i+0x21c>)
 8003f34:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003f38:	6813      	ldr	r3, [r2, #0]
 8003f3a:	6821      	ldr	r1, [r4, #0]
 8003f3c:	1d1d      	adds	r5, r3, #4
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6015      	str	r5, [r2, #0]
 8003f42:	060a      	lsls	r2, r1, #24
 8003f44:	d50b      	bpl.n	8003f5e <_printf_i+0x162>
 8003f46:	07ca      	lsls	r2, r1, #31
 8003f48:	bf44      	itt	mi
 8003f4a:	f041 0120 	orrmi.w	r1, r1, #32
 8003f4e:	6021      	strmi	r1, [r4, #0]
 8003f50:	b91b      	cbnz	r3, 8003f5a <_printf_i+0x15e>
 8003f52:	6822      	ldr	r2, [r4, #0]
 8003f54:	f022 0220 	bic.w	r2, r2, #32
 8003f58:	6022      	str	r2, [r4, #0]
 8003f5a:	2210      	movs	r2, #16
 8003f5c:	e7b7      	b.n	8003ece <_printf_i+0xd2>
 8003f5e:	064d      	lsls	r5, r1, #25
 8003f60:	bf48      	it	mi
 8003f62:	b29b      	uxthmi	r3, r3
 8003f64:	e7ef      	b.n	8003f46 <_printf_i+0x14a>
 8003f66:	4665      	mov	r5, ip
 8003f68:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f6c:	fb02 3311 	mls	r3, r2, r1, r3
 8003f70:	5cc3      	ldrb	r3, [r0, r3]
 8003f72:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003f76:	460b      	mov	r3, r1
 8003f78:	2900      	cmp	r1, #0
 8003f7a:	d1f5      	bne.n	8003f68 <_printf_i+0x16c>
 8003f7c:	e7b9      	b.n	8003ef2 <_printf_i+0xf6>
 8003f7e:	6813      	ldr	r3, [r2, #0]
 8003f80:	6825      	ldr	r5, [r4, #0]
 8003f82:	1d18      	adds	r0, r3, #4
 8003f84:	6961      	ldr	r1, [r4, #20]
 8003f86:	6010      	str	r0, [r2, #0]
 8003f88:	0628      	lsls	r0, r5, #24
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	d501      	bpl.n	8003f92 <_printf_i+0x196>
 8003f8e:	6019      	str	r1, [r3, #0]
 8003f90:	e002      	b.n	8003f98 <_printf_i+0x19c>
 8003f92:	066a      	lsls	r2, r5, #25
 8003f94:	d5fb      	bpl.n	8003f8e <_printf_i+0x192>
 8003f96:	8019      	strh	r1, [r3, #0]
 8003f98:	2300      	movs	r3, #0
 8003f9a:	4665      	mov	r5, ip
 8003f9c:	6123      	str	r3, [r4, #16]
 8003f9e:	e7b9      	b.n	8003f14 <_printf_i+0x118>
 8003fa0:	6813      	ldr	r3, [r2, #0]
 8003fa2:	1d19      	adds	r1, r3, #4
 8003fa4:	6011      	str	r1, [r2, #0]
 8003fa6:	681d      	ldr	r5, [r3, #0]
 8003fa8:	6862      	ldr	r2, [r4, #4]
 8003faa:	2100      	movs	r1, #0
 8003fac:	4628      	mov	r0, r5
 8003fae:	f000 f837 	bl	8004020 <memchr>
 8003fb2:	b108      	cbz	r0, 8003fb8 <_printf_i+0x1bc>
 8003fb4:	1b40      	subs	r0, r0, r5
 8003fb6:	6060      	str	r0, [r4, #4]
 8003fb8:	6863      	ldr	r3, [r4, #4]
 8003fba:	6123      	str	r3, [r4, #16]
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fc2:	e7a7      	b.n	8003f14 <_printf_i+0x118>
 8003fc4:	6923      	ldr	r3, [r4, #16]
 8003fc6:	462a      	mov	r2, r5
 8003fc8:	4639      	mov	r1, r7
 8003fca:	4630      	mov	r0, r6
 8003fcc:	47c0      	blx	r8
 8003fce:	3001      	adds	r0, #1
 8003fd0:	d0aa      	beq.n	8003f28 <_printf_i+0x12c>
 8003fd2:	6823      	ldr	r3, [r4, #0]
 8003fd4:	079b      	lsls	r3, r3, #30
 8003fd6:	d413      	bmi.n	8004000 <_printf_i+0x204>
 8003fd8:	68e0      	ldr	r0, [r4, #12]
 8003fda:	9b03      	ldr	r3, [sp, #12]
 8003fdc:	4298      	cmp	r0, r3
 8003fde:	bfb8      	it	lt
 8003fe0:	4618      	movlt	r0, r3
 8003fe2:	e7a3      	b.n	8003f2c <_printf_i+0x130>
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	464a      	mov	r2, r9
 8003fe8:	4639      	mov	r1, r7
 8003fea:	4630      	mov	r0, r6
 8003fec:	47c0      	blx	r8
 8003fee:	3001      	adds	r0, #1
 8003ff0:	d09a      	beq.n	8003f28 <_printf_i+0x12c>
 8003ff2:	3501      	adds	r5, #1
 8003ff4:	68e3      	ldr	r3, [r4, #12]
 8003ff6:	9a03      	ldr	r2, [sp, #12]
 8003ff8:	1a9b      	subs	r3, r3, r2
 8003ffa:	42ab      	cmp	r3, r5
 8003ffc:	dcf2      	bgt.n	8003fe4 <_printf_i+0x1e8>
 8003ffe:	e7eb      	b.n	8003fd8 <_printf_i+0x1dc>
 8004000:	2500      	movs	r5, #0
 8004002:	f104 0919 	add.w	r9, r4, #25
 8004006:	e7f5      	b.n	8003ff4 <_printf_i+0x1f8>
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1ac      	bne.n	8003f66 <_printf_i+0x16a>
 800400c:	7803      	ldrb	r3, [r0, #0]
 800400e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004012:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004016:	e76c      	b.n	8003ef2 <_printf_i+0xf6>
 8004018:	08004329 	.word	0x08004329
 800401c:	0800433a 	.word	0x0800433a

08004020 <memchr>:
 8004020:	b510      	push	{r4, lr}
 8004022:	b2c9      	uxtb	r1, r1
 8004024:	4402      	add	r2, r0
 8004026:	4290      	cmp	r0, r2
 8004028:	4603      	mov	r3, r0
 800402a:	d101      	bne.n	8004030 <memchr+0x10>
 800402c:	2300      	movs	r3, #0
 800402e:	e003      	b.n	8004038 <memchr+0x18>
 8004030:	781c      	ldrb	r4, [r3, #0]
 8004032:	3001      	adds	r0, #1
 8004034:	428c      	cmp	r4, r1
 8004036:	d1f6      	bne.n	8004026 <memchr+0x6>
 8004038:	4618      	mov	r0, r3
 800403a:	bd10      	pop	{r4, pc}

0800403c <memmove>:
 800403c:	4288      	cmp	r0, r1
 800403e:	b510      	push	{r4, lr}
 8004040:	eb01 0302 	add.w	r3, r1, r2
 8004044:	d807      	bhi.n	8004056 <memmove+0x1a>
 8004046:	1e42      	subs	r2, r0, #1
 8004048:	4299      	cmp	r1, r3
 800404a:	d00a      	beq.n	8004062 <memmove+0x26>
 800404c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004050:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004054:	e7f8      	b.n	8004048 <memmove+0xc>
 8004056:	4283      	cmp	r3, r0
 8004058:	d9f5      	bls.n	8004046 <memmove+0xa>
 800405a:	1881      	adds	r1, r0, r2
 800405c:	1ad2      	subs	r2, r2, r3
 800405e:	42d3      	cmn	r3, r2
 8004060:	d100      	bne.n	8004064 <memmove+0x28>
 8004062:	bd10      	pop	{r4, pc}
 8004064:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004068:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800406c:	e7f7      	b.n	800405e <memmove+0x22>

0800406e <_realloc_r>:
 800406e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004070:	4607      	mov	r7, r0
 8004072:	4614      	mov	r4, r2
 8004074:	460e      	mov	r6, r1
 8004076:	b921      	cbnz	r1, 8004082 <_realloc_r+0x14>
 8004078:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800407c:	4611      	mov	r1, r2
 800407e:	f7ff bc69 	b.w	8003954 <_malloc_r>
 8004082:	b922      	cbnz	r2, 800408e <_realloc_r+0x20>
 8004084:	f7ff fc1a 	bl	80038bc <_free_r>
 8004088:	4625      	mov	r5, r4
 800408a:	4628      	mov	r0, r5
 800408c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800408e:	f000 f814 	bl	80040ba <_malloc_usable_size_r>
 8004092:	42a0      	cmp	r0, r4
 8004094:	d20f      	bcs.n	80040b6 <_realloc_r+0x48>
 8004096:	4621      	mov	r1, r4
 8004098:	4638      	mov	r0, r7
 800409a:	f7ff fc5b 	bl	8003954 <_malloc_r>
 800409e:	4605      	mov	r5, r0
 80040a0:	2800      	cmp	r0, #0
 80040a2:	d0f2      	beq.n	800408a <_realloc_r+0x1c>
 80040a4:	4631      	mov	r1, r6
 80040a6:	4622      	mov	r2, r4
 80040a8:	f7ff fbf4 	bl	8003894 <memcpy>
 80040ac:	4631      	mov	r1, r6
 80040ae:	4638      	mov	r0, r7
 80040b0:	f7ff fc04 	bl	80038bc <_free_r>
 80040b4:	e7e9      	b.n	800408a <_realloc_r+0x1c>
 80040b6:	4635      	mov	r5, r6
 80040b8:	e7e7      	b.n	800408a <_realloc_r+0x1c>

080040ba <_malloc_usable_size_r>:
 80040ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040be:	1f18      	subs	r0, r3, #4
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	bfbc      	itt	lt
 80040c4:	580b      	ldrlt	r3, [r1, r0]
 80040c6:	18c0      	addlt	r0, r0, r3
 80040c8:	4770      	bx	lr
	...

080040cc <_init>:
 80040cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ce:	bf00      	nop
 80040d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040d2:	bc08      	pop	{r3}
 80040d4:	469e      	mov	lr, r3
 80040d6:	4770      	bx	lr

080040d8 <_fini>:
 80040d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040da:	bf00      	nop
 80040dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040de:	bc08      	pop	{r3}
 80040e0:	469e      	mov	lr, r3
 80040e2:	4770      	bx	lr
